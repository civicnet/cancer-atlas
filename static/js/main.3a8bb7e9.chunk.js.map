{"version":3,"sources":["components/ServiceMap/index.tsx","components/Tooltip/index.tsx","App.tsx","components/CustomSwitch/index.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceType","INITIAL_VIEW_STATE","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","minZoom","bearing","pitch","ServiceTypeReadable","FamilyMedicine","HomeCare","Imaging","Laboratory","ServiceTypeIcons","ServiceTypeColorMap","ServiceMap","props","useState","data","setData","useEffect","files","a","async","responses","map","file","fetch","then","response","json","service","type","Promise","all","results","allServices","concat","apply","api","services","scatterplot","ScatterplotLayer","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","d","lng","lat","getRadius","getFillColor","chroma","rgb","getLineColor","onHover","object","onClick","initialViewState","controller","layers","mapboxApiAccessToken","process","useStyles","makeStyles","card","title","fontSize","icon","textAlign","Tooltip","classes","differentiator","ListItem","ListItemIcon","Icon","className","clsx","ListItemText","primary","supplierName","specialty","Card","style","CardContent","Typography","color","gutterBottom","List","dense","medicName","name","address","email","phone","CardActions","onClose","IconButton","size","marginLeft","theme","aside","zIndex","position","top","left","minWidth","maxWidth","tooltipContainer","right","filterList","marginTop","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","lineHeight","textTransform","marginBottom","brandingSymbol","marginRight","bullet","display","margin","transform","pos","serviceIcon","beta","fontFamily","listItemRoot","paddingLeft","popover","pointerEvents","paper","padding","spacing","App","React","checked","setChecked","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","loadCSS","document","querySelector","variant","component","href","target","rel","Object","values","value","ServiceSwitch","withStyles","switchBase","backgroundColor","track","Switch","key","root","ListItemSecondaryAction","edge","onChange","currentIndex","indexOf","newChecked","push","splice","inputProps","Button","popupId","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","obj","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a8bb7e9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { StaticMap } from \"react-map-gl\";\nimport chroma from \"chroma-js\";\n\nconst INITIAL_VIEW_STATE = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  longitude: 26.1,\n  latitude: 44.4368449,\n  zoom: 11,\n  maxZoom: 20,\n  minZoom: 1,\n  bearing: 0,\n  pitch: 0\n};\n\nexport enum ServiceType {\n  FamilyMedicine = \"mf_bucuresti_with_loc_min_flat\",\n  Laboratory = \"laboratoare_bucuresti_with_loc_min_flat\",\n  HomeCare = \"ingrijiri_domiciliu_bucuresti_with_loc_min_flat\",\n  Imaging = \"imagistica_bucuresti_with_loc_min_flat\"\n}\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n}\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#34495e\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n}\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-lungs\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n}\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#34495e\"\n}\n \nexport interface ServiceObject {\n  type: ServiceType,\n  [key: string]: string,\n}\n\ninterface Props {\n  services: ServiceType[];\n  onHover: (obj: ServiceObject) => void,\n  onClick: (obj: ServiceObject) => void,\n}\n \nconst ServiceMap: React.FC<Props> = (props: Props) => {\n  const [data, setData] = useState();\n\n  const api = async (files: ServiceType[]) => {\n    const responses = files.map(file =>\n      fetch(\n        `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@0.1.0/data/json/${file}.json`\n      )\n        .then(response => response.json())\n        .then(json => {\n          return json.map((service: any) => {\n            return { \n              ...service,\n              type: file\n            };\n          });\n        })\n    );\n\n    Promise.all(responses).then(results => {\n      const allServices = [].concat.apply([], results);\n      setData(allServices);\n    });\n  };\n\n  useEffect(() => {\n    api(props.services);\n  }, [props]);\n\n  if (!data) {\n    return null;\n  }\n\n  const scatterplot = new ScatterplotLayer({\n    id: \"ScatterplotLayer\",\n    data,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: any) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: any) => chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb(),\n    getLineColor: [0, 0, 0],\n    onHover: (d: any) => props.onHover(d.object),\n    onClick: (d: any) => props.onClick(d.object),\n  });\n\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      layers={[scatterplot]}\n    >\n      <StaticMap\n        width=\"100%\"\n        height=\"100%\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      />\n    </DeckGL>\n  );\n};\n\nexport default ServiceMap;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  ServiceObject,\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: ServiceObject;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  return (\n    <Card className={classes.card} style={props.style}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true}>\n          <ListItem>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport { loadCSS } from \"fg-loadcss\";\n\nimport ServiceMap, {\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable,\n  ServiceTypeColorMap,\n  ServiceObject\n} from \"./components/ServiceMap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Icon,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Popover,\n  Box,\n} from \"@material-ui/core\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { CustomSwitch } from \"./components/CustomSwitch\";\nimport Tooltip from \"./components/Tooltip\";\n\nconst useStyles = makeStyles(theme => ({\n  aside: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    left: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    right: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  filterList: {\n    marginTop: 20\n  },\n  gradientText: {\n    background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    lineHeight: \"32px\",\n    textTransform: \"uppercase\",\n    marginBottom: 20\n  },\n  brandingSymbol: {\n    marginRight: 12\n  },\n  card: {\n    width: \"100%\"\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 14,\n    textTransform: \"lowercase\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  }\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  const [checked, setChecked] = React.useState([ServiceType.FamilyMedicine]);\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  const handleToggle = (value: any) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const onServiceHover = (obj: ServiceObject) => {\n    setTooltip(obj);\n  };\n\n  const onServiceClick = (obj: ServiceObject) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  return (\n    <div>\n      <aside className={classes.aside}>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography\n              variant=\"h5\"\n              component=\"h2\"\n              className={clsx(classes.branding, classes.gradientText)}\n            >\n              <Icon\n                className={clsx(\n                  classes.brandingSymbol,\n                  classes.gradientText,\n                  \"fas fa-route\"\n                )}\n              />\n              Navigator\n              <sup className={classes.beta}>α</sup>\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Aplicația GPS a{\" \"}\n              <a\n                href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                navigatorilor de pacienți oncologici\n              </a>{\" \"}\n              din România.\n            </Typography>\n            <List className={classes.filterList}>\n              {Object.values(ServiceType).map(file => {\n                const ServiceSwitch = CustomSwitch(ServiceTypeColorMap[file]);\n                return (\n                  <ListItem key={file} classes={{ root: classes.listItemRoot }}>\n                    <ListItemIcon>\n                      <Icon\n                        className={clsx(\n                          classes.serviceIcon,\n                          ServiceTypeIcons[file]\n                        )}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      id=\"switch-list-label-wifi\"\n                      primary={ServiceTypeReadable[file]}\n                    />\n                    <ListItemSecondaryAction>\n                      <ServiceSwitch\n                        edge=\"end\"\n                        onChange={handleToggle(file)}\n                        checked={checked.indexOf(file) !== -1}\n                        inputProps={{\n                          \"aria-labelledby\": \"switch-list-label-wifi\"\n                        }}\n                      />\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </CardContent>\n          <CardActions>\n            <Button size=\"small\">Cod sursă</Button>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n              {popupState => (\n                <div>\n                  <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    {...bindTrigger(popupState)}\n                  >\n                    Despre proiect\n                    <Icon\n                      className=\"far fa-question-circle\"\n                      style={{ marginLeft: 4, fontSize: 13 }}\n                    />\n                  </Button>\n\n                  <Popover\n                    {...bindPopover(popupState)}\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\"\n                    }}\n                    transformOrigin={{\n                      vertical: \"top\",\n                      horizontal: \"center\"\n                    }}\n                  >\n                    <Box p={2} style={{ maxWidth: 320 }}>\n                      <Typography variant=\"body1\">\n                        Un proiect{\" \"}\n                        <a\n                          href=\"https://civicnet.ro\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          CivicNet\n                        </a>{\" \"}\n                        și{\" \"}\n                        <a\n                          href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Asociația Sănătate pentru Comunitate\n                        </a>.\n                      </Typography>\n                      <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n                        Ne propunem să dezvoltăm prima aplicație dedicată\n                        pacienților de cancer pulmonar din România,\n                        navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                      <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n                        Aplicația va conține informații importante despre\n                        traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de ghiduri\n                        pentru pacienți.\n                      </Typography>\n                      <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n                        În momentul de față, aplicația se află în stadiul de prototip interactiv. \n                        Ne puteți urmări pe Facebook pentru a fi la curent cu ultimele noutăți.\n                      </Typography>\n                    </Box>\n                  </Popover>\n                </div>\n              )}\n            </PopupState>\n          </CardActions>\n        </Card>\n      </aside>\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n        {<Tooltip service={tooltip} style={{ marginTop: 20 }} />}\n      </div>\n      <main>\n        <ServiceMap\n          services={checked}\n          onHover={onServiceHover}\n          onClick={onServiceClick}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\n \nimport { ServiceTypeColor } from '../ServiceMap';\n\nexport const CustomSwitch = (color: ServiceTypeColor) => {\n    return withStyles({\n        switchBase: {\n            color,\n            '&$checked': {\n                color,\n            },\n            '&$checked + $track': {\n                backgroundColor: color,\n            },\n        },\n        checked: {},\n        track: {},\n    })(Switch);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}