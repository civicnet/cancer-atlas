{"version":3,"sources":["components/ServiceMap/ServiceMapSlice.ts","api/API.ts","components/LayerPicker/LayerPickerSlice.ts","components/SwitchListItem/SwitchListItemSlice.ts","components/SearchGroup/SearchGroupSlice.ts","store/rootReducer.ts","store/store.ts","components/Logo/index.tsx","components/IconClusterLayer/index.tsx","lib/Either.ts","components/ServiceMap/layers.ts","lib/defaults.ts","components/ServiceMap/index.tsx","components/CustomSwitch/index.tsx","components/SwitchListItem/index.tsx","components/SearchGroup/index.tsx","containers/Container.tsx","components/InfoCard/index.tsx","containers/About.tsx","containers/Changelog.tsx","routes/index.tsx","components/Tooltip/index.tsx","components/LayerPicker/index.tsx","components/Legend/index.tsx","containers/Atlas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceType","ApiCode","fetchGeoJSON","files","cb","a","async","responses","map","file","fetch","then","response","json","features","service","type","Promise","all","results","allServices","concat","apply","LayerType","initialDataStatus","code","Uninitialized","initialMedicalServices","Object","values","reduce","acc","data","status","initialState","viewState","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","minZoom","bearing","pitch","medicalServices","geoJsonData","serviceMapSlice","createSlice","name","reducers","updateViewState","state","action","payload","receiveMedicalServiceDataLayer","layer","setMedicalServiceDataLayerCode","receiveMedicalServicesGeoJsonDataSuccess","OK","receiveMedicalServicesGeoJsonDataFailed","Fail","msg","actions","services","FamilyMedicine","HomeCare","Imaging","Laboratory","switchListItemSlice","toggleServiceType","currentIndex","indexOf","newChecked","push","splice","layerType","ScatterPlot","layerPickerSlice","setLayerType","query","searchOptions","threshold","location","distance","tokenize","maxPatternLength","keys","searchGroupSlice","setQuery","performQuery","length","searchResults","undefined","serviceType","currentLayer","Fuse","search","rootReducer","combineReducers","switchListItemReducer","layerPickerReducer","serviceMapReducer","searchGroupReducer","store","configureStore","reducer","useStyles","makeStyles","theme","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","fontSize","lineHeight","textTransform","position","paddingLeft","zIndex","APP_BAR_COLOR","brandingSymbol","marginRight","display","right","top","border","backgroundClip","textShadow","content","bottom","left","margin","beta","fontFamily","Logo","props","classes","style","className","clsx","Icon","verticalAlign","marginTop","Typography","variant","component","IconClusterLayer","changeFlags","somethingChanged","oldProps","rebuildIndex","dataChanged","sizeScale","index","Supercluster","radius","load","d","geometry","coordinates","getPosition","properties","this","setState","z","Math","floor","context","viewport","getClusters","info","mode","pickedObject","object","cluster","objects","getLeaves","cluster_id","f","iconAtlas","iconMapping","id","IconLayer","getSubLayerProps","getIcon","size","point_count","getSize","min","CompositeLayer","isRight","val","tag","Left","value","Right","layerName","getAggregateColorRange","chroma","rgb","getScatterplot","pointData","isVisible","ScatterplotLayer","visible","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","lng","lat","getRadius","getFillColor","ServiceTypeColorMap","getLineColor","onHover","x","y","onClick","getHeatmap","HeatmapLayer","colorRange","radiusPixels","intensity","getGrid","ScreenGridLayer","cellSizePixels","aggregation","coverage","colorScaleType","noOpFunction","ServiceTypeReadable","ServiceTypeBuildings","ServiceTypeIcons","createStyles","icon","iconVariant","spacing","message","alignItems","ServiceMap","React","useState","open","setOpen","handleClose","_","reason","dispatch","useDispatch","useSelector","useEffect","Extruded","filter","Boolean","toString","fetchMedicalServicesBuildingData","onDone","onEach","onFail","forEach","oboe","getJsonPath","node","done","fail","streamJSON","displayedData","layers","shownServices","flatData","Heatmap","Grid","key","includes","getLayers","toast","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","amber","IconButton","aria-label","color","initialViewState","controller","mapStyle","mapboxApiAccessToken","process","CustomSwitch","switchColor","withStyles","switchBase","backgroundColor","checked","track","Switch","serviceIcon","textAlign","listItemRoot","SwitchListItem","getCountFromDataArray","serviceData","ServiceSwitch","isChecked","ListItem","root","ListItemIcon","ListItemText","primary","secondary","searchResultsCoerced","getCountForServiceType","ListItemSecondaryAction","edge","disabled","onChange","inputProps","borderRadius","shape","fade","palette","common","white","marginLeft","breakpoints","up","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","filterOpen","easing","sharp","duration","enteringScreen","maxHeight","filterClose","overflowY","leavingScreen","filterCard","paddingBottom","filterCardContent","SearchGroup","isFilterOpen","setIsFilterOpen","debouncedQuery","debounce","resultCount","res","count","Number","InputBase","placeholder","input","ev","target","onKeyDown","keyCode","clear","Badge","badgeContent","Card","CardContent","List","dense","fontStyle","Container","children","card","InfoCard","href","rel","infoCard","paddingTop","About","Link","to","paddingRight","maxWidth","paper","inline","octokit","Octokit","log","debug","warn","console","error","Changelog","commits","setCommits","repos","listCommits","owner","repo","per_page","repsonse","commit","Fragment","sha","disableGutters","ListItemAvatar","Avatar","alt","author","login","src","avatar_url","url","textDecoration","Intl","DateTimeFormat","format","Date","date","Divider","routes","path","exact","main","text","title","Tooltip","differentiator","supplierName","specialty","transformX","pos","transformY","posStyle","transform","gutterBottom","disablePadding","divider","medicName","address","email","phone","CardActions","LayerPicker","layerTypePickerData","flex","ToggleButtonGroup","exclusive","newLayerType","flexDirection","entries","ToggleButton","Legend","idx","hex","alignSelf","tooltipContainer","layerPicker","Atlas","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","obj","bullet","marginBottom","popover","appBar","drawer","appBarShift","menuButton","hide","flexShrink","whiteSpace","drawerPaper","drawerOpen","drawerClose","overflowX","toolbar","mixins","toolbarIcons","grow","flexGrow","menuItem","withRouter","useTheme","isDrawerOpen","setIsDrawerOpen","loadCSS","document","querySelector","CssBaseline","AppBar","Toolbar","popupId","popupState","bindTrigger","Popover","bindPopover","transformOrigin","Box","p","Drawer","direction","route","button","selected","pathname","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d03d7226.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../store/store\";\nimport { fetchGeoJSON } from \"../../api/API\";\n\ninterface ViewState {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  maxZoom: number;\n  minZoom: number;\n  bearing: number;\n  pitch: number;\n}\n\nexport enum ServiceType {\n  FamilyMedicine = \"family_medicine\",\n  Laboratory = \"laboratories\",\n  HomeCare = \"home_care\",\n  Imaging = \"imaging\"\n}\n\nexport enum ApiCode {\n  Uninitialized,\n  OK,\n  Fail\n}\n\ntype ApiUninitialized = {\n  code: ApiCode.Uninitialized;\n};\n\ntype ApiOK = {\n  code: ApiCode.OK;\n};\n\ntype ApiError = {\n  code: ApiCode.Fail;\n  msg: string;\n};\n\ntype ApiStatus = ApiOK | ApiError | ApiUninitialized;\n\nexport interface MedicalServiceData {\n  address: string;\n  contractNo: string;\n  email: string;\n  medicName?: string;\n  name?: string;\n  specialty?: string;\n  phone: string;\n  supplierName: string;\n  lat: number;\n  lng: number;\n  type: ServiceType;\n}\n\nexport interface MedicalServiceDataLayer {\n  data: MedicalServiceData[];\n  status: ApiStatus;\n}\n\nexport type MedicalServiceDataLayerMap = {\n  [key in ServiceType]: MedicalServiceDataLayer;\n};\n\ninterface GeoJsonData {\n  data: any[];\n  status: ApiStatus;\n}\n\ntype CurrentDisplayState = {\n  viewState: ViewState;\n  medicalServices: MedicalServiceDataLayerMap;\n  geoJsonData: GeoJsonData;\n};\n\nconst initialDataStatus: ApiStatus = {\n  code: ApiCode.Uninitialized\n};\n\nconst initialMedicalServices = Object.values(ServiceType).reduce(\n  (acc: Partial<MedicalServiceDataLayerMap>, type: ServiceType) => {\n    return {\n      ...acc,\n      [type]: {\n        data: [],\n        status: initialDataStatus\n      }\n    };\n  },\n  {}\n);\n\nconst initialViewState = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  longitude: 23.5602928,\n  latitude: 46.0291793,\n  zoom: 6,\n  maxZoom: 20,\n  minZoom: 1,\n  bearing: 0,\n  pitch: 0\n};\n\nlet initialState: CurrentDisplayState = {\n  viewState: initialViewState,\n  medicalServices: initialMedicalServices as MedicalServiceDataLayerMap,\n  geoJsonData: {\n    data: [],\n    status: initialDataStatus\n  }\n};\n\nconst serviceMapSlice = createSlice({\n  name: \"serviceMap\",\n  initialState,\n  reducers: {\n    updateViewState(state, action: PayloadAction<Partial<ViewState>>) {\n      state.viewState = {\n        ...state.viewState,\n        ...action.payload\n      };\n    },\n    receiveMedicalServiceDataLayer(\n      state,\n      action: PayloadAction<{\n        service: ServiceType;\n        layer: MedicalServiceDataLayer;\n      }>\n    ) {\n      state.medicalServices = {\n        ...state.medicalServices,\n        [action.payload.service]: action.payload.layer\n      };\n    },\n    setMedicalServiceDataLayerCode(\n      state,\n      action: PayloadAction<{ service: ServiceType; status: ApiStatus }>\n    ) {\n      state.medicalServices = {\n        ...state.medicalServices,\n        [action.payload.service]: {\n          data: state.medicalServices[action.payload.service].data,\n          status: action.payload.status\n        }\n      };\n    },\n    receiveMedicalServicesGeoJsonDataSuccess(\n      state,\n      action: PayloadAction<any[]>\n    ) {\n      state.geoJsonData.data = action.payload;\n      state.geoJsonData.status = {\n        code: ApiCode.OK\n      };\n    },\n    receiveMedicalServicesGeoJsonDataFailed(\n      state,\n      action: PayloadAction<string>\n    ) {\n      state.geoJsonData.status = {\n        code: ApiCode.Fail,\n        msg: action.payload\n      };\n    }\n  }\n});\n\nexport const {\n  updateViewState,\n  receiveMedicalServicesGeoJsonDataSuccess,\n  receiveMedicalServicesGeoJsonDataFailed,\n  receiveMedicalServiceDataLayer,\n  setMedicalServiceDataLayerCode\n} = serviceMapSlice.actions;\n\nexport default serviceMapSlice.reducer;\n\nexport const fetchMedicalServicesBuildingData = (\n  services: { file: string; type: ServiceType }[]\n): AppThunk => async dispatch => {\n  try {\n    await fetchGeoJSON(services, data => {\n      dispatch(receiveMedicalServicesGeoJsonDataSuccess(data));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesGeoJsonDataFailed(err.toString()));\n  }\n};\n","import oboe from \"oboe\";\nimport {\n  MedicalServiceData,\n  MedicalServiceDataLayer,\n  ApiCode\n} from \"../components/ServiceMap/ServiceMapSlice\";\n\nimport { ServiceType } from \"../components/ServiceMap/ServiceMapSlice\";\n\nconst VERSION = \"0.2.4\";\nconst getJsonPath = (type: string, file: string) =>\n  `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/national/${file}.${type}`;\n\nexport const fetchGeoJSON = async (\n  files: { file: string; type: ServiceType }[],\n  cb: (data: any) => void\n) => {\n  const type = \"geojson\";\n  const responses = files.map(({ file }) =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.features.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n\nexport const streamJSON = (\n  files: ServiceType[],\n  onDone: (service: ServiceType, data: MedicalServiceDataLayer) => void,\n  onEach: (data: MedicalServiceData) => void,\n  onFail: (service: ServiceType, msg: string) => void\n) => {\n  const type = \"json\";\n  files.forEach(file => {\n    oboe(getJsonPath(type, file))\n      .node(\"{lat lng}\", (data: MedicalServiceData) => {\n        onEach(data);\n        return {\n          ...data,\n          type: file\n        };\n      })\n      .done((data: MedicalServiceData[]) => {\n        onDone(file, {\n          data,\n          status: {\n            code: ApiCode.OK\n          }\n        });\n      })\n      .fail(() => {\n        onFail(file, `failed loading data`);\n      });\n  });\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum LayerType {\n  ScatterPlot = 'ScatterPlot',\n  Icon = 'Icon',\n  Heatmap = 'Heatmap',\n  Grid = 'Grid',\n  Extruded = 'Extruded'\n}\n\ntype CurrentDisplayState = {\n  layerType: LayerType;\n}\n\nlet initialState: CurrentDisplayState = {\n  layerType: LayerType.ScatterPlot,\n}\n\nconst layerPickerSlice = createSlice({\n  name: 'layerPicker',\n  initialState,\n  reducers: {\n    setLayerType(state, action: PayloadAction<LayerType>) {\n      if (state.layerType !== action.payload) {\n        state.layerType = action.payload;\n      }\n    },\n  }\n});\n\nexport const {\n  setLayerType,\n} = layerPickerSlice.actions;\n\nexport default layerPickerSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ServiceType } from \"../ServiceMap/ServiceMapSlice\";\n\ntype SelectedServiceTypes = ServiceType[];\ntype CurrentDisplayState = {\n  services: SelectedServiceTypes;\n};\n\nlet initialState: CurrentDisplayState = {\n  services: [\n    ServiceType.FamilyMedicine,\n    ServiceType.HomeCare,\n    ServiceType.Imaging,\n    ServiceType.Laboratory\n  ]\n};\n\nconst switchListItemSlice = createSlice({\n  name: \"switchListItem\",\n  initialState,\n  reducers: {\n    toggleServiceType(state, action: PayloadAction<ServiceType>) {\n      const currentIndex = state.services.indexOf(action.payload);\n      const newChecked = [...state.services];\n\n      if (currentIndex === -1) {\n        newChecked.push(action.payload);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      state.services = newChecked;\n    }\n  }\n});\n\nexport const { toggleServiceType } = switchListItemSlice.actions;\n\nexport default switchListItemSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport Fuse from \"fuse.js\";\nimport {\n  MedicalServiceDataLayerMap,\n  ServiceType,\n  ApiCode\n} from \"../ServiceMap/ServiceMapSlice\";\n\nconst filteredFields = [\n  \"address\",\n  \"contractNo\",\n  \"email\",\n  \"medicName\",\n  \"phone\",\n  \"supplierName\",\n  \"specialty\"\n];\n\nconst initialSearchOptions = {\n  threshold: 0.2,\n  location: 0,\n  distance: 100,\n  tokenize: true,\n  maxPatternLength: 16,\n  keys: filteredFields\n};\n\ntype CurrentDisplayState = {\n  query: string;\n  searchOptions: typeof initialSearchOptions;\n  searchResults?: Partial<MedicalServiceDataLayerMap>;\n};\n\nlet initialState: CurrentDisplayState = {\n  query: \"\",\n  searchOptions: initialSearchOptions\n};\n\nconst searchGroupSlice = createSlice({\n  name: \"searchGroup\",\n  initialState,\n  reducers: {\n    setQuery(state, action: PayloadAction<string>) {\n      state.query = action.payload;\n    },\n    performQuery(state, action: PayloadAction<MedicalServiceDataLayerMap>) {\n      if (state.query.length < 3) {\n        state.searchResults = undefined;\n        return;\n      }\n\n      state.searchResults = Object.keys(action.payload).reduce(\n        (acc: Partial<MedicalServiceDataLayerMap>, serviceType) => {\n          const currentLayer = action.payload[serviceType as ServiceType];\n          const fuse = new Fuse(currentLayer.data, state.searchOptions);\n          const results = fuse.search(state.query);\n\n          return {\n            ...acc,\n            [serviceType]: {\n              data: results,\n              status: { code: ApiCode.OK }\n            }\n          };\n        },\n        {}\n      );\n    }\n  }\n});\n\nexport const { setQuery, performQuery } = searchGroupSlice.actions;\n\nexport default searchGroupSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport switchListItemReducer from \"../components/SwitchListItem/SwitchListItemSlice\";\nimport layerPickerReducer from \"../components/LayerPicker/LayerPickerSlice\";\nimport serviceMapReducer from \"../components/ServiceMap/ServiceMapSlice\";\nimport searchGroupReducer from \"../components/SearchGroup/SearchGroupSlice\";\n\nconst rootReducer = combineReducers({\n  switchListItemReducer,\n  layerPickerReducer,\n  serviceMapReducer,\n  searchGroupReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer, { RootState } from './rootReducer';\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nconst store = configureStore({\n  reducer: rootReducer\n});\n\n/* if (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}; */\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React, { CSSProperties } from \"react\";\nimport { makeStyles, Typography, Icon } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { APP_BAR_COLOR } from \"../../App\";\n\nconst useStyles = makeStyles(theme => ({\n  gradientText: {\n    background: \"linear-gradient(103deg, #31dccf, #244fe7)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    fontSize: 14,\n    lineHeight: \"14px\",\n    textTransform: \"uppercase\",\n    position: \"relative\",\n    paddingLeft: 8,\n    zIndex: 2,\n    background: APP_BAR_COLOR\n  },\n  brandingSymbol: {\n    marginRight: 12,\n    fontSize: \"19px\",\n    position: \"absolute\",\n    display: \"block\",\n    right: 0,\n    top: -12,\n    border: \"2px solid transparent\",\n    width: \"50px\",\n    paddingLeft: 16,\n    height: 36,\n    background: APP_BAR_COLOR,\n    backgroundClip: \"padding-box\",\n    textShadow: \"none\",\n    \"&::before\": {\n      content: \"' '\",\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      zIndex: -1,\n      margin: \"-2px\",\n      background: `linear-gradient(\n        103deg,\n        #31dccf,\n        #244fe7)\n      `\n    }\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 8,\n    textTransform: \"lowercase\",\n    textShadow: \"none\",\n    position: \"absolute\",\n    left: 0,\n    zIndex: 100,\n    lineHeight: 1\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst Logo: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      style={props.style}\n      className={clsx(classes.branding, props.className)}\n    >\n      <div className={classes.brandingSymbol}>\n        <Icon\n          className={clsx(classes.gradientText, \"far fa-lungs\")}\n          style={{\n            width: \"unset\",\n            verticalAlign: \"sub\",\n            fontSize: 19,\n            marginTop: 6\n          }}\n        />\n      </div>\n      <Typography\n        variant=\"h5\"\n        component=\"h1\"\n        style={{ ...props.style, marginRight: 50 }}\n        className={clsx(classes.branding, props.className)}\n      >\n        <sup className={classes.beta}>β</sup>\n        Atlas\n      </Typography>\n    </div>\n  );\n};\n\nexport default Logo;\n","import { CompositeLayer } from '@deck.gl/core';\nimport { IconLayer } from '@deck.gl/layers';\nimport Supercluster from 'supercluster';\n\nfunction getIconName(size: number) {\n  if (size === 0) {\n    return '';\n  }\n  if (size < 10) {\n    return `marker-${size}`;\n  }\n  if (size < 100) {\n    return `marker-${Math.floor(size / 10)}0`;\n  }\n  return 'marker-100';\n}\n\nfunction getIconSize(size: number) {\n  return Math.min(100, size) / 100 + 1;\n}\n\nexport default class IconClusterLayer extends CompositeLayer {\n  static layerName = 'Foobar';\n\n  // eslint-disable-next-line\n  constructor(props: any) {\n    super(props);\n  }\n\n  shouldUpdateState({ changeFlags }: { changeFlags: any }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({ props, oldProps, changeFlags }: { props: any, oldProps: any, changeFlags: any }) {\n    const rebuildIndex = changeFlags.dataChanged || props.sizeScale !== oldProps.sizeScale;\n\n    if (rebuildIndex) {\n      const index = new Supercluster({ maxZoom: 16, radius: props.sizeScale });\n      index.load(\n        props.data.map((d: any) => ({\n          geometry: { coordinates: props.getPosition(d) },\n          properties: d\n        }))\n      );\n      this.setState({ index });\n    }\n\n    const z = Math.floor(this.context.viewport.zoom);\n    if (rebuildIndex || z !== this.state.z) {\n      this.setState({\n        data: this.state.index.getClusters([-180, -85, 180, 85], z),\n        z\n      });\n    }\n  }\n\n  getPickingInfo({ info, mode }: { info: any, mode: any }) {\n    const pickedObject = info.object && info.object.properties;\n    if (pickedObject) {\n      if (pickedObject.cluster && mode !== 'hover') {\n        info.objects = this.state.index\n          .getLeaves(pickedObject.cluster_id, 25)\n          .map((f: any) => f.properties);\n      }\n      info.object = pickedObject;\n    }\n    return info;\n  }\n\n  renderLayers() {\n    const { data } = this.state;\n    const { iconAtlas, iconMapping, sizeScale, id } = this.props;\n\n    return new IconLayer(\n      this.getSubLayerProps({\n        id,\n        data,\n        iconAtlas,\n        iconMapping,\n        sizeScale,\n        getPosition: (d: any) => d.geometry.coordinates,\n        getIcon: (d: any) => getIconName(d.properties.cluster ? d.properties.point_count : 1),\n        getSize: (d: any) => getIconSize(d.properties.cluster ? d.properties.point_count : 1)\n      })\n    );\n  }\n}\n","export interface Left<A> {\n  value: A;\n  tag: \"left\";\n}\n\nexport interface Right<B> {\n  value: B;\n  tag: \"right\";\n}\n\nexport type Either<A, B> = Left<A> | Right<B>;\n\nexport function isLeft<A>(val: Either<A, any>): val is Left<A> {\n  if ((val as Left<A>).tag === \"left\") {\n    return true;\n  }\n  return false;\n}\n\nexport function isRight<B>(val: Either<any, B>): val is Right<B> {\n  if ((val as Right<B>).tag === \"right\") {\n    return true;\n  }\n  return false;\n}\n\nexport function Left<A>(val: A): Left<A> {\n  return { value: val, tag: \"left\" };\n}\n\nexport function Right<B>(val: B): Right<B> {\n  return { value: val, tag: \"right\" };\n}\n\nexport type Predicate<N> = (val: N) => boolean;\n\nexport function predicateEither<A, B>(\n  value: B,\n  error: A,\n  predicate: Predicate<B>\n): Either<A, B> {\n  if (!predicate(value)) {\n    return Left(error);\n  }\n  return Right(value);\n}\n\nexport function firstLeft<A, B>(\n  val: B,\n  predicatePairs: [Predicate<B>, A][]\n): Either<A, B> {\n  for (let i = 0; i < predicatePairs.length; i++) {\n    const p = predicatePairs[i][0];\n    const e = predicatePairs[i][1];\n    if (!p(val)) {\n      return Left(e);\n    }\n  }\n  return Right(val);\n}\n","import { LayerProps, ServiceTypeColorMap } from \".\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { ScreenGridLayer } from \"@deck.gl/aggregation-layers\";\n// import { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport chroma from \"chroma-js\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport IconClusterLayer from \"../IconClusterLayer\";\nimport {\n  ServiceType,\n  MedicalServiceDataLayerMap,\n  MedicalServiceData,\n  ApiCode\n} from \"./ServiceMapSlice\";\nimport { Left, Right, Either } from \"../../lib/Either\";\n\nexport interface LayerTypeError {\n  msg: string;\n  layerType: LayerType;\n}\n\nconst WipLayerErrorMsg =\n  \"Tip de vizualizare in lucru, te rugam alege alt tip de vizualizare\";\nexport const getAggregateColorRange = () => [\n  chroma(\"#5A1846\").rgb(),\n  chroma(\"#900C3F\").rgb(),\n  chroma(\"#C70039\").rgb(),\n  chroma(\"#E3611C\").rgb(),\n  chroma(\"#F1920E\").rgb(),\n  chroma(\"#FFC300\").rgb()\n];\n\nexport const getLayers = (\n  data: Partial<MedicalServiceDataLayerMap>,\n  shownServices: ServiceType[],\n  props: LayerProps\n): Either<LayerTypeError, any[]> => {\n  const flatData = () =>\n    Object.values(data).reduce((acc, layer) => {\n      if (layer === undefined) {\n        return acc;\n      }\n\n      if (layer.status.code !== ApiCode.OK) {\n        return acc;\n      }\n\n      return [...acc, ...layer.data];\n    }, [] as MedicalServiceData[]);\n\n  switch (props.layerType) {\n    case LayerType.Heatmap:\n      return Right<any[]>([getHeatmap(flatData(), props)]);\n    case LayerType.Grid:\n      return Right<any[]>([getGrid(flatData(), props)]);\n    case LayerType.Extruded:\n      return Left<LayerTypeError>({\n        msg: WipLayerErrorMsg,\n        layerType: LayerType.Extruded\n      });\n    // return getExtruded(data, props);\n    case LayerType.Icon:\n      return Right<any[]>([getIcon(flatData(), props)]);\n    case LayerType.ScatterPlot:\n    default:\n      return Right<any[]>(\n        Object.keys(data)\n          .map(key => {\n            const serviceType = key as ServiceType;\n            const layer = data[serviceType];\n            if (layer === undefined) {\n              return null;\n            }\n\n            if (layer.status.code !== ApiCode.OK) {\n              return null;\n            }\n\n            const isVisible = shownServices.includes(serviceType);\n            return getScatterplot(layer.data, serviceType, isVisible, props);\n          })\n          .filter(layer => layer !== null)\n      );\n  }\n};\n\nconst getScatterplot = (\n  pointData: MedicalServiceData[],\n  serviceType: ServiceType,\n  isVisible: boolean,\n  props: LayerProps\n) => {\n  return new ScatterplotLayer({\n    id: `ScatterplotLayer-${serviceType}`,\n    data: pointData,\n    visible: isVisible,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: MedicalServiceData) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: MedicalServiceData) => {\n      return chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb();\n    },\n    getLineColor: [0, 0, 0, 100],\n    onHover: (d: { object: MedicalServiceData; x: number; y: number }) =>\n      props.onHover(d.object, { x: d.x, y: d.y }),\n    onClick: (d: { object: MedicalServiceData }) => props.onClick(d.object)\n  });\n};\n\nconst getIcon = (pointData: any, props: LayerProps) => {\n  return new IconClusterLayer({\n    id: \"IconLayer\",\n    data: pointData,\n    getPosition: (d: any) => [d.lng, d.lat],\n    iconMapping: \"data/location-icon-mapping.json\",\n    iconAtlas: \"data/location-icon-atlas.png\",\n    sizeScale: 30,\n    // getIcon: \"marker\",\n    pickable: true\n    // onHover: (d: any) => props.onHover(d.object),\n    // onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getHeatmap = (pointData: any, props: LayerProps) => {\n  return new HeatmapLayer({\n    id: \"HeatmapLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    opacity: 0.75,\n    getPosition: (d: any) => [d.lng, d.lat],\n    radiusPixels: 80,\n    intensity: 1\n  });\n};\n\nconst getGrid = (pointData: any, props: LayerProps) => {\n  return new ScreenGridLayer({\n    id: \"ScreenGridLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    cellSizePixels: 15,\n    aggregation: \"SUM\",\n    coverage: 0.9,\n    opacity: 0.7,\n    colorScaleType: \"quantile\",\n    getPosition: (d: any) => [d.lng, d.lat]\n  });\n};\n\n/* const getExtruded = (pointData: any, props: LayerProps) => {\n  const getTooltipData = (d: any) => ({\n    address: d.properties.mf_address,\n    email: d.properties.mf_email,\n    medicName: d.properties.mf_medicName,\n    phone: d.properties.mf_phone,\n    supplierName: d.properties.mf_supplierName,\n    type: ServiceType.FamilyMedicine\n  });\n\n  return new GeoJsonLayer({\n    id: \"GeoJsonLayer\",\n    data: pointData,\n    pickable: true,\n    extruded: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    opacity: 0.7,\n    getPolygon: (d: any) => ({\n      type: \"FeatureCollection\",\n      features: [d]\n    }),\n    getElevation: (d: any) => 15,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[ServiceType.FamilyMedicine]).rgb(),\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1\n    onHover: (d: { object: MedicalServiceData }) =>\n      d.object\n        ? props.onHover(getTooltipData(d.object))\n        : props.onHover(null as any),\n    onClick: (d: { object: MedicalServiceData }) =>\n      d.object\n        ? props.onClick(getTooltipData(d.object))\n        : props.onClick(null as any)\n  });\n};\n */\n","export const noOpFunction = () => {};\n","import React, { useEffect } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { getLayers } from \"./layers\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  updateViewState,\n  fetchMedicalServicesBuildingData,\n  ApiCode,\n  receiveMedicalServiceDataLayer,\n  setMedicalServiceDataLayerCode,\n  MedicalServiceDataLayer,\n  ServiceType,\n  MedicalServiceData\n} from \"./ServiceMapSlice\";\nimport { streamJSON } from \"../../api/API\";\nimport { noOpFunction } from \"../../lib/defaults\";\nimport { isLeft, isRight } from \"../../lib/Either\";\nimport {\n  Snackbar,\n  IconButton,\n  makeStyles,\n  Theme,\n  createStyles\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { amber } from \"@material-ui/core/colors\";\nimport clsx from \"clsx\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { ScreenCoordinates } from \"../../types/interfaces/ScreenCoordinates\";\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n};\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#e67e22\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n};\n\nexport const ServiceTypeBuildings: ServiceTypeIndexed<string | null> = {\n  [ServiceType.FamilyMedicine]: \"mf_buildings_with_attrs_epsg4326\",\n  [ServiceType.HomeCare]: null,\n  [ServiceType.Imaging]: null,\n  [ServiceType.Laboratory]: null\n};\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-x-ray\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n};\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#e67e22\"\n};\n\nexport interface LayerProps {\n  onHover: (service: MedicalServiceData, pos: ScreenCoordinates) => void;\n  onClick: (obj: MedicalServiceData) => void;\n  layerType: LayerType;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  })\n);\n\ninterface Props {\n  services: ServiceType[];\n}\n\nconst ServiceMap: React.FC<Props & LayerProps> = (\n  props: Props & LayerProps\n) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = (\n    _: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const dispatch = useDispatch();\n  const { viewState, medicalServices, geoJsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n\n  useEffect(() => {\n    setOpen(true);\n  }, [props.layerType]);\n\n  useEffect(() => {\n    if (geoJsonData.status.code !== ApiCode.Uninitialized) {\n      return;\n    }\n\n    if (props.layerType === LayerType.Extruded) {\n      const files = [\n        {\n          file: ServiceTypeBuildings[ServiceType.FamilyMedicine],\n          type: ServiceType.FamilyMedicine\n        }\n      ].filter(Boolean) as { file: string; type: ServiceType }[];\n\n      dispatch(fetchMedicalServicesBuildingData(files));\n    }\n  }, [props.layerType, geoJsonData.status.code, dispatch]);\n\n  useEffect(() => {\n    const onDone = (service: ServiceType, layer: MedicalServiceDataLayer) =>\n      dispatch(receiveMedicalServiceDataLayer({ service, layer }));\n    const onFail = (service: ServiceType, msg: string) =>\n      dispatch(\n        setMedicalServiceDataLayerCode({\n          service,\n          status: { code: ApiCode.Fail, msg: msg }\n        })\n      );\n\n    streamJSON(Object.values(ServiceType), onDone, noOpFunction, onFail);\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (props.layerType === LayerType.Extruded) {\n      dispatch(\n        updateViewState({\n          pitch: 45\n        })\n      );\n    } else {\n      dispatch(\n        updateViewState({\n          pitch: 0\n        })\n      );\n    }\n  }, [props.layerType, dispatch]);\n\n  if (!medicalServices[ServiceType.FamilyMedicine].data) {\n    return null;\n  }\n\n  const displayedData =\n    searchResults !== undefined ? searchResults : medicalServices;\n\n  /* displayedData = displayedData.filter(data => {\n    if (services.includes(data.type)) {\n      return true;\n    }\n    return false;\n  }); */\n\n  const layers = getLayers(\n    props.layerType !== LayerType.Extruded ? displayedData : {},\n    services,\n    props\n  );\n\n  let toast = null;\n  if (isLeft(layers)) {\n    toast = (\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        ContentProps={{\n          \"aria-describedby\": \"message-id\",\n          style: { background: amber[700] }\n        }}\n        message={\n          <span id=\"message-id\" className={classes.message}>\n            <InfoIcon className={clsx(classes.icon, classes.iconVariant)} />\n            {layers.value.msg}\n          </span>\n        }\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleClose}\n          >\n            <CloseIcon className={classes.icon} />\n          </IconButton>\n        ]}\n      />\n    );\n  }\n\n  return (\n    <>\n      {toast}\n      <DeckGL\n        initialViewState={viewState}\n        controller={true}\n        layers={isRight(layers) ? layers.value : []}\n      >\n        <StaticMap\n          key=\"static_map\"\n          width=\"100%\"\n          height=\"100%\"\n          mapStyle=\"mapbox://styles/claudiuc/ck4j3z14e09hg1dmkpijn2kma\"\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        />\n      </DeckGL>\n    </>\n  );\n};\n\nexport default ServiceMap;\n","import { withStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport { ServiceTypeColor } from \"../ServiceMap\";\n\nexport const CustomSwitch = (color?: ServiceTypeColor) => {\n  let switchColor = color || \"#34495e\";\n\n  return withStyles({\n    switchBase: {\n      color: \"#CCC\",\n      \"&$checked\": {\n        color: switchColor\n      },\n      \"&$checked + $track\": {\n        backgroundColor: switchColor\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n};\n","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n  makeStyles,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Typography\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { toggleServiceType } from \"./SwitchListItemSlice\";\n\nimport {\n  ServiceTypeColorMap,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\n\nimport { CustomSwitch } from \"../CustomSwitch\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { ServiceType, MedicalServiceData } from \"../ServiceMap/ServiceMapSlice\";\n\nconst useStyles = makeStyles(_ => ({\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  }\n}));\n\ninterface Props {\n  serviceType: ServiceType;\n}\n\nconst SwitchListItem: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { medicalServices } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const { serviceType } = props;\n\n  const handleToggle = (value: ServiceType) => () => {\n    dispatch(toggleServiceType(value));\n  };\n\n  const getCountFromDataArray = (\n    data: MedicalServiceData[],\n    service: ServiceType\n  ) => {\n    return data.reduce((acc, serviceData) => {\n      if (serviceData.type !== service) {\n        return acc;\n      }\n\n      return acc + 1;\n    }, 0);\n  };\n\n  const getCountForServiceType = (service: ServiceType) => {\n    const searchResultsCoerced = searchResults && searchResults[service];\n    const data = searchResultsCoerced\n      ? searchResultsCoerced.data\n      : medicalServices[service].data;\n    return getCountFromDataArray(data, service);\n  };\n\n  const ServiceSwitch =\n    layerType === LayerType.ScatterPlot\n      ? CustomSwitch(ServiceTypeColorMap[serviceType])\n      : CustomSwitch();\n\n  const isChecked =\n    services.indexOf(serviceType) !== -1 && layerType !== LayerType.Extruded;\n\n  return (\n    <ListItem classes={{ root: classes.listItemRoot }}>\n      <ListItemIcon>\n        <Icon\n          className={clsx(classes.serviceIcon, ServiceTypeIcons[serviceType])}\n        />\n      </ListItemIcon>\n      <ListItemText\n        id={ServiceTypeReadable[serviceType]}\n        primary={ServiceTypeReadable[serviceType]}\n        secondary={\n          <>\n            <Typography\n              variant=\"caption\"\n              component=\"span\"\n              style={{ color: isChecked ? \"inherit\" : \"#ccc\" }}\n            >\n              {getCountForServiceType(serviceType)} /\n            </Typography>\n            <Typography component=\"span\" variant=\"caption\">\n              {getCountFromDataArray(\n                medicalServices[serviceType].data,\n                serviceType\n              )}\n            </Typography>\n          </>\n        }\n      />\n      <ListItemSecondaryAction>\n        <ServiceSwitch\n          edge=\"end\"\n          disabled={layerType === LayerType.Extruded}\n          onChange={handleToggle(serviceType)}\n          checked={isChecked}\n          inputProps={{\n            \"aria-labelledby\": ServiceTypeReadable[serviceType]\n          }}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default SwitchListItem;\n","import React from \"react\";\nimport {\n  makeStyles,\n  fade,\n  InputBase,\n  IconButton,\n  Badge,\n  Icon,\n  Card,\n  CardContent,\n  List,\n  Typography\n} from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\n\nimport {\n  ServiceType,\n  MedicalServiceDataLayerMap\n} from \"../ServiceMap/ServiceMapSlice\";\nimport SwitchListItem from \"../SwitchListItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuery, performQuery } from \"./SearchGroupSlice\";\nimport { RootState } from \"../../store/rootReducer\";\nimport debounce from \"debounce\";\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: 325\n    }\n  },\n  filterOpen: {\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    maxHeight: 345\n  },\n  filterClose: {\n    maxHeight: 0,\n    overflowY: \"hidden\",\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  filterCard: {\n    width: 350,\n    right: 0,\n    position: \"absolute\",\n    paddingBottom: 0\n  },\n  filterCardContent: {\n    paddingBottom: 0\n  }\n}));\n\nconst SearchGroup: React.FC = () => {\n  const classes = useStyles();\n  const [isFilterOpen, setIsFilterOpen] = React.useState(false);\n\n  const dispatch = useDispatch();\n\n  const { medicalServices } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults, query } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n\n  const toggleFilters = () => {\n    setIsFilterOpen(!isFilterOpen);\n  };\n\n  const debouncedQuery = debounce(\n    (data: MedicalServiceDataLayerMap) => dispatch(performQuery(data)),\n    250\n  );\n  const handleChangeQuery = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (isFilterOpen) {\n      setIsFilterOpen(false);\n    }\n    dispatch(setQuery(ev.target.value));\n    debouncedQuery(medicalServices);\n  };\n\n  const handleSubmitQuery = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.keyCode === 13) {\n      debouncedQuery.clear();\n      dispatch(performQuery(medicalServices));\n    }\n  };\n\n  const resultCount =\n    searchResults &&\n    Object.values(searchResults)\n      .map(res => res && res.data.length)\n      .reduce((acc: number, count) => acc + Number(count), 0);\n\n  return (\n    <>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder=\"Cauta servicii medicale (ex: radiologie)\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput\n          }}\n          onChange={handleChangeQuery}\n          onKeyDown={handleSubmitQuery}\n          inputProps={{ \"aria-label\": \"search\" }}\n        />\n        <IconButton\n          aria-label=\"filtreaza\"\n          color=\"inherit\"\n          onClick={toggleFilters}\n        >\n          <Badge badgeContent={0} color=\"secondary\">\n            <Icon className=\"far fa-filter\" style={{ fontSize: 16 }} />\n          </Badge>\n        </IconButton>\n        <Card\n          className={clsx(classes.filterCard, {\n            [classes.filterOpen]: isFilterOpen,\n            [classes.filterClose]: !isFilterOpen\n          })}\n        >\n          <CardContent\n            classes={{ root: classes.filterCardContent }}\n            style={{ paddingBottom: 0 }}\n          >\n            <List dense={true}>\n              {Object.values(ServiceType).map(type => (\n                <SwitchListItem key={type} serviceType={type} />\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      </div>\n      {query.length > 3 && (\n        <Typography style={{ fontSize: 12, fontStyle: \"italic\", opacity: 0.7 }}>\n          {resultCount} rezultate pentru \"{query}\"\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default SearchGroup;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    top: 90,\n    left: 100,\n    position: \"absolute\",\n    zIndex: 2\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nconst Container: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { makeStyles, Card, CardContent, Typography } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { ComponentWithInheritedProps } from \"../../types/interfaces/CommonComponentProps\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: \"100%\"\n  }\n}));\n\nconst InfoCard: React.FC<ComponentWithInheritedProps> = props => {\n  const classes = useStyles();\n\n  return (\n    <Card className={clsx(classes.card, props.className)} style={props.style}>\n      <CardContent>\n        <Typography variant=\"h6\" component=\"p\" style={{ paddingBottom: 20 }}>\n          Aplicația{\" \"}\n          <a\n            href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            navigatorilor de pacienți oncologici\n          </a>{\" \"}\n          din România.\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Poți explora harta prin hover și click pe punctele afișate, și prin\n          selecția categoriilor de furnizori medicali pe care dorești să îi\n          afișezi. Datele sunt preluate pentru Municipiul București{\" \"}\n          <a\n            href=\"http://www.cnas.ro/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            de pe site-ul CNAS\n          </a>\n          .\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Adițional, pentru fiecare furnizor afișat,{\" \"}\n          <a\n            href=\"https://github.com/civicnet/cancer-atlas-scripts\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            am generat coordonatele GPS\n          </a>{\" \"}\n          pentru afișarea pe hartă.\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Codul sursă complet este disponibil pe{\" \"}\n          <a\n            href=\"https://github.com/civicnet/cancer-atlas\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n          .\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoCard;\n","import React from \"react\";\nimport { makeStyles, IconButton, Icon } from \"@material-ui/core\";\nimport Container from \"./Container\";\nimport InfoCard from \"../components/InfoCard\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  infoCard: {\n    width: 350,\n    paddingTop: 20\n  }\n}));\n\nconst About: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <IconButton\n        component={Link}\n        to=\"/cancer-atlas\"\n        style={{ position: \"absolute\", top: 4, right: 4, zIndex: 150 }}\n      >\n        <Icon className=\"far fa-times\" style={{ fontSize: 16 }} />\n      </IconButton>\n      <InfoCard className={classes.infoCard} style={{ paddingRight: 28 }} />\n    </Container>\n  );\n};\n\nexport default About;\n","import React, { useEffect } from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  Divider,\n  Icon,\n  IconButton\n} from \"@material-ui/core\";\nimport Container from \"./Container\";\nimport Octokit from \"@octokit/rest\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: 350,\n    height: \"85vh\",\n    overflowY: \"auto\",\n    paddingTop: 20\n  },\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: \"inline\"\n  }\n}));\n\ninterface Commit {\n  sha: string;\n  commit: {\n    message: string;\n    url: string;\n    author: {\n      date: string;\n    };\n  };\n  author: {\n    avatar_url: string;\n    login: string;\n    url: string;\n  };\n}\n\nconst octokit = new Octokit({\n  log: {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error\n  }\n});\n\nconst Changelog: React.FC = () => {\n  const classes = useStyles();\n  const [commits, setCommits] = React.useState();\n\n  useEffect(() => {\n    (async function _() {\n      const repsonse = await octokit.repos.listCommits({\n        owner: \"CivicNet\",\n        repo: \"cancer-atlas\",\n        per_page: 100\n      });\n      setCommits(repsonse ? repsonse.data : null);\n    })();\n  }, []);\n\n  if (!commits) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <IconButton\n        component={Link}\n        to=\"/cancer-atlas\"\n        style={{ position: \"absolute\", top: 4, right: 4, zIndex: 150 }}\n      >\n        <Icon className=\"far fa-times\" style={{ fontSize: 16 }} />\n      </IconButton>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"h6\">\n            Ultimele {commits.length} actualizari pe{\" \"}\n            <a\n              href=\"https://github.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </Typography>\n          <List className={classes.root} dense>\n            {commits.map((commit: Commit) => (\n              <React.Fragment key={commit.sha}>\n                <ListItem alignItems=\"flex-start\" disableGutters={true}>\n                  <ListItemAvatar>\n                    <Avatar\n                      alt={commit.author.login}\n                      src={commit.author.avatar_url}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={commit.author.login}\n                    secondary={\n                      <a\n                        href={commit.commit.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{\n                          textDecoration: \"none\",\n                          color: \"inherit\"\n                        }}\n                      >\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          color=\"textPrimary\"\n                        >\n                          {new Intl.DateTimeFormat(\"ro-RO\").format(\n                            new Date(commit.commit.author.date)\n                          )}\n                        </Typography>\n                        {` — ${commit.commit.message}`}\n                      </a>\n                    }\n                  />\n                </ListItem>\n                <Divider variant=\"inset\" component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Changelog;\n","import React from \"react\";\nimport { Icon } from \"@material-ui/core\";\nimport About from \"../containers/About\";\nimport Changelog from \"../containers/Changelog\";\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    main: () => null,\n    icon: <Icon className=\"fas fa-map-marker-alt\" />,\n    text: \"Atlas\"\n  },\n  {\n    path: \"/despre\",\n    main: () => <About />,\n    icon: <Icon className=\"fas fa-info-circle\" />,\n    text: \"Despre\"\n  },\n  {\n    path: \"/changelog\",\n    main: () => <Changelog />,\n    icon: <Icon className=\"fas fa-clipboard-list\" />,\n    text: \"Actualizari\"\n  }\n];\n\nexport default routes;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { ServiceTypeIcons, ServiceTypeReadable } from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ServiceType, MedicalServiceData } from \"../ServiceMap/ServiceMapSlice\";\nimport { ScreenCoordinates } from \"../../types/interfaces/ScreenCoordinates\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: MedicalServiceData;\n  pos?: ScreenCoordinates;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem disableGutters dense>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem disableGutters dense>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  let transformX = \"-50%\";\n  if (props.pos) {\n    if (props.pos.x < 220) {\n      transformX = \"0%\";\n    }\n\n    if (props.pos.x > window.innerWidth - 150) {\n      transformX = \"-100%\";\n    }\n  }\n\n  const transformY =\n    props.pos && props.pos.y < 350 ? \"20px\" : \"calc(-100% - 40px)\";\n\n  const posStyle = props.pos\n    ? {\n        position: \"absolute\" as any,\n        top: props.pos.y,\n        left: props.pos.x,\n        zIndex: 10,\n        width: 300,\n        transform: `translate(${transformX}, ${transformY})`\n      }\n    : {};\n\n  return (\n    <Card className={classes.card} style={{ ...props.style, ...posStyle }}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true} disablePadding={true}>\n          <ListItem disableGutters divider dense>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem disableGutters dense>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem disableGutters dense>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem disableGutters dense>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import React from \"react\";\n\nimport { /* makeStyles, */ Icon } from \"@material-ui/core\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { setLayerType, LayerType } from \"./LayerPickerSlice\";\nimport ScatterPlotTwoToneIcon from \"@material-ui/icons/ScatterPlotTwoTone\";\n\ninterface LayerTypeData {\n  title: string;\n  icon: string | JSX.Element;\n}\n\ntype LayerTypeList = {\n  [key in LayerType]: LayerTypeData;\n};\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst LayerPicker: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const handleChangeLayerType = (_: any, newLayerType: LayerType) => {\n    dispatch(setLayerType(newLayerType));\n  };\n\n  const layerTypePickerData: LayerTypeList = {\n    [LayerType.ScatterPlot]: {\n      icon: <ScatterPlotTwoToneIcon />,\n      title: \"Vezi furnizorii de servicii medicale ca puncte pe hartă\"\n    },\n    [LayerType.Icon]: {\n      icon: \"fad fa-map-marker-alt\",\n      title: \"Vezi furnizorii de servicii medicale agregati dupa densitate\"\n    },\n    [LayerType.Heatmap]: {\n      icon: \"fad fa-steak\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de heatmap\"\n    },\n    [LayerType.Grid]: {\n      icon: \"fad fa-th\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de grid\"\n    },\n    [LayerType.Extruded]: {\n      icon: \"fad fa-cube\",\n      title: \"Vezi clădirile în care au puncte de lucru medicii de familie\"\n    }\n  };\n\n  return (\n    <div\n      style={{ ...props.style, flex: 1, display: \"flex\" }}\n      className={props.className}\n    >\n      <ToggleButtonGroup\n        value={layerType}\n        exclusive={true}\n        onChange={handleChangeLayerType}\n        size=\"small\"\n        aria-label=\"text alignment\"\n        style={{ flexDirection: \"column\" }}\n      >\n        {Object.entries(layerTypePickerData).map(([key, data]) => (\n          <ToggleButton\n            key={key}\n            value={key}\n            aria-label={key}\n            title={data.title}\n          >\n            {typeof data.icon === \"string\" ? (\n              <Icon className={data.icon} style={{ width: \"unset\" }} />\n            ) : (\n              data.icon\n            )}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default LayerPicker;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { getAggregateColorRange } from \"../ServiceMap/layers\";\nimport chroma from \"chroma-js\";\nimport { Icon } from \"@material-ui/core\";\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst Legend: React.FC<Props> = props => {\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  return (\n    <div className={props.className} style={props.style}>\n      {(layerType === LayerType.Heatmap || layerType === LayerType.Grid) && (\n        <div style={{ flex: 1, display: \"flex\", border: \"2px solid #FFF\" }}>\n          {getAggregateColorRange().map((color, idx) => (\n            <div\n              key={`legend-${color}-${idx}`}\n              style={{\n                flex: 1,\n                backgroundColor: chroma(color).hex(),\n                display: \"flex\",\n                textAlign: \"center\"\n              }}\n            >\n              {idx === 0 && (\n                <Icon\n                  title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n                  className=\"fal fa-long-arrow-alt-down\"\n                  style={{ color: \"#fff\", alignSelf: \"center\" }}\n                />\n              )}\n              {idx === 5 && (\n                <Icon\n                  title=\"Zone cu număr mai mare de furnizori de servicii medicale\"\n                  className=\"fal fa-long-arrow-alt-up\"\n                  style={{ color: \"#333\", alignSelf: \"center\" }}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/rootReducer\";\nimport ServiceMap from \"../components/ServiceMap\";\nimport Tooltip from \"../components/Tooltip\";\nimport LayerPicker from \"../components/LayerPicker\";\nimport Legend from \"../components/Legend\";\nimport { MedicalServiceData } from \"../components/ServiceMap/ServiceMapSlice\";\nimport { ScreenCoordinates } from \"../types/interfaces/ScreenCoordinates\";\n\nconst useStyles = makeStyles(theme => ({\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 74,\n    right: 16,\n    // minWidth: 345,\n    maxWidth: 300\n  },\n  layerPicker: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n    marginTop: 20,\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    bottom: 20,\n    right: 20,\n    zIndex: 1\n  }\n}));\n\nconst Atlas: React.FC = () => {\n  const classes = useStyles();\n\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const onServiceHover = (\n    service: MedicalServiceData,\n    pos: ScreenCoordinates\n  ) => {\n    setTooltip({ service, pos });\n  };\n\n  const onServiceClick = (obj: MedicalServiceData) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  return (\n    <>\n      <LayerPicker className={classes.layerPicker} />\n      <Legend\n        style={{\n          position: \"absolute\",\n          left: 96,\n          bottom: 20,\n          zIndex: 1,\n          width: 150\n        }}\n      />\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n      </div>\n      {tooltip && (\n        <Tooltip\n          service={tooltip.service}\n          pos={tooltip.pos}\n          style={{ marginTop: 20 }}\n        />\n      )}\n      <ServiceMap\n        services={services}\n        onHover={onServiceHover}\n        onClick={onServiceClick}\n        layerType={layerType}\n      />\n    </>\n  );\n};\n\nexport default Atlas;\n","import React from \"react\";\n\nimport { loadCSS } from \"fg-loadcss\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  List,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Drawer,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme,\n  Badge,\n  Icon,\n  Popover,\n  Box,\n  Typography\n} from \"@material-ui/core\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport clsx from \"clsx\";\nimport Logo from \"./components/Logo\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport SearchGroup from \"./components/SearchGroup\";\nimport routes from \"./routes\";\n\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Atlas from \"./containers/Atlas\";\n\nconst drawerWidth = 240;\nexport const APP_BAR_COLOR = \"#222f3e\";\n\nconst useStyles = makeStyles(theme => ({\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    backgroundColor: APP_BAR_COLOR\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\"\n  },\n  drawerPaper: {\n    // backgroundColor: APP_BAR_COLOR\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1\n    }\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar\n  },\n  toolbarIcons: {\n    display: \"flex\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuItem: {\n    // color: \"#FFF\",\n    // fontWeight: \"bold\",\n    // opacity: 0.7\n  }\n}));\n\nconst App: React.FC<RouteComponentProps> = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setIsDrawerOpen(false);\n  };\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: isDrawerOpen\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: isDrawerOpen\n            })}\n          >\n            <MenuIcon style={{ color: \"#fff\" }} />\n          </IconButton>\n          <Logo />\n          <SearchGroup />\n          <div className={classes.grow} />\n          <div className={classes.toolbarIcons}>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n              {popupState => (\n                <>\n                  <IconButton\n                    aria-label=\"despre proiect\"\n                    color=\"inherit\"\n                    {...bindTrigger(popupState)}\n                  >\n                    <Badge badgeContent={0} color=\"secondary\">\n                      <Icon className=\"fas fa-question-circle\" />\n                    </Badge>\n                  </IconButton>\n                  <Popover\n                    {...bindPopover(popupState)}\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\"\n                    }}\n                    transformOrigin={{\n                      vertical: \"top\",\n                      horizontal: \"center\"\n                    }}\n                  >\n                    <Box p={2} style={{ maxWidth: 320 }}>\n                      <Typography variant=\"body1\">\n                        Un proiect{\" \"}\n                        <a\n                          href=\"https://civicnet.ro\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          CivicNet\n                        </a>{\" \"}\n                        și{\" \"}\n                        <a\n                          href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Asociația Sănătate pentru Comunitate\n                        </a>\n                        .\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Ne propunem să dezvoltăm{\" \"}\n                        <strong>\n                          prima aplicație dedicată pacienților de cancer\n                          pulmonar din România\n                        </strong>\n                        , navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Aplicația va conține informații importante despre\n                        traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de{\" \"}\n                        <a\n                          href=\"https://sanatateabuzoiana.ro/primul-ghid-al-supravietuitorului-de-cancer-localizat-la-nivelul-capului-si-gatului/#.XgDw6sYzZhE\"\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          ghiduri pentru pacienți.\n                        </a>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        În momentul de față, aplicația se află în stadiul de\n                        prototip interactiv. Ne puteți urmări pe Facebook pentru\n                        a fi la curent cu ultimele noutăți.\n                      </Typography>\n                    </Box>\n                  </Popover>\n                </>\n              )}\n            </PopupState>\n            <IconButton\n              aria-label=\"GitHub\"\n              color=\"inherit\"\n              href=\"https://github.com/civicnet/cancer-atlas/\"\n            >\n              <Badge badgeContent={0} color=\"secondary\">\n                <Icon className=\"fab fa-github\" />\n              </Badge>\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: isDrawerOpen,\n          [classes.drawerClose]: !isDrawerOpen\n        })}\n        classes={{\n          paper: clsx(classes.drawerPaper, {\n            [classes.drawerOpen]: isDrawerOpen,\n            [classes.drawerClose]: !isDrawerOpen\n          })\n        }}\n      >\n        <div className={classes.toolbar}>\n          <a\n            href=\"https://civicnet.ro\"\n            style={{ display: \"flex\", flex: 1, justifyContent: \"center\" }}\n          >\n            <img\n              src=\"CivicNet_Logo.svg\"\n              style={{ height: 32 }}\n              alt=\"CivicNet Logo\"\n            />\n          </a>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {routes.map(route => (\n            <ListItem\n              button\n              key={route.text}\n              component={Link}\n              to={route.path}\n              className={classes.menuItem}\n              selected={props.location.pathname === route.path}\n            >\n              <ListItemIcon\n                style={{ marginLeft: 12 }}\n                className={classes.menuItem}\n              >\n                {route.icon}\n              </ListItemIcon>\n              <ListItemText primary={route.text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main>\n        <Atlas />\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              children={<route.main />}\n            />\n          ))}\n        </Switch>\n      </main>\n    </>\n  );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}