{"version":3,"sources":["components/LayerPicker/LayerPickerSlice.ts","components/IconClusterLayer/index.tsx","components/ServiceMap/layers.ts","components/ServiceMap/index.tsx","api/API.ts","components/ServiceMap/ServiceMapSlice.ts","components/SwitchListItem/SwitchListItemSlice.ts","components/BrandingCard/BrandingCardSlice.ts","components/SearchGroup/SearchGroupSlice.ts","store/rootReducer.ts","store/store.ts","components/Logo/index.tsx","components/CustomSwitch/index.tsx","components/SwitchListItem/index.tsx","components/SearchGroup/index.tsx","components/Tooltip/index.tsx","containers/Container.tsx","components/LayerPicker/index.tsx","components/Legend/index.tsx","containers/Atlas.tsx","components/BrandingCard/index.tsx","containers/About.tsx","routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayerType","initialState","layerType","ScatterPlot","layerPickerSlice","createSlice","name","reducers","setLayerType","state","action","payload","actions","IconClusterLayer","props","changeFlags","somethingChanged","oldProps","rebuildIndex","dataChanged","sizeScale","index","Supercluster","maxZoom","radius","load","data","map","d","geometry","coordinates","getPosition","properties","this","setState","z","Math","floor","context","viewport","zoom","getClusters","info","mode","pickedObject","object","cluster","objects","getLeaves","cluster_id","f","iconAtlas","iconMapping","id","IconLayer","getSubLayerProps","getIcon","size","point_count","getSize","min","CompositeLayer","layerName","ServiceType","getAggregateColorRange","chroma","rgb","getScatterplot","pointData","ScatterplotLayer","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","lng","lat","getRadius","getFillColor","ServiceTypeColorMap","type","getLineColor","onHover","onClick","getHeatmap","HeatmapLayer","colorRange","radiusPixels","intensity","getGrid","ScreenGridLayer","cellSizePixels","aggregation","coverage","colorScaleType","getExtruded","getTooltipData","address","mf_address","email","mf_email","medicName","mf_medicName","phone","mf_phone","supplierName","mf_supplierName","FamilyMedicine","GeoJsonLayer","extruded","wireframe","getPolygon","features","getElevation","getLineWidth","fetchJSON","files","cb","a","async","responses","file","fetch","then","response","json","service","Promise","all","results","allServices","concat","apply","fetchGeoJSON","viewState","width","window","innerWidth","height","innerHeight","longitude","latitude","minZoom","bearing","pitch","jsonData","status","code","geoJsonData","serviceMapSlice","updateViewState","receiveMedicalServicesDataSuccess","receiveMedicalServicesDataFailed","msg","receiveMedicalServicesGeoJsonDataSuccess","receiveMedicalServicesGeoJsonDataFailed","ServiceTypeReadable","HomeCare","Imaging","Laboratory","ServiceTypeBuildings","ServiceTypeIcons","ServiceMap","dispatch","useDispatch","useSelector","serviceMapReducer","searchResults","searchGroupReducer","services","switchListItemReducer","useEffect","Extruded","filter","Boolean","toString","fetchMedicalServicesBuildingData","fetchMedicalServicesData","Object","values","displayedData","length","includes","layer","Heatmap","Grid","Icon","getLayer","initialViewState","controller","layers","key","mapStyle","mapboxApiAccessToken","process","switchListItemSlice","toggleServiceType","currentIndex","indexOf","newChecked","push","splice","brandingCardSlice","expanded","toggleBrandingCardExpansion","filteredFields","searchGroupSlice","query","setQuery","performQuery","searchOptions","threshold","location","distance","tokenize","maxPatternLength","keys","fuse","Fuse","search","rootReducer","combineReducers","layerPickerReducer","brandingCardReducer","store","configureStore","reducer","useStyles","makeStyles","theme","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","fontSize","lineHeight","textTransform","position","paddingRight","paddingLeft","zIndex","textShadow","reduce","acc","APP_BAR_COLOR","substr","brandingSymbol","marginRight","display","right","top","border","backgroundClip","content","bottom","left","margin","beta","fontFamily","Logo","classes","style","className","clsx","verticalAlign","Typography","variant","component","CustomSwitch","color","switchColor","withStyles","switchBase","backgroundColor","checked","track","Switch","_","serviceIcon","textAlign","listItemRoot","SwitchListItem","value","serviceType","getCountFromDataArray","serviceData","ServiceSwitch","ListItem","root","ListItemIcon","ListItemText","primary","secondary","getCountForServiceType","ListItemSecondaryAction","edge","disabled","onChange","inputProps","borderRadius","shape","fade","palette","common","white","spacing","marginLeft","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","filterOpen","easing","sharp","duration","enteringScreen","maxHeight","filterClose","overflowY","leavingScreen","filterCard","paddingBottom","filterCardContent","SearchGroup","React","useState","isFilterOpen","setIsFilterOpen","debouncedQuery","debounce","InputBase","placeholder","input","ev","target","onKeyDown","keyCode","clear","IconButton","aria-label","Badge","badgeContent","Card","CardContent","List","dense","card","title","icon","Tooltip","differentiator","specialty","gutterBottom","CardActions","onClose","paddingTop","Container","children","LayerPicker","layerTypePickerData","flex","ToggleButtonGroup","exclusive","newLayerType","flexDirection","entries","ToggleButton","Legend","idx","hex","alignSelf","tooltipContainer","minWidth","maxWidth","layerPicker","marginTop","Atlas","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","obj","expand","transform","shortest","expandOpen","BrandingCard","href","rel","aria-expanded","Collapse","in","timeout","unmountOnExit","brandingCard","About","routes","path","exact","main","text","bullet","pos","marginBottom","popover","paper","appBar","drawer","appBarShift","menuButton","hide","flexShrink","whiteSpace","drawerPaper","drawerOpen","drawerClose","overflowX","toolbar","mixins","toolbarIcons","grow","flexGrow","menuItem","App","useTheme","isDrawerOpen","setIsDrawerOpen","loadCSS","document","querySelector","CssBaseline","AppBar","Toolbar","popupId","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","Drawer","direction","Divider","route","button","Link","to","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAEYA,E,2JAAAA,K,0BAAAA,E,YAAAA,E,kBAAAA,E,YAAAA,E,qBAAAA,M,KAYZ,IAAIC,EAAoC,CACtCC,UAAWF,EAAUG,aAGjBC,EAAmBC,YAAY,CACnCC,KAAM,cACNL,eACAM,SAAU,CACRC,aADQ,SACKC,EAAOC,GACdD,EAAMP,YAAcQ,EAAOC,UAC7BF,EAAMP,UAAYQ,EAAOC,aAO/BH,EACEJ,EAAiBQ,QADnBJ,aAGaJ,IAAf,Q,4ECbqBS,E,YAInB,WAAYC,GAAa,qEACjBA,I,kFAIN,OADuD,EAArCC,YACCC,mB,qCAG2E,IAAlFF,EAAiF,EAAjFA,MAAOG,EAA0E,EAA1EA,SACbC,EADuF,EAAhEH,YACII,aAAeL,EAAMM,YAAcH,EAASG,UAE7E,GAAIF,EAAc,CAChB,IAAMG,EAAQ,IAAIC,IAAa,CAAEC,QAAS,GAAIC,OAAQV,EAAMM,YAC5DC,EAAMI,KACJX,EAAMY,KAAKC,KAAI,SAACC,GAAD,MAAa,CAC1BC,SAAU,CAAEC,YAAahB,EAAMiB,YAAYH,IAC3CI,WAAYJ,OAGhBK,KAAKC,SAAS,CAAEb,UAGlB,IAAMc,EAAIC,KAAKC,MAAMJ,KAAKK,QAAQC,SAASC,OACvCtB,GAAgBiB,IAAMF,KAAKxB,MAAM0B,IACnCF,KAAKC,SAAS,CACZR,KAAMO,KAAKxB,MAAMY,MAAMoB,YAAY,EAAE,KAAM,GAAI,IAAK,IAAKN,GACzDA,Q,wCAKoD,IAAzCO,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,KACfC,EAAeF,EAAKG,QAAUH,EAAKG,OAAOb,WAShD,OARIY,IACEA,EAAaE,SAAoB,UAATH,IAC1BD,EAAKK,QAAUd,KAAKxB,MAAMY,MACvB2B,UAAUJ,EAAaK,WAAY,IACnCtB,KAAI,SAACuB,GAAD,OAAYA,EAAElB,eAEvBU,EAAKG,OAASD,GAETF,I,qCAGO,IACNhB,EAASO,KAAKxB,MAAdiB,KADK,EAEqCO,KAAKnB,MAA/CqC,EAFK,EAELA,UAAWC,EAFN,EAEMA,YAAahC,EAFnB,EAEmBA,UAAWiC,EAF9B,EAE8BA,GAE3C,OAAO,IAAIC,IACTrB,KAAKsB,iBAAiB,CACpBF,KACA3B,OACAyB,YACAC,cACAhC,YACAW,YAAa,SAACH,GAAD,OAAYA,EAAEC,SAASC,aACpC0B,QAAS,SAAC5B,GAAD,OA5EF,KADM6B,EA6EoB7B,EAAEI,WAAWc,QAAUlB,EAAEI,WAAW0B,YAAc,GA3EhF,GAELD,EAAO,GACH,UAAN,OAAiBA,GAEfA,EAAO,IACH,UAAN,OAAiBrB,KAAKC,MAAMoB,EAAO,IAAnC,KAEK,aAVT,IAAqBA,GA8EbE,QAAS,SAAC/B,GAAD,OAjEI6B,EAiEoB7B,EAAEI,WAAWc,QAAUlB,EAAEI,WAAW0B,YAAc,EAhElFtB,KAAKwB,IAAI,IAAKH,GAAQ,IAAM,EADrC,IAAqBA,U,GAIyBI,KAAzBhD,EACZiD,UAAY,SCXd,I,QCGKC,EDHCC,EAAyB,iBAAM,CAC1CC,IAAO,WAAWC,MAClBD,IAAO,WAAWC,MAClBD,IAAO,WAAWC,MAClBD,IAAO,WAAWC,MAClBD,IAAO,WAAWC,MAClBD,IAAO,WAAWC,QAoBdC,EAAiB,SAACC,EAAgBtD,GACtC,OAAO,IAAIuD,IAAiB,CAC1BhB,GAAI,mBACJ3B,KAAM0C,EACNE,UAAU,EACVC,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,YAAa,GACbC,gBAAiB,EACjBC,gBAAiB,GACjBC,mBAAoB,EACpB9C,YAAa,SAACH,GAAD,MAAY,CAACA,EAAEkD,IAAKlD,EAAEmD,MACnCC,UAAW,GACXC,aAAc,SAACrD,GAAD,OACZqC,IAAOiB,GAAoBtD,EAAEuD,OAAsBjB,OACrDkB,aAAc,CAAC,EAAG,EAAG,EAAG,KACxBC,QAAS,SAACzD,GAAD,OAAYd,EAAMuE,QAAQzD,EAAEiB,SACrCyC,QAAS,SAAC1D,GAAD,OAAYd,EAAMwE,QAAQ1D,EAAEiB,YAInCW,EAAU,SAACY,EAAgBtD,GAC/B,OAAO,IAAID,EAAiB,CAC1BwC,GAAI,YACJ3B,KAAM0C,EACNrC,YAAa,SAACH,GAAD,MAAY,CAACA,EAAEkD,IAAKlD,EAAEmD,MACnC3B,YAAa,kCACbD,UAAW,+BACX/B,UAAW,GAEXkD,UAAU,KAMRiB,EAAa,SAACnB,EAAgBtD,GAClC,OAAO,IAAI0E,IAAa,CACtBnC,GAAI,eACJ3B,KAAM0C,EACNqB,WAAYzB,IACZO,QAAS,IACTxC,YAAa,SAACH,GAAD,MAAY,CAACA,EAAEkD,IAAKlD,EAAEmD,MACnCW,aAAc,GACdC,UAAW,KAITC,EAAU,SAACxB,EAAgBtD,GAC/B,OAAO,IAAI+E,IAAgB,CACzBxC,GAAI,kBACJ3B,KAAM0C,EACNqB,WAAYzB,IACZ8B,eAAgB,GAChBC,YAAa,MACbC,SAAU,GACVzB,QAAS,GACT0B,eAAgB,WAChBlE,YAAa,SAACH,GAAD,MAAY,CAACA,EAAEkD,IAAKlD,EAAEmD,SAIjCmB,EAAc,SAAC9B,EAAgBtD,GACnC,IAAMqF,EAAiB,SAACvE,GAAD,MAAa,CAClCwE,QAASxE,EAAEI,WAAWqE,WACtBC,MAAO1E,EAAEI,WAAWuE,SACpBC,UAAW5E,EAAEI,WAAWyE,aACxBC,MAAO9E,EAAEI,WAAW2E,SACpBC,aAAchF,EAAEI,WAAW6E,gBAC3B1B,KAAMpB,EAAY+C,iBAGpB,OAAO,IAAIC,IAAa,CACtB1D,GAAI,eACJ3B,KAAM0C,EACNE,UAAU,EACV0C,UAAU,EACVxC,SAAS,EACTC,QAAQ,EACRwC,WAAW,EACXpC,mBAAoB,EACpBN,QAAS,GACT2C,WAAY,SAACtF,GAAD,MAAa,CACvBuD,KAAM,oBACNgC,SAAU,CAACvF,KAEbwF,aAAc,SAACxF,GAAD,OAAY,IAC1BqD,aAAc,SAACrD,GAAD,OACZqC,IAAOiB,GAAoBnB,EAAY+C,iBAAiB5C,OAC1DkB,aAAc,CAAC,GAAI,GAAI,IACvBiC,aAAc,EACdhC,QAAS,SAACzD,GAAD,OACPA,EAAEiB,OACE/B,EAAMuE,QAAQc,EAAevE,EAAEiB,SAC/B/B,EAAMuE,QAAQ,OACpBC,QAAS,SAAC1D,GAAD,OACPA,EAAEiB,OACE/B,EAAMwE,QAAQa,EAAevE,EAAEiB,SAC/B/B,EAAMwE,QAAQ,U,2BEnIXgC,EAAY,SACvBC,EACAC,GAFuB,eAAAC,EAAAC,OAAA,gDAIV,OACPC,EAAYJ,EAAM5F,KAAI,SAAAiG,GAAI,OAC9BC,MAAM,6DAAD,OATO,QASP,iBAFM,OAEN,qBAC2FD,EAD3F,YAFM,SAKRE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,OAAOA,EAAKrG,KAAI,SAACsG,GACf,OAAO,eACFA,EADL,CAEE9C,KAAMyC,aAMhBM,QAAQC,IAAIR,GAAWG,MAAK,SAAAM,GAC1B,IAAMC,EAAc,GAAGC,OAAOC,MAAM,GAAIH,GACxCZ,EAAGa,MAtBkB,sCA0BZG,EAAe,SAC1BjB,EACAC,GAF0B,eAAAC,EAAAC,OAAA,gDAIb,UACPC,EAAYJ,EAAM5F,KAAI,gBAAGiG,EAAH,EAAGA,KAAH,OAC1BC,MAAM,6DAAD,OAnCO,QAmCP,iBAFM,UAEN,YACkFD,EADlF,YAFM,YAKRE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,OAAOA,EAAKb,SAASxF,KAAI,SAACsG,GACxB,OAAO,eACFA,EADL,CAEE9C,KAAMyC,aAMhBM,QAAQC,IAAIR,GAAWG,MAAK,SAAAM,GAC1B,IAAMC,EAAc,GAAGC,OAAOC,MAAM,GAAIH,GACxCZ,EAAGa,MAtBqB,sCC4BxBpI,EAAoC,CACtCwI,UAAW,CACTC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,UAAW,WACXC,SAAU,WACVxG,KAAM,EACNjB,QAAS,GACT0H,QAAS,EACTC,QAAS,EACTC,MAAO,GAETC,SAAU,CACR1H,KAAM,GACN2H,OAAQ,CACNC,KAAM,kBAGVC,YAAa,CACX7H,KAAM,GACN2H,OAAQ,CACNC,KAAM,mBAKNE,EAAkBnJ,YAAY,CAClCC,KAAM,cACNL,eACAM,SAAU,CACRkJ,gBADQ,SACQhJ,EAAOC,GACrBD,EAAMgI,UAAN,eACKhI,EAAMgI,UADX,GAEK/H,EAAOC,UAGd+I,kCAPQ,SAO0BjJ,EAAOC,GACvCD,EAAM2I,SAAS1H,KAAOhB,EAAOC,QAC7BF,EAAM2I,SAASC,OAAS,CACtBC,KAAM,OAGVK,iCAbQ,SAayBlJ,EAAOC,GACtCD,EAAM2I,SAASC,OAAS,CACtBC,KAAM,OACNM,IAAKlJ,EAAOC,UAGhBkJ,yCAnBQ,SAoBNpJ,EACAC,GAEAD,EAAM8I,YAAY7H,KAAOhB,EAAOC,QAChCF,EAAM8I,YAAYF,OAAS,CACzBC,KAAM,OAGVQ,wCA5BQ,SA6BNrJ,EACAC,GAEAD,EAAM8I,YAAYF,OAAS,CACzBC,KAAM,OACNM,IAAKlJ,EAAOC,a,EAYhB6I,EAAgB5I,QALlB6I,E,EAAAA,gBACAC,G,EAAAA,kCACAC,G,EAAAA,iCACAE,G,EAAAA,yCACAC,G,EAAAA,wCAGaN,KAAf,S,SF1HYzF,K,iCAAAA,E,0BAAAA,E,qBAAAA,E,mBAAAA,M,KAaL,IAAMgG,IAA+C,mBACzDhG,EAAY+C,eAAiB,qBAD4B,cAEzD/C,EAAYiG,SAAW,6BAFkC,cAGzDjG,EAAYkG,QAAU,+BAHmC,cAIzDlG,EAAYmG,WAAa,+BAJgC,GAO/CC,IAAuD,mBACjEpG,EAAY+C,eAAiB,oCADoC,cAEjE/C,EAAYiG,SAAW,MAF0C,cAGjEjG,EAAYkG,QAAU,MAH2C,cAIjElG,EAAYmG,WAAa,MAJwC,GAOvDE,IAA4C,mBACtDrG,EAAY+C,eAAiB,kBADyB,cAEtD/C,EAAYiG,SAAW,qBAF+B,cAGtDjG,EAAYkG,QAAU,gBAHgC,cAItDlG,EAAYmG,WAAa,gBAJ6B,GAO5ChF,IAAyD,mBACnEnB,EAAY+C,eAAiB,WADsC,cAEnE/C,EAAYiG,SAAW,WAF4C,cAGnEjG,EAAYkG,QAAU,WAH6C,cAInElG,EAAYmG,WAAa,WAJ0C,GAsGvDG,GAhFkC,SAC/CvJ,GAEA,IAAMwJ,EAAWC,cADd,EAE0CC,aAC3C,SAAC/J,GAAD,OAAsBA,EAAMgK,qBADtBhC,EAFL,EAEKA,UAAWW,EAFhB,EAEgBA,SAAUG,EAF1B,EAE0BA,YAGrBmB,EAAkBF,aACxB,SAAC/J,GAAD,OAAsBA,EAAMkK,sBADtBD,cAGAE,EAAaJ,aACnB,SAAC/J,GAAD,OAAsBA,EAAMoK,yBADtBD,SAyCR,GArCAE,qBAAU,WACR,GAAgC,kBAA5BvB,EAAYF,OAAOC,MAInBxI,EAAMZ,YAAcF,EAAU+K,SAAU,CAC1C,IAAMxD,EAAQ,CACZ,CACEK,KAAMuC,GAAqBpG,EAAY+C,gBACvC3B,KAAMpB,EAAY+C,iBAEpBkE,OAAOC,SAETX,EEqD0C,SAC9CM,GAD8C,OAEjC,SAAMN,GAAN,SAAA7C,EAAAC,OAAA,2EAAAD,EAAA,MAELe,EAAaoC,GAAU,SAAAlJ,GAC3B4I,EAAST,GAAyCnI,QAHzC,sDAMX4I,EAASR,GAAwC,KAAIoB,aAN1C,wDFvDAC,CAAiC5D,OAE3C,CAACzG,EAAMZ,UAAWqJ,EAAYF,OAAOC,KAAMgB,IAE9CQ,qBAAU,WACRR,EEoCoC,SACtCM,GADsC,OAEzB,SAAMN,GAAN,SAAA7C,EAAAC,OAAA,2EAAAD,EAAA,MAELH,EAAUsD,GAAU,SAAAlJ,GACxB4I,EAASZ,GAAkChI,QAHlC,sDAMX4I,EAASX,GAAiC,KAAIuB,aANnC,wDFtCFE,CAAyBC,OAAOC,OAAOvH,OAC/C,CAACuG,IAEJQ,qBAAU,WACJhK,EAAMZ,YAAcF,EAAU+K,SAChCT,EACEb,EAAgB,CACdN,MAAO,MAIXmB,EACEb,EAAgB,CACdN,MAAO,OAIZ,CAACrI,EAAMZ,UAAWoK,KAEhBlB,EAAS1H,KACZ,OAAO,KAGT,IAAI6J,EAAgBb,EAAcc,OAASd,EAAgBtB,EAAS1H,KACpE6J,EAAgBA,EAAcP,QAAO,SAAAtJ,GACnC,QAAIkJ,EAASa,SAAS/J,EAAKyD,SAK7B,IAAMuG,EDhHgB,SAAChK,EAAaZ,GACpC,OAAQA,EAAMZ,WACZ,KAAKF,EAAUG,YACb,OAAOgE,EAAezC,EAAMZ,GAC9B,KAAKd,EAAU2L,QACb,OAAOpG,EAAW7D,EAAMZ,GAC1B,KAAKd,EAAU4L,KACb,OAAOhG,EAAQlE,EAAMZ,GACvB,KAAKd,EAAU+K,SACb,OAAO7E,EAAYxE,EAAMZ,GAC3B,KAAKd,EAAU6L,KACb,OAAOrI,EAAQ9B,EAAMZ,GACvB,QACE,OAAOqD,EAAezC,EAAMZ,ICmGlBgL,CACZhL,EAAMZ,YAAcF,EAAU+K,SAAWQ,EAAgBhC,EAAY7H,KACrEZ,GAGF,OACE,kBAAC,IAAD,CAAQiL,iBAAkBtD,EAAWuD,YAAY,EAAMC,OAAQ,CAACP,IAC9D,kBAAC,IAAD,CACEQ,IAAI,aACJxD,MAAM,OACNG,OAAO,OACPsD,SAAS,qDACTC,qBAAsBC,iGGxI1BpM,GAAoC,CACtC2K,SAAU,CACR7G,EAAY+C,eACZ/C,EAAYiG,SACZjG,EAAYkG,QACZlG,EAAYmG,aAIVoC,GAAsBjM,YAAY,CACtCC,KAAM,iBACNL,gBACAM,SAAU,CACRgM,kBADQ,SACU9L,EAAOC,GACvB,IAAM8L,EAAe/L,EAAMmK,SAAS6B,QAAQ/L,EAAOC,SAC7C+L,EAAU,YAAOjM,EAAMmK,WAEP,IAAlB4B,EACFE,EAAWC,KAAKjM,EAAOC,SAEvB+L,EAAWE,OAAOJ,EAAc,GAGlC/L,EAAMmK,SAAW8B,MAMrBH,GACED,GAAoB1L,QADtB2L,kBAGaD,MAAf,QC9BMO,GAAoBxM,YAAY,CACpCC,KAAM,eACNL,aANsC,CACtC6M,UAAU,GAMVvM,SAAU,CACRwM,4BADQ,SACoBtM,GAC1BA,EAAMqM,UAAYrM,EAAMqM,aAM5BC,GACEF,GAAkBjM,QADpBmM,4BAGaF,MAAf,Q,qBCXMG,GAAiB,CACrB,UACA,aACA,QACA,YACA,QACA,eACA,aAGIC,GAAmB5M,YAAY,CACnCC,KAAM,cACNL,aAjBsC,CACtCiN,MAAO,GACPxC,cAAe,IAgBfnK,SAAU,CACR4M,SADQ,SACC1M,EAAOC,GACdD,EAAMyM,MAAQxM,EAAOC,SAGvByM,aALQ,SAKK3M,EAAOC,GAClB,GAAID,EAAMyM,MAAM1B,OAAS,EAGvB,OAFA/K,EAAMyM,MAAQ,QACdzM,EAAMiK,cAAgB,IAIxB,IAAM2C,EAAgB,CACpBC,UAAW,GACXC,SAAU,EACVC,SAAU,IACVC,UAAU,EACVC,iBAAkB,GAClBC,KAAMX,IAEFY,EAAO,IAAIC,KAAKnN,EAAOC,QAAS0M,GACtC5M,EAAMiK,cAAgBkD,EAAKE,OAAOrN,EAAMyM,OACxCzM,EAAMyM,MAAQ,O,GAKsBD,GAAiBrM,QAA5CuM,G,GAAAA,SAAUC,G,GAAAA,aAEVH,MAAf,QCtCec,GATKC,0BAAgB,CAClCnD,yBACAoD,qBACAC,uBACAzD,qBACAE,wBCIawD,GAZDC,YAAe,CAC3BC,QAASN,K,4QCDLO,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCC,aAAc,CACZC,WAAY,4CACZC,qBAAsB,OACtBC,oBAAqB,eAEvBC,SAAU,CACRC,WAAY,IACZC,SAAU,GACVC,WAAY,OACZC,cAAe,YACfC,SAAU,WACVC,aAAc,GACdC,YAAa,GACbC,OAAQ,EACRC,WAAY,CAAC,EAAG,EAAG,EAAG,GACnBC,QACC,SAACC,EAAKnM,GAAN,gBAAgBmM,EAAhB,qBACCnM,EADD,cACSA,EADT,gBACmBoM,GADnB,oBAEHpM,EAFG,cAEKA,EAFL,gBAEeoM,GAFf,oBAGHpM,EAHG,eAGMA,EAHN,gBAGgBoM,GAHhB,qBAICpM,EAJD,eAIUA,EAJV,gBAIoBoM,GAJpB,YAMA,IAEDC,OAAO,IAEZC,eAAgB,CACdC,YAAa,GACbb,SAAU,OACVG,SAAU,WACVW,QAAS,QACTC,MAAO,EACPC,IAAK,OACLC,OAAQ,wBACRtH,MAAO,OACP0G,YAAa,GACbvG,OAAQ,OACR6F,WAAYe,GACZQ,eAAgB,cAChBX,WAAY,OACZ,YAAa,CACXY,QAAS,MACThB,SAAU,WACVa,IAAK,EACLD,MAAO,EACPK,OAAQ,EACRC,KAAM,EACNf,QAAS,EACTgB,OAAQ,OACR3B,WAAW,kFAOf4B,KAAM,CACJC,WAAY,+BACZxB,SAAU,GACVE,cAAe,YACfK,WAAY,OACZJ,SAAU,WACVkB,KAAM,EACNf,OAAQ,IACRL,WAAY,OAoCDwB,GA3Be,SAAC1P,GAC7B,IAAM2P,EAAUnC,KAEhB,OACE,yBACEoC,MAAO5P,EAAM4P,MACbC,UAAWC,aAAKH,EAAQ5B,SAAU/N,EAAM6P,YAExC,yBAAKA,UAAWF,EAAQd,gBACtB,kBAAC9D,GAAA,EAAD,CACE8E,UAAWC,aAAKH,EAAQhC,aAAc,gBACtCiC,MAAO,CAAEhI,MAAO,QAASmI,cAAe,MAAO9B,SAAU,OAG7D,kBAAC+B,GAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,KACVN,MAAO5P,EAAM4P,MACbC,UAAWC,aAAKH,EAAQ5B,SAAU/N,EAAM6P,YAExC,yBAAKA,UAAWF,EAAQH,MAAxB,UANF,W,yFCxFOW,GAAe,SAACC,GACzB,IAAIC,EAAcD,GAAS,UAE3B,OAAOE,aAAW,CACdC,WAAY,CACRH,MAAOC,EACP,YAAa,CACTD,MAAOC,GAEX,qBAAsB,CAClBG,gBAAiBH,IAGzBI,QAAS,GACTC,MAAO,IAXJJ,CAYJK,OCMDnD,GAAYC,cAAW,SAAAmD,GAAC,MAAK,CACjCC,YAAa,CACXjJ,MAAO,GACPkJ,UAAW,UAEbC,aAAc,CACZzC,YAAa,OAoFF0C,GA5EyB,SAAAhR,GACtC,IAmBsBiR,EAnBhBtB,EAAUnC,KAEVhE,EAAWC,cAETK,EAAaJ,aACnB,SAAC/J,GAAD,OAAsBA,EAAMoK,yBADtBD,SAGAxB,EAAaoB,aACnB,SAAC/J,GAAD,OAAsBA,EAAMgK,qBADtBrB,SAGAsB,EAAkBF,aACxB,SAAC/J,GAAD,OAAsBA,EAAMkK,sBADtBD,cAGAxK,EAAcsK,aACpB,SAAC/J,GAAD,OAAsBA,EAAMwN,sBADtB/N,UAIA8R,EAAgBlR,EAAhBkR,YAMFC,EAAwB,SAACvQ,EAAauG,GAC1C,OAAOvG,EAAK6N,QAAO,SAACC,EAAK0C,GACvB,OAAIA,EAAY/M,OAAS8C,EAChBuH,EAGFA,EAAM,IACZ,IAQC2C,EACJjS,IAAcF,EAAUG,YACpB8Q,GAAa/L,GAAoB8M,IACjCf,KAEN,OACE,kBAACmB,GAAA,EAAD,CAAU3B,QAAS,CAAE4B,KAAM5B,EAAQoB,eACjC,kBAACS,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CACE8E,UAAWC,aAAKH,EAAQkB,YAAavH,GAAiB4H,OAG1D,kBAACO,GAAA,EAAD,CACElP,GAAI0G,GAAoBiI,GACxBQ,QAASzI,GAAoBiI,GAC7BS,UAAS,UApBgB,SAACxK,GAC9B,IAAMvG,EAAOgJ,EAAcc,OAASd,EAAgBtB,EAAS1H,KAC7D,OAAOuQ,EAAsBvQ,EAAMuG,GAkBjByK,CACZV,GADO,cAEFC,EAAsB7I,EAAS1H,KAAMsQ,MAE9C,kBAACW,GAAA,EAAD,KACE,kBAACR,EAAD,CACES,KAAK,MACLC,SAAU3S,IAAcF,EAAU+K,SAClC+H,UA1Ccf,EA0CSC,EA1Cc,WAC3C1H,EAASiC,GAAkBwF,MA0CrBR,SACqC,IAAnC3G,EAAS6B,QAAQuF,IACjB9R,IAAcF,EAAU+K,SAE1BgI,WAAY,CACV,kBAAmBhJ,GAAoBiI,S,0CCtF7C1D,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCV,OAAO,aACLoB,SAAU,WACV8D,aAAcxE,EAAMyE,MAAMD,aAC1B1B,gBAAiB4B,aAAK1E,EAAM2E,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACT/B,gBAAiB4B,aAAK1E,EAAM2E,QAAQC,OAAOC,MAAO,MAEpDzD,YAAapB,EAAM8E,QAAQ,GAC3BC,WAAY,EACZ7K,MAAO,QACN8F,EAAMgF,YAAYC,GAAG,MAAQ,CAC5BF,WAAY/E,EAAM8E,QAAQ,GAC1B5K,MAAO,SAGXgL,WAAY,CACVhL,MAAO8F,EAAM8E,QAAQ,GACrBzK,OAAQ,OACRqG,SAAU,WACVyE,cAAe,OACf9D,QAAS,OACT+D,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACT5C,MAAO,WAET6C,WAAW,aACTC,QAASxF,EAAM8E,QAAQ,EAAG,EAAG,EAAG,GAChCW,WAAYzF,EAAM0F,YAAYC,OAAO,SACrCzL,MAAO,QACN8F,EAAMgF,YAAYC,GAAG,MAAQ,CAC5B/K,MAAO,MAGX0L,WAAY,CACVH,WAAYzF,EAAM0F,YAAYC,OAAO,aAAc,CACjDE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASC,iBAEvCC,UAAW,KAEbC,YAAa,CACXD,UAAW,EACXE,UAAW,SACXV,WAAYzF,EAAM0F,YAAYC,OAAO,aAAc,CACjDE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASK,iBAGzCC,WAAY,CACVnM,MAAO,IACPoH,MAAO,EACPZ,SAAU,WACV4F,cAAe,GAEjBC,kBAAmB,CACjBD,cAAe,OAkFJE,GA9Ee,WAAO,IAAD,EAC5BvE,EAAUnC,KADkB,EAEM2G,IAAMC,UAAS,GAFrB,oBAE3BC,EAF2B,KAEbC,EAFa,KAI5B9K,EAAWC,cAETnB,EAAaoB,aACnB,SAAC/J,GAAD,OAAsBA,EAAMgK,qBADtBrB,SAQFiM,EAAiBC,MACrB,SAAC5T,GAAD,OAAgC4I,EAAS8C,GAAa1L,MACtD,KAiBF,OACE,yBAAKiP,UAAWF,EAAQ3C,QACtB,yBAAK6C,UAAWF,EAAQiD,YACtB,kBAAC,KAAD,OAEF,kBAAC6B,GAAA,EAAD,CACEC,YAAY,2CACZ/E,QAAS,CACP4B,KAAM5B,EAAQqD,UACd2B,MAAOhF,EAAQsD,YAEjBjB,SA1BoB,SAAC4C,GACrBP,GACFC,GAAgB,GAElB9K,EAAS6C,GAASuI,EAAGC,OAAO5D,QAC5BsD,EAAejM,EAAS1H,OAsBpBkU,UAnBoB,SAACF,GACN,KAAfA,EAAGG,UACLR,EAAeS,QACfxL,EAAS8C,GAAahE,EAAS1H,SAiB7BqR,WAAY,CAAE,aAAc,YAE9B,kBAACgD,GAAA,EAAD,CACEC,aAAW,YACX9E,MAAM,UACN5L,QAzCgB,WACpB8P,GAAiBD,KA0Cb,kBAACc,GAAA,EAAD,CAAOC,aAAc,EAAGhF,MAAM,aAC5B,kBAACrF,GAAA,EAAD,CAAM8E,UAAU,gBAAgBD,MAAO,CAAE3B,SAAU,QAGvD,kBAACoH,GAAA,EAAD,CACExF,UAAWC,aAAKH,EAAQoE,YAAT,mBACZpE,EAAQ2D,WAAae,GADT,cAEZ1E,EAAQiE,aAAeS,GAFX,KAKf,kBAACiB,GAAA,EAAD,CACE3F,QAAS,CAAE4B,KAAM5B,EAAQsE,mBACzBrE,MAAO,CAAEoE,cAAe,IAExB,kBAACuB,GAAA,EAAD,CAAMC,OAAO,GACVjL,OAAOC,OAAOvH,GAAapC,KAAI,SAAAwD,GAAI,OAClC,kBAAC,GAAD,CAAgB+G,IAAK/G,EAAM6M,YAAa7M,Y,UCjIhDmJ,GAAYC,aAAW,CAC3BgI,KAAM,CACJ7N,MAAO,QAET8N,MAAO,CACLzH,SAAU,IAEZ0H,KAAM,CACJ/N,MAAO,GACPkJ,UAAW,YAwGA8E,GA9FkB,SAAC5V,GAChC,IAAM2P,EAAUnC,KAEhB,IAAKxN,EAAMmH,QACT,OAAO,KAGT,IAAM0O,EACJ7V,EAAMmH,QAAQ9C,OAASpB,EAAY+C,eACjC,kBAACsL,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CAAM8E,UAAWC,aAAKH,EAAQgG,KAAM,4BAEtC,kBAAClE,GAAA,EAAD,CAAcC,QAAS1R,EAAMmH,QAAQrB,gBAGvC,kBAACwL,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CAAM8E,UAAWC,aAAKH,EAAQgG,KAAM,sBAEtC,kBAAClE,GAAA,EAAD,CAAcC,QAAS1R,EAAMmH,QAAQ2O,aAI3C,OACE,kBAACT,GAAA,EAAD,CAAMxF,UAAWF,EAAQ8F,KAAM7F,MAAO5P,EAAM4P,OAC1C,kBAAC0F,GAAA,EAAD,KACE,kBAACtF,GAAA,EAAD,CACEH,UAAWF,EAAQ+F,MACnBtF,MAAM,gBACN2F,cAAY,GAEX9M,GAAoBjJ,EAAMmH,QAAQ9C,OAErC,kBAACkR,GAAA,EAAD,CAAMC,OAAO,GACX,kBAAClE,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CACE8E,UAAWC,aACTH,EAAQgG,KACRrM,GAAiBtJ,EAAMmH,QAAQ9C,UAIrC,kBAACoN,GAAA,EAAD,CACEC,QACE1R,EAAMmH,QAAQ9C,OAASpB,EAAY+C,eAC/BhG,EAAMmH,QAAQzB,UACd1F,EAAMmH,QAAQ3H,QAIvBqW,EACD,kBAACvE,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CAAM8E,UAAWC,aAAKH,EAAQgG,KAAM,4BAEtC,kBAAClE,GAAA,EAAD,CAAcC,QAAS1R,EAAMmH,QAAQ7B,WAEtCtF,EAAMmH,QAAQ3B,OACb,kBAAC8L,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CAAM8E,UAAWC,aAAKH,EAAQgG,KAAM,sBAEtC,kBAAClE,GAAA,EAAD,CAAcC,QAAS1R,EAAMmH,QAAQ3B,SAGzC,kBAAC8L,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACzG,GAAA,EAAD,CAAM8E,UAAWC,aAAKH,EAAQgG,KAAM,mBAEtC,kBAAClE,GAAA,EAAD,CAAcC,QAAS1R,EAAMmH,QAAQvB,WAI3C,kBAACoQ,GAAA,EAAD,KACGhW,EAAMiW,SACL,kBAAChB,GAAA,EAAD,CACEtS,KAAK,QACLyN,MAAM,UACN5L,QAASxE,EAAMiW,QACfrG,MAAO,CAAE6C,WAAY,SAErB,kBAAC1H,GAAA,EAAD,CACE8E,UAAU,mBACVD,MAAO,CAAE3B,SAAU,GAAIrG,MAAO,eC5HtC4F,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrC6D,KAAM,CACJ2E,WAAY,GACZ5H,YAAa,IACbD,aAAcX,EAAM8E,QAAQ,QAoBjB2D,GAVoB,SAAAnW,GACjC,IAAM2P,EAAUnC,KAEhB,OACE,yBAAKqC,UAAWC,aAAKH,EAAQ4B,KAAMvR,EAAM6P,WAAYD,MAAO5P,EAAM4P,OAC/D5P,EAAMoW,W,yCCqEEC,GAnEsB,SAAArW,GAAU,IAAD,EACtCwJ,EAAWC,cACTrK,EAAcsK,aACpB,SAAC/J,GAAD,OAAsBA,EAAMwN,sBADtB/N,UAQFkX,GAAkC,mBACrCpX,EAAUG,YAAc,CACvBsW,KAAM,kBAAC,KAAD,MACND,MAAO,iEAH6B,cAKrCxW,EAAU6L,KAAO,CAChB4K,KAAM,wBACND,MAAO,iEAP6B,cASrCxW,EAAU2L,QAAU,CACnB8K,KAAM,eACND,MACE,sFAZkC,cAcrCxW,EAAU4L,KAAO,CAChB6K,KAAM,YACND,MACE,mFAjBkC,cAmBrCxW,EAAU+K,SAAW,CACpB0L,KAAM,cACND,MAAO,yEArB6B,GAyBxC,OACE,yBACE9F,MAAK,eAAO5P,EAAM4P,MAAb,CAAoB2G,KAAM,EAAGxH,QAAS,SAC3Cc,UAAW7P,EAAM6P,WAEjB,kBAAC2G,GAAA,EAAD,CACEvF,MAAO7R,EACPqX,WAAW,EACXzE,SArCwB,SAACpB,EAAQ8F,GACrClN,EAAS9J,EAAagX,KAqClB/T,KAAK,QACLuS,aAAW,iBACXtF,MAAO,CAAE+G,cAAe,WAEvBpM,OAAOqM,QAAQN,GAAqBzV,KAAI,oCAAEuK,EAAF,KAAOxK,EAAP,YACvC,kBAACiW,GAAA,EAAD,CACEzL,IAAKA,EACL6F,MAAO7F,EACP8J,aAAY9J,EACZsK,MAAO9U,EAAK8U,OAEU,kBAAd9U,EAAK+U,KACX,kBAAC5K,GAAA,EAAD,CAAM8E,UAAWjP,EAAK+U,KAAM/F,MAAO,CAAEhI,MAAO,WAE5ChH,EAAK+U,YC3BJmB,GAzCiB,SAAA9W,GAAU,IAChCZ,EAAcsK,aACpB,SAAC/J,GAAD,OAAsBA,EAAMwN,sBADtB/N,UAIR,OACE,yBAAKyQ,UAAW7P,EAAM6P,UAAWD,MAAO5P,EAAM4P,QAC1CxQ,IAAcF,EAAU2L,SAAWzL,IAAcF,EAAU4L,OAC3D,yBAAK8E,MAAO,CAAE2G,KAAM,EAAGxH,QAAS,OAAQG,OAAQ,mBAC7ChM,IAAyBrC,KAAI,SAACuP,EAAO2G,GAAR,OAC5B,yBACE3L,IAAG,iBAAYgF,EAAZ,YAAqB2G,GACxBnH,MAAO,CACL2G,KAAM,EACN/F,gBAAiBrN,IAAOiN,GAAO4G,MAC/BjI,QAAS,OACT+B,UAAW,WAGJ,IAARiG,GACC,kBAAChM,GAAA,EAAD,CACE2K,MAAM,+DACN7F,UAAU,6BACVD,MAAO,CAAEQ,MAAO,OAAQ6G,UAAW,YAG9B,IAARF,GACC,kBAAChM,GAAA,EAAD,CACE2K,MAAM,gEACN7F,UAAU,2BACVD,MAAO,CAAEQ,MAAO,OAAQ6G,UAAW,mBCnC/CzJ,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCwJ,iBAAkB,CAChB3I,OAAQ,GACRH,SAAU,WACVa,IAAK,GACLD,MAAO,GACPmI,SAAU,IACVC,SAAU,KAEZC,YAAa,CACXtI,QAAS,OACT4H,cAAe,SACfJ,KAAM,EACNe,UAAW,GACX9G,gBAAiB,cACjBpC,SAAU,WACViB,OAAQ,GACRL,MAAO,GACPT,OAAQ,OAuDGgJ,GAnDS,WACtB,IAAM5H,EAAUnC,KADY,EAGE2G,IAAMC,WAHR,oBAGrBoD,EAHqB,KAGZC,EAHY,OAIctD,IAAMC,WAJpB,oBAIrBsD,EAJqB,KAINC,EAJM,KAMpB7N,EAAaJ,aACnB,SAAC/J,GAAD,OAAsBA,EAAMoK,yBADtBD,SAGA1K,EAAcsK,aACpB,SAAC/J,GAAD,OAAsBA,EAAMwN,sBADtB/N,UAgBR,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAayQ,UAAWF,EAAQ0H,cAChC,kBAAC,GAAD,CACEzH,MAAO,CACLxB,SAAU,WACVkB,KAAM,GACND,OAAQ,GACRd,OAAQ,EACR3G,MAAO,OAGX,yBAAKiI,UAAWF,EAAQuH,kBACrB,kBAAC,GAAD,CAAS/P,QAASuQ,EAAezB,QAjBnB,WACnB0B,EAAiB,SAiBZ,kBAAC,GAAD,CAASxQ,QAASqQ,EAAS5H,MAAO,CAAE0H,UAAW,OAElD,kBAAC,GAAD,CACExN,SAAUA,EACVvF,QA9BiB,SAACqT,GACtBH,EAAWG,IA8BPpT,QA3BiB,SAACoT,GACtBD,EAAiBC,IA2BbxY,UAAWA,M,+BC1DboO,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrC+H,KAAM,CACJ7N,MAAO,QAETiQ,OAAQ,CACNC,UAAW,eACXrF,WAAY,kBACZU,WAAYzF,EAAM0F,YAAYC,OAAO,YAAa,CAChDI,SAAU/F,EAAM0F,YAAYK,SAASsE,YAGzCC,WAAY,CACVF,UAAW,sBAsFAG,GAlF6C,SAAAjY,GAC1D,IAAM2P,EAAUnC,KAEVhE,EAAWC,cACTuC,EAAatC,aACnB,SAAC/J,GAAD,OAAsBA,EAAMyN,uBADtBpB,SAQR,OACE,kBAACqJ,GAAA,EAAD,CAAMxF,UAAWC,aAAKH,EAAQ8F,KAAMzV,EAAM6P,WAAYD,MAAO5P,EAAM4P,OACjE,kBAAC0F,GAAA,EAAD,CAAa1F,MAAO,CAAEoE,cAAe,IACnC,kBAAChE,GAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KAAtC,uBACkB,IAChB,uBACEgI,KAAK,iJACLrD,OAAO,SACPsD,IAAI,uBAHN,6CAMK,IARP,oBAYF,kBAACnC,GAAA,EAAD,KACE,kBAACf,GAAA,EAAD,CACEpF,UAAWC,aAAKH,EAAQkI,OAAT,eACZlI,EAAQqI,WAAahM,IAExBxH,QAxBkB,WACxBgF,EAASyC,OAwBHmM,gBAAepM,EACfkJ,aAAW,aAEX,kBAAC,KAAD,QAGJ,kBAACmD,GAAA,EAAD,CAAUC,GAAItM,EAAUuM,QAAQ,OAAOC,eAAa,GAClD,kBAAClD,GAAA,EAAD,KACE,kBAACtF,GAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAIN,MAAO,CAAE0H,UAAW,IAA9D,kPAG4D,IAC1D,uBACEY,KAAK,sBACLrD,OAAO,SACPsD,IAAI,uBAHN,sBAJF,KAaA,kBAACnI,GAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAIN,MAAO,CAAE0H,UAAW,IAA9D,uDAC6C,IAC3C,uBACEY,KAAK,mDACLrD,OAAO,SACPsD,IAAI,uBAHN,+BAMK,IARP,uCAWA,kBAACnI,GAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,IAAIN,MAAO,CAAE0H,UAAW,IAA9D,8CACyC,IACvC,uBACEY,KAAK,2CACLrD,OAAO,SACPsD,IAAI,uBAHN,UAFF,SC/FJ3K,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrC+K,aAAc,CACZ7Q,MAAO,SAcI8Q,GAVS,WACtB,IAAM/I,EAAUnC,KAEhB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAcqC,UAAWF,EAAQ8I,iBCKxBE,GAhBA,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,KAAM,kBAAM,kBAAC,GAAD,OACZnD,KAAM,kBAAC5K,GAAA,EAAD,CAAM8E,UAAU,0BACtBkJ,KAAM,SAER,CACEH,KAAM,UACNE,KAAM,kBAAM,kBAAC,GAAD,OACZnD,KAAM,kBAAC5K,GAAA,EAAD,CAAM8E,UAAU,2BACtBkJ,KAAM,W,oBCoBGpK,GAAgB,UAEvBnB,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCsL,OAAQ,CACNjK,QAAS,eACTQ,OAAQ,QACRuI,UAAW,cAEbpC,MAAO,CACLzH,SAAU,IAEZgL,IAAK,CACHC,aAAc,IAEhBC,QAAS,CACPtG,cAAe,QAEjBuG,MAAO,CACLlG,QAASxF,EAAM8E,QAAQ,IAEzB6G,OAAQ,CACN9K,OAAQb,EAAMa,OAAO+K,OAAS,EAC9BnG,WAAYzF,EAAM0F,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASK,gBAEvCtD,gBAAiB7B,IAEnB4K,YAAa,CACX9G,WA9BgB,IA+BhB7K,MAAM,eAAD,OA/BW,IA+BX,OACLuL,WAAYzF,EAAM0F,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASC,kBAGzC8F,WAAY,CACV1K,YAAa,IAEf2K,KAAM,CACJ1K,QAAS,QAEXuK,OAAQ,CACN1R,MA5CgB,IA6ChB8R,WAAY,EACZC,WAAY,UAEdC,YAAa,GAGbC,WAAY,CACVjS,MApDgB,IAqDhBuL,WAAYzF,EAAM0F,YAAYC,OAAO,QAAS,CAC5CE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASC,kBAGzCoG,YAAY,aACV3G,WAAYzF,EAAM0F,YAAYC,OAAO,QAAS,CAC5CE,OAAQ7F,EAAM0F,YAAYG,OAAOC,MACjCC,SAAU/F,EAAM0F,YAAYK,SAASK,gBAEvCiG,UAAW,SACXnS,MAAO8F,EAAM8E,QAAQ,GAAK,GACzB9E,EAAMgF,YAAYC,GAAG,MAAQ,CAC5B/K,MAAO8F,EAAM8E,QAAQ,GAAK,IAG9BwH,QAAQ,aACNjL,QAAS,OACT+D,WAAY,SACZC,eAAgB,WAChBG,QAASxF,EAAM8E,QAAQ,EAAG,IACvB9E,EAAMuM,OAAOD,SAElBE,aAAc,CACZnL,QAAS,QAEXoL,KAAM,CACJC,SAAU,GAEZC,SAAU,OAiNGC,GA1MO,WAAO,IAAD,IACpB3K,EAAUnC,KACVE,EAAQ6M,eAFY,EAIcpG,IAAMC,UAAS,GAJ7B,oBAInBoG,EAJmB,KAILC,EAJK,KAqB1B,OAPAtG,IAAMnK,WAAU,WACd0Q,mBACE,2DACAC,SAASC,cAAc,wBAExB,IAGD,kBAAC,KAAD,KACE,kBAACC,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CACE1M,SAAS,QACTyB,UAAWC,aAAKH,EAAQ0J,OAAT,eACZ1J,EAAQ4J,YAAciB,KAGzB,kBAACO,GAAA,EAAD,KACE,kBAAC9F,GAAA,EAAD,CACE7E,MAAM,UACN8E,aAAW,cACX1Q,QA5Be,WACvBiW,GAAgB,IA4BR3I,KAAK,QACLjC,UAAWC,aAAKH,EAAQ6J,WAAT,eACZ7J,EAAQ8J,KAAOe,KAGlB,kBAAC,KAAD,CAAU5K,MAAO,CAAEQ,MAAO,WAE5B,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,yBAAKP,UAAWF,EAAQwK,OACxB,yBAAKtK,UAAWF,EAAQuK,cACtB,kBAAC,KAAD,CAAYjK,QAAQ,UAAU+K,QAAQ,uBACnC,SAAAC,GAAU,OACT,oCACE,kBAAChG,GAAA,EAAD,eACEC,aAAW,iBACX9E,MAAM,WACF8K,uBAAYD,IAEhB,kBAAC9F,GAAA,EAAD,CAAOC,aAAc,EAAGhF,MAAM,aAC5B,kBAACrF,GAAA,EAAD,CAAM8E,UAAU,6BAGpB,kBAACsL,GAAA,EAAD,iBACMC,uBAAYH,GADlB,CAEEI,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,YAGd,kBAACE,GAAA,EAAD,CAAKC,EAAG,EAAG9L,MAAO,CAAEwH,SAAU,MAC5B,kBAACpH,GAAA,EAAD,CAAYC,QAAQ,SAApB,aACa,IACX,uBACEiI,KAAK,sBACLrD,OAAO,SACPsD,IAAI,uBAHN,YAMK,IARP,UASK,IACH,uBACED,KAAK,oDACLrD,OAAO,SACPsD,IAAI,uBAHN,uDAVF,KAmBA,kBAACnI,GAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,IACVN,MAAO,CAAE0H,UAAW,IAHtB,qCAK2B,IACzB,yHANF,+DAYA,kBAACtH,GAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,IACVN,MAAO,CAAE0H,UAAW,IAHtB,wMAOkD,IAChD,uBACEY,KAAK,iIACLC,IAAI,sBACJtD,OAAO,UAHT,kCAQF,kBAAC7E,GAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,IACVN,MAAO,CAAE0H,UAAW,IAHtB,yMAcV,kBAACrC,GAAA,EAAD,CACEC,aAAW,SACX9E,MAAM,UACN8H,KAAK,6CAEL,kBAAC/C,GAAA,EAAD,CAAOC,aAAc,EAAGhF,MAAM,aAC5B,kBAACrF,GAAA,EAAD,CAAM8E,UAAU,uBAM1B,kBAAC8L,GAAA,EAAD,CACE1L,QAAQ,YACRJ,UAAWC,aAAKH,EAAQ2J,QAAT,mBACZ3J,EAAQkK,WAAaW,GADT,cAEZ7K,EAAQmK,aAAeU,GAFX,IAIf7K,QAAS,CACPyJ,MAAOtJ,aAAKH,EAAQiK,aAAT,mBACRjK,EAAQkK,WAAaW,GADb,cAER7K,EAAQmK,aAAeU,GAFf,MAMb,yBAAK3K,UAAWF,EAAQqK,SACtB,kBAAC/E,GAAA,EAAD,CAAYzQ,QAnJM,WACxBiW,GAAgB,KAmJa,QAApB/M,EAAMkO,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,QAIN,kBAACC,GAAA,EAAD,MACA,kBAACtG,GAAA,EAAD,KACGoD,GAAO9X,KAAI,SAAAib,GAAK,OACf,kBAACxK,GAAA,EAAD,CACEyK,QAAM,EACN3Q,IAAK0Q,EAAM/C,KACX7I,UAAW8L,KACXC,GAAIH,EAAMlD,KACV/I,UAAWF,EAAQ0K,UAEnB,kBAAC7I,GAAA,EAAD,CACE5B,MAAO,CAAE6C,WAAY,IACrB5C,UAAWF,EAAQ0K,UAElByB,EAAMnG,MAET,kBAAClE,GAAA,EAAD,CAAcC,QAASoK,EAAM/C,aAKrC,8BACE,kBAAC,KAAD,KACGJ,GAAO9X,KAAI,SAACib,EAAOvb,GAAR,OACV,kBAAC,KAAD,CACE6K,IAAK7K,EACLqY,KAAMkD,EAAMlD,KACZC,MAAOiD,EAAMjD,MACbzC,SAAU,kBAAC0F,EAAMhD,KAAP,eClTJ3O,QACW,cAA7BtC,OAAO4E,SAASyP,UAEe,UAA7BrU,OAAO4E,SAASyP,UAEhBrU,OAAO4E,SAASyP,SAASC,MACvB,2DCRNC,IAASC,OACL,kBAAC,IAAD,CAAUhP,MAAOA,IACb,kBAAC,GAAD,OAEJsN,SAAS2B,eAAe,SD6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzV,MAAK,SAAA0V,GACjCA,EAAaC,kB","file":"static/js/main.35a84dd8.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum LayerType {\n  ScatterPlot = 'ScatterPlot',\n  Icon = 'Icon',\n  Heatmap = 'Heatmap',\n  Grid = 'Grid',\n  Extruded = 'Extruded'\n}\n\ntype CurrentDisplayState = {\n  layerType: LayerType;\n}\n\nlet initialState: CurrentDisplayState = {\n  layerType: LayerType.ScatterPlot,\n}\n\nconst layerPickerSlice = createSlice({\n  name: 'layerPicker',\n  initialState,\n  reducers: {\n    setLayerType(state, action: PayloadAction<LayerType>) {\n      if (state.layerType !== action.payload) {\n        state.layerType = action.payload;\n      }\n    },\n  }\n});\n\nexport const {\n  setLayerType,\n} = layerPickerSlice.actions;\n\nexport default layerPickerSlice.reducer;\n","import { CompositeLayer } from '@deck.gl/core';\nimport { IconLayer } from '@deck.gl/layers';\nimport Supercluster from 'supercluster';\n\nfunction getIconName(size: number) {\n  if (size === 0) {\n    return '';\n  }\n  if (size < 10) {\n    return `marker-${size}`;\n  }\n  if (size < 100) {\n    return `marker-${Math.floor(size / 10)}0`;\n  }\n  return 'marker-100';\n}\n\nfunction getIconSize(size: number) {\n  return Math.min(100, size) / 100 + 1;\n}\n\nexport default class IconClusterLayer extends CompositeLayer {\n  static layerName = 'Foobar';\n\n  // eslint-disable-next-line\n  constructor(props: any) {\n    super(props);\n  }\n\n  shouldUpdateState({ changeFlags }: { changeFlags: any }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({ props, oldProps, changeFlags }: { props: any, oldProps: any, changeFlags: any }) {\n    const rebuildIndex = changeFlags.dataChanged || props.sizeScale !== oldProps.sizeScale;\n\n    if (rebuildIndex) {\n      const index = new Supercluster({ maxZoom: 16, radius: props.sizeScale });\n      index.load(\n        props.data.map((d: any) => ({\n          geometry: { coordinates: props.getPosition(d) },\n          properties: d\n        }))\n      );\n      this.setState({ index });\n    }\n\n    const z = Math.floor(this.context.viewport.zoom);\n    if (rebuildIndex || z !== this.state.z) {\n      this.setState({\n        data: this.state.index.getClusters([-180, -85, 180, 85], z),\n        z\n      });\n    }\n  }\n\n  getPickingInfo({ info, mode }: { info: any, mode: any }) {\n    const pickedObject = info.object && info.object.properties;\n    if (pickedObject) {\n      if (pickedObject.cluster && mode !== 'hover') {\n        info.objects = this.state.index\n          .getLeaves(pickedObject.cluster_id, 25)\n          .map((f: any) => f.properties);\n      }\n      info.object = pickedObject;\n    }\n    return info;\n  }\n\n  renderLayers() {\n    const { data } = this.state;\n    const { iconAtlas, iconMapping, sizeScale, id } = this.props;\n\n    return new IconLayer(\n      this.getSubLayerProps({\n        id,\n        data,\n        iconAtlas,\n        iconMapping,\n        sizeScale,\n        getPosition: (d: any) => d.geometry.coordinates,\n        getIcon: (d: any) => getIconName(d.properties.cluster ? d.properties.point_count : 1),\n        getSize: (d: any) => getIconSize(d.properties.cluster ? d.properties.point_count : 1)\n      })\n    );\n  }\n}\n","import { LayerProps, ServiceTypeColorMap, ServiceType } from \".\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { ScreenGridLayer } from \"@deck.gl/aggregation-layers\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport chroma from \"chroma-js\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport IconClusterLayer from \"../IconClusterLayer\";\n\nexport const getAggregateColorRange = () => [\n  chroma(\"#5A1846\").rgb(),\n  chroma(\"#900C3F\").rgb(),\n  chroma(\"#C70039\").rgb(),\n  chroma(\"#E3611C\").rgb(),\n  chroma(\"#F1920E\").rgb(),\n  chroma(\"#FFC300\").rgb()\n];\n\nexport const getLayer = (data: any[], props: LayerProps) => {\n  switch (props.layerType) {\n    case LayerType.ScatterPlot:\n      return getScatterplot(data, props);\n    case LayerType.Heatmap:\n      return getHeatmap(data, props);\n    case LayerType.Grid:\n      return getGrid(data, props);\n    case LayerType.Extruded:\n      return getExtruded(data, props);\n    case LayerType.Icon:\n      return getIcon(data, props);\n    default:\n      return getScatterplot(data, props);\n  }\n};\n\nconst getScatterplot = (pointData: any, props: LayerProps) => {\n  return new ScatterplotLayer({\n    id: \"ScatterplotLayer\",\n    data: pointData,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: any) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb(),\n    getLineColor: [0, 0, 0, 100],\n    onHover: (d: any) => props.onHover(d.object),\n    onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getIcon = (pointData: any, props: LayerProps) => {\n  return new IconClusterLayer({\n    id: \"IconLayer\",\n    data: pointData,\n    getPosition: (d: any) => [d.lng, d.lat],\n    iconMapping: \"data/location-icon-mapping.json\",\n    iconAtlas: \"data/location-icon-atlas.png\",\n    sizeScale: 30,\n    // getIcon: \"marker\",\n    pickable: true\n    // onHover: (d: any) => props.onHover(d.object),\n    // onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getHeatmap = (pointData: any, props: LayerProps) => {\n  return new HeatmapLayer({\n    id: \"HeatmapLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    opacity: 0.75,\n    getPosition: (d: any) => [d.lng, d.lat],\n    radiusPixels: 80,\n    intensity: 1\n  });\n};\n\nconst getGrid = (pointData: any, props: LayerProps) => {\n  return new ScreenGridLayer({\n    id: \"ScreenGridLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    cellSizePixels: 15,\n    aggregation: \"SUM\",\n    coverage: 0.9,\n    opacity: 0.7,\n    colorScaleType: \"quantile\",\n    getPosition: (d: any) => [d.lng, d.lat]\n  });\n};\n\nconst getExtruded = (pointData: any, props: LayerProps) => {\n  const getTooltipData = (d: any) => ({\n    address: d.properties.mf_address,\n    email: d.properties.mf_email,\n    medicName: d.properties.mf_medicName,\n    phone: d.properties.mf_phone,\n    supplierName: d.properties.mf_supplierName,\n    type: ServiceType.FamilyMedicine\n  });\n\n  return new GeoJsonLayer({\n    id: \"GeoJsonLayer\",\n    data: pointData,\n    pickable: true,\n    extruded: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    opacity: 0.7,\n    getPolygon: (d: any) => ({\n      type: \"FeatureCollection\",\n      features: [d]\n    }),\n    getElevation: (d: any) => 15,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[ServiceType.FamilyMedicine]).rgb(),\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1,\n    onHover: (d: any) =>\n      d.object\n        ? props.onHover(getTooltipData(d.object))\n        : props.onHover(null as any),\n    onClick: (d: any) =>\n      d.object\n        ? props.onClick(getTooltipData(d.object))\n        : props.onClick(null as any)\n  });\n};\n","import React, { useEffect } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { getLayer } from \"./layers\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  updateViewState,\n  fetchMedicalServicesData,\n  fetchMedicalServicesBuildingData\n} from \"./ServiceMapSlice\";\n\nexport enum ServiceType {\n  FamilyMedicine = \"family_medicine\",\n  Laboratory = \"laboratories\",\n  HomeCare = \"home_care\",\n  Imaging = \"imaging\"\n}\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n};\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#e67e22\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n};\n\nexport const ServiceTypeBuildings: ServiceTypeIndexed<string | null> = {\n  [ServiceType.FamilyMedicine]: \"mf_buildings_with_attrs_epsg4326\",\n  [ServiceType.HomeCare]: null,\n  [ServiceType.Imaging]: null,\n  [ServiceType.Laboratory]: null\n};\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-x-ray\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n};\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#e67e22\"\n};\n\nexport interface ServiceObject {\n  type: ServiceType;\n  [key: string]: string;\n}\n\nexport interface LayerProps {\n  onHover: (obj: ServiceObject) => void;\n  onClick: (obj: ServiceObject) => void;\n  layerType: LayerType;\n}\n\ninterface Props {\n  services: ServiceType[];\n}\n\nconst ServiceMap: React.FC<Props & LayerProps> = (\n  props: Props & LayerProps\n) => {\n  const dispatch = useDispatch();\n  const { viewState, jsonData, geoJsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n\n  useEffect(() => {\n    if (geoJsonData.status.code !== \"Uninitialized\") {\n      return;\n    }\n\n    if (props.layerType === LayerType.Extruded) {\n      const files = [\n        {\n          file: ServiceTypeBuildings[ServiceType.FamilyMedicine],\n          type: ServiceType.FamilyMedicine\n        }\n      ].filter(Boolean) as { file: string; type: ServiceType }[];\n\n      dispatch(fetchMedicalServicesBuildingData(files));\n    }\n  }, [props.layerType, geoJsonData.status.code, dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchMedicalServicesData(Object.values(ServiceType)));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (props.layerType === LayerType.Extruded) {\n      dispatch(\n        updateViewState({\n          pitch: 45\n        })\n      );\n    } else {\n      dispatch(\n        updateViewState({\n          pitch: 0\n        })\n      );\n    }\n  }, [props.layerType, dispatch]);\n\n  if (!jsonData.data) {\n    return null;\n  }\n\n  let displayedData = searchResults.length ? searchResults : jsonData.data;\n  displayedData = displayedData.filter(data => {\n    if (services.includes(data.type)) {\n      return true;\n    }\n    return false;\n  });\n  const layer = getLayer(\n    props.layerType !== LayerType.Extruded ? displayedData : geoJsonData.data,\n    props\n  );\n\n  return (\n    <DeckGL initialViewState={viewState} controller={true} layers={[layer]}>\n      <StaticMap\n        key=\"static_map\"\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/claudiuc/ck4j3z14e09hg1dmkpijn2kma\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      />\n    </DeckGL>\n  );\n};\n\nexport default ServiceMap;\n","import { ServiceType } from \"../components/ServiceMap\";\n\nconst VERSION = '0.2.4';\n\n// TODO: Unify these two\nexport const fetchJSON = async (\n  files: ServiceType[],\n  cb: (data: any) => void,\n) => {\n  const type = \"json\";\n  const responses = files.map(file =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/national/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n\nexport const fetchGeoJSON = async (\n  files: { file: string; type: ServiceType }[],\n  cb: (data: any) => void,\n) => {\n  const type = \"geojson\";\n  const responses = files.map(({ file }) =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.features.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../store/store\";\nimport { fetchJSON, fetchGeoJSON } from \"../../api/API\";\nimport { ServiceType } from \".\";\n\ninterface ViewState {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  maxZoom: number;\n  minZoom: number;\n  bearing: number;\n  pitch: number;\n}\n\ninterface ApiUninitialized {\n  code: \"Uninitialized\";\n}\n\ninterface ApiOK {\n  code: \"OK\";\n}\ninterface ApiError {\n  code: \"Fail\";\n  msg: string;\n}\n\ntype APIStatus = ApiOK | ApiError | ApiUninitialized;\n\nexport interface MedicalServiceData {\n  address: string;\n  contractNo: string;\n  email: string;\n  medicName: string;\n  phone: string;\n  supplierName: string;\n  lat: number;\n  lng: number;\n  type: ServiceType;\n}\n\ninterface JsonData {\n  data: MedicalServiceData[];\n  status: APIStatus;\n}\n\ninterface GeoJsonData {\n  data: any[];\n  status: APIStatus;\n}\n\ntype CurrentDisplayState = {\n  viewState: ViewState;\n  jsonData: JsonData;\n  geoJsonData: GeoJsonData;\n};\n\nlet initialState: CurrentDisplayState = {\n  viewState: {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    longitude: 23.5602928,\n    latitude: 46.0291793,\n    zoom: 6,\n    maxZoom: 20,\n    minZoom: 1,\n    bearing: 0,\n    pitch: 0\n  },\n  jsonData: {\n    data: [],\n    status: {\n      code: \"Uninitialized\"\n    }\n  },\n  geoJsonData: {\n    data: [],\n    status: {\n      code: \"Uninitialized\"\n    }\n  }\n};\n\nconst serviceMapSlice = createSlice({\n  name: \"layerPicker\",\n  initialState,\n  reducers: {\n    updateViewState(state, action: PayloadAction<Partial<ViewState>>) {\n      state.viewState = {\n        ...state.viewState,\n        ...action.payload\n      };\n    },\n    receiveMedicalServicesDataSuccess(state, action: PayloadAction<any[]>) {\n      state.jsonData.data = action.payload;\n      state.jsonData.status = {\n        code: \"OK\"\n      };\n    },\n    receiveMedicalServicesDataFailed(state, action: PayloadAction<string>) {\n      state.jsonData.status = {\n        code: \"Fail\",\n        msg: action.payload\n      };\n    },\n    receiveMedicalServicesGeoJsonDataSuccess(\n      state,\n      action: PayloadAction<any[]>\n    ) {\n      state.geoJsonData.data = action.payload;\n      state.geoJsonData.status = {\n        code: \"OK\"\n      };\n    },\n    receiveMedicalServicesGeoJsonDataFailed(\n      state,\n      action: PayloadAction<string>\n    ) {\n      state.geoJsonData.status = {\n        code: \"Fail\",\n        msg: action.payload\n      };\n    }\n  }\n});\n\nexport const {\n  updateViewState,\n  receiveMedicalServicesDataSuccess,\n  receiveMedicalServicesDataFailed,\n  receiveMedicalServicesGeoJsonDataSuccess,\n  receiveMedicalServicesGeoJsonDataFailed\n} = serviceMapSlice.actions;\n\nexport default serviceMapSlice.reducer;\n\nexport const fetchMedicalServicesData = (\n  services: ServiceType[]\n): AppThunk => async dispatch => {\n  try {\n    await fetchJSON(services, data => {\n      dispatch(receiveMedicalServicesDataSuccess(data));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesDataFailed(err.toString()));\n  }\n};\n\nexport const fetchMedicalServicesBuildingData = (\n  services: { file: string; type: ServiceType }[]\n): AppThunk => async dispatch => {\n  try {\n    await fetchGeoJSON(services, data => {\n      dispatch(receiveMedicalServicesGeoJsonDataSuccess(data));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesGeoJsonDataFailed(err.toString()));\n  }\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ServiceType } from '../ServiceMap';\n\ntype SelectedServiceTypes = ServiceType[];\ntype CurrentDisplayState = {\n  services: SelectedServiceTypes;\n}\n\nlet initialState: CurrentDisplayState = {\n  services: [\n    ServiceType.FamilyMedicine,\n    ServiceType.HomeCare,\n    ServiceType.Imaging,\n    ServiceType.Laboratory\n  ]\n}\n\nconst switchListItemSlice = createSlice({\n  name: 'switchListItem',\n  initialState,\n  reducers: {\n    toggleServiceType(state, action: PayloadAction<ServiceType>) {\n      const currentIndex = state.services.indexOf(action.payload);\n      const newChecked = [...state.services];\n\n      if (currentIndex === -1) {\n        newChecked.push(action.payload);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      state.services = newChecked;\n    },\n  }\n});\n\nexport const {\n  toggleServiceType,\n} = switchListItemSlice.actions;\n\nexport default switchListItemSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit'\n\ntype CurrentDisplayState = {\n  expanded: boolean;\n}\n\nlet initialState: CurrentDisplayState = {\n  expanded: false,\n}\n\nconst brandingCardSlice = createSlice({\n  name: 'brandingCard',\n  initialState,\n  reducers: {\n    toggleBrandingCardExpansion(state) {\n      state.expanded = !state.expanded;\n    },\n  }\n});\n\nexport const {\n  toggleBrandingCardExpansion,\n} = brandingCardSlice.actions;\n\nexport default brandingCardSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport Fuse from \"fuse.js\";\n\ntype CurrentDisplayState = {\n  query: string;\n  searchResults: any[];\n};\n\nlet initialState: CurrentDisplayState = {\n  query: \"\",\n  searchResults: []\n};\n\nconst filteredFields = [\n  \"address\",\n  \"contractNo\",\n  \"email\",\n  \"medicName\",\n  \"phone\",\n  \"supplierName\",\n  \"specialty\"\n];\n\nconst searchGroupSlice = createSlice({\n  name: \"searchGroup\",\n  initialState,\n  reducers: {\n    setQuery(state, action: PayloadAction<string>) {\n      state.query = action.payload;\n    },\n    // TODO: This needs to be typed\n    performQuery(state, action: PayloadAction<any[]>) {\n      if (state.query.length < 3) {\n        state.query = \"\";\n        state.searchResults = [];\n        return;\n      }\n\n      const searchOptions = {\n        threshold: 0.1,\n        location: 0,\n        distance: 100,\n        tokenize: true,\n        maxPatternLength: 16,\n        keys: filteredFields\n      };\n      const fuse = new Fuse(action.payload, searchOptions);\n      state.searchResults = fuse.search(state.query);\n      state.query = \"\";\n    }\n  }\n});\n\nexport const { setQuery, performQuery } = searchGroupSlice.actions;\n\nexport default searchGroupSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport switchListItemReducer from \"../components/SwitchListItem/SwitchListItemSlice\";\nimport layerPickerReducer from \"../components/LayerPicker/LayerPickerSlice\";\nimport brandingCardReducer from \"../components/BrandingCard/BrandingCardSlice\";\nimport serviceMapReducer from \"../components/ServiceMap/ServiceMapSlice\";\nimport searchGroupReducer from \"../components/SearchGroup/SearchGroupSlice\";\n\nconst rootReducer = combineReducers({\n  switchListItemReducer,\n  layerPickerReducer,\n  brandingCardReducer,\n  serviceMapReducer,\n  searchGroupReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer, { RootState } from './rootReducer';\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nconst store = configureStore({\n  reducer: rootReducer\n});\n\n/* if (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}; */\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React, { CSSProperties } from \"react\";\nimport { makeStyles, Typography, Icon } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { APP_BAR_COLOR } from \"../../App\";\n\nconst useStyles = makeStyles(theme => ({\n  gradientText: {\n    background: \"linear-gradient(103deg, #31dccf, #244fe7)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    fontSize: 14,\n    lineHeight: \"32px\",\n    textTransform: \"uppercase\",\n    position: \"relative\",\n    paddingRight: 28,\n    paddingLeft: 14,\n    zIndex: 2,\n    textShadow: [1, 2, 3, 4]\n      .reduce(\n        (acc, id) => `${acc},\n      -${id}px ${id}px 0 ${APP_BAR_COLOR},\n\t\t\t${id}px ${id}px 0 ${APP_BAR_COLOR},\n\t\t\t${id}px -${id}px 0 ${APP_BAR_COLOR},\n      -${id}px -${id}px 0 ${APP_BAR_COLOR}\n    `,\n        \"\"\n      )\n      .substr(1)\n  },\n  brandingSymbol: {\n    marginRight: 12,\n    fontSize: \"19px\",\n    position: \"absolute\",\n    display: \"block\",\n    right: 0,\n    top: \"-14%\",\n    border: \"2px solid transparent\",\n    width: \"50px\",\n    paddingLeft: 16,\n    height: \"120%\",\n    background: APP_BAR_COLOR,\n    backgroundClip: \"padding-box\",\n    textShadow: \"none\",\n    \"&::before\": {\n      content: \"' '\",\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      zIndex: -1,\n      margin: \"-2px\",\n      background: `linear-gradient(\n        103deg,\n        #31dccf,\n        #244fe7)\n      `\n    }\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 14,\n    textTransform: \"lowercase\",\n    textShadow: \"none\",\n    position: \"absolute\",\n    left: 0,\n    zIndex: 100,\n    lineHeight: 1\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst Logo: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      style={props.style}\n      className={clsx(classes.branding, props.className)}\n    >\n      <div className={classes.brandingSymbol}>\n        <Icon\n          className={clsx(classes.gradientText, \"far fa-lungs\")}\n          style={{ width: \"unset\", verticalAlign: \"sub\", fontSize: 19 }}\n        />\n      </div>\n      <Typography\n        variant=\"h5\"\n        component=\"h1\"\n        style={props.style}\n        className={clsx(classes.branding, props.className)}\n      >\n        <sup className={classes.beta}>β</sup>\n        Atlas\n      </Typography>\n    </div>\n  );\n};\n\nexport default Logo;\n","import { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\n \nimport { ServiceTypeColor } from '../ServiceMap';\n\nexport const CustomSwitch = (color?: ServiceTypeColor) => {\n    let switchColor = color || '#34495e';\n\n    return withStyles({\n        switchBase: {\n            color: switchColor,\n            '&$checked': {\n                color: switchColor,\n            },\n            '&$checked + $track': {\n                backgroundColor: switchColor,\n            },\n        },\n        checked: {},\n        track: {},\n    })(Switch);\n};","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n  makeStyles,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  ListItemSecondaryAction\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { toggleServiceType } from \"./SwitchListItemSlice\";\n\nimport {\n  ServiceType,\n  ServiceTypeColorMap,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\n\nimport { CustomSwitch } from \"../CustomSwitch\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\n\nconst useStyles = makeStyles(_ => ({\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  }\n}));\n\ninterface Props {\n  serviceType: ServiceType;\n}\n\nconst SwitchListItem: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { jsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const { serviceType } = props;\n\n  const handleToggle = (value: ServiceType) => () => {\n    dispatch(toggleServiceType(value));\n  };\n\n  const getCountFromDataArray = (data: any[], service: ServiceType) => {\n    return data.reduce((acc, serviceData) => {\n      if (serviceData.type !== service) {\n        return acc;\n      }\n\n      return acc + 1;\n    }, 0);\n  };\n\n  const getCountForServiceType = (service: ServiceType) => {\n    const data = searchResults.length ? searchResults : jsonData.data;\n    return getCountFromDataArray(data, service);\n  };\n\n  const ServiceSwitch =\n    layerType === LayerType.ScatterPlot\n      ? CustomSwitch(ServiceTypeColorMap[serviceType])\n      : CustomSwitch();\n\n  return (\n    <ListItem classes={{ root: classes.listItemRoot }}>\n      <ListItemIcon>\n        <Icon\n          className={clsx(classes.serviceIcon, ServiceTypeIcons[serviceType])}\n        />\n      </ListItemIcon>\n      <ListItemText\n        id={ServiceTypeReadable[serviceType]}\n        primary={ServiceTypeReadable[serviceType]}\n        secondary={`${getCountForServiceType(\n          serviceType\n        )} / ${getCountFromDataArray(jsonData.data, serviceType)}`}\n      />\n      <ListItemSecondaryAction>\n        <ServiceSwitch\n          edge=\"end\"\n          disabled={layerType === LayerType.Extruded}\n          onChange={handleToggle(serviceType)}\n          checked={\n            services.indexOf(serviceType) !== -1 &&\n            layerType !== LayerType.Extruded\n          }\n          inputProps={{\n            \"aria-labelledby\": ServiceTypeReadable[serviceType]\n          }}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default SwitchListItem;\n","import React from \"react\";\nimport {\n  makeStyles,\n  fade,\n  InputBase,\n  IconButton,\n  Badge,\n  Icon,\n  Card,\n  CardContent,\n  List\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ServiceType } from \"../ServiceMap\";\nimport SwitchListItem from \"../SwitchListItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuery, performQuery } from \"./SearchGroupSlice\";\nimport { RootState } from \"../../store/rootReducer\";\nimport debounce from \"debounce\";\nimport { MedicalServiceData } from \"../ServiceMap/ServiceMapSlice\";\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: 325\n    }\n  },\n  filterOpen: {\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    maxHeight: 345\n  },\n  filterClose: {\n    maxHeight: 0,\n    overflowY: \"hidden\",\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  filterCard: {\n    width: 350,\n    right: 0,\n    position: \"absolute\",\n    paddingBottom: 0\n  },\n  filterCardContent: {\n    paddingBottom: 0\n  }\n}));\n\nconst SearchGroup: React.FC = () => {\n  const classes = useStyles();\n  const [isFilterOpen, setIsFilterOpen] = React.useState(false);\n\n  const dispatch = useDispatch();\n\n  const { jsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n\n  const toggleFilters = () => {\n    setIsFilterOpen(!isFilterOpen);\n  };\n\n  const debouncedQuery = debounce(\n    (data: MedicalServiceData[]) => dispatch(performQuery(data)),\n    250\n  );\n  const handleChangeQuery = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (isFilterOpen) {\n      setIsFilterOpen(false);\n    }\n    dispatch(setQuery(ev.target.value));\n    debouncedQuery(jsonData.data);\n  };\n\n  const handleSubmitQuery = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.keyCode === 13) {\n      debouncedQuery.clear();\n      dispatch(performQuery(jsonData.data));\n    }\n  };\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Cauta servicii medicale (ex: radiologie)\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput\n        }}\n        onChange={handleChangeQuery}\n        onKeyDown={handleSubmitQuery}\n        inputProps={{ \"aria-label\": \"search\" }}\n      />\n      <IconButton\n        aria-label=\"filtreaza\"\n        color=\"inherit\"\n        onClick={toggleFilters}\n      >\n        <Badge badgeContent={0} color=\"secondary\">\n          <Icon className=\"far fa-filter\" style={{ fontSize: 16 }} />\n        </Badge>\n      </IconButton>\n      <Card\n        className={clsx(classes.filterCard, {\n          [classes.filterOpen]: isFilterOpen,\n          [classes.filterClose]: !isFilterOpen\n        })}\n      >\n        <CardContent\n          classes={{ root: classes.filterCardContent }}\n          style={{ paddingBottom: 0 }}\n        >\n          <List dense={true}>\n            {Object.values(ServiceType).map(type => (\n              <SwitchListItem key={type} serviceType={type} />\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SearchGroup;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  ServiceObject,\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: ServiceObject;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  return (\n    <Card className={classes.card} style={props.style}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true}>\n          <ListItem>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: 90,\n    paddingLeft: 100,\n    paddingRight: theme.spacing(3)\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nconst Container: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\n\nimport { /* makeStyles, */ Icon } from \"@material-ui/core\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { setLayerType, LayerType } from \"./LayerPickerSlice\";\nimport ScatterPlotTwoToneIcon from \"@material-ui/icons/ScatterPlotTwoTone\";\n\ninterface LayerTypeData {\n  title: string;\n  icon: string | JSX.Element;\n}\n\ntype LayerTypeList = {\n  [key in LayerType]: LayerTypeData;\n};\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst LayerPicker: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const handleChangeLayerType = (_: any, newLayerType: LayerType) => {\n    dispatch(setLayerType(newLayerType));\n  };\n\n  const layerTypePickerData: LayerTypeList = {\n    [LayerType.ScatterPlot]: {\n      icon: <ScatterPlotTwoToneIcon />,\n      title: \"Vezi furnizorii de servicii medicale ca puncte pe hartă\"\n    },\n    [LayerType.Icon]: {\n      icon: \"fad fa-map-marker-alt\",\n      title: \"Vezi furnizorii de servicii medicale agregati dupa densitate\"\n    },\n    [LayerType.Heatmap]: {\n      icon: \"fad fa-steak\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de heatmap\"\n    },\n    [LayerType.Grid]: {\n      icon: \"fad fa-th\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de grid\"\n    },\n    [LayerType.Extruded]: {\n      icon: \"fad fa-cube\",\n      title: \"Vezi clădirile în care au puncte de lucru medicii de familie\"\n    }\n  };\n\n  return (\n    <div\n      style={{ ...props.style, flex: 1, display: \"flex\" }}\n      className={props.className}\n    >\n      <ToggleButtonGroup\n        value={layerType}\n        exclusive={true}\n        onChange={handleChangeLayerType}\n        size=\"small\"\n        aria-label=\"text alignment\"\n        style={{ flexDirection: \"column\" }}\n      >\n        {Object.entries(layerTypePickerData).map(([key, data]) => (\n          <ToggleButton\n            key={key}\n            value={key}\n            aria-label={key}\n            title={data.title}\n          >\n            {typeof data.icon === \"string\" ? (\n              <Icon className={data.icon} style={{ width: \"unset\" }} />\n            ) : (\n              data.icon\n            )}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default LayerPicker;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { getAggregateColorRange } from \"../ServiceMap/layers\";\nimport chroma from \"chroma-js\";\nimport { Icon } from \"@material-ui/core\";\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst Legend: React.FC<Props> = props => {\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  return (\n    <div className={props.className} style={props.style}>\n      {(layerType === LayerType.Heatmap || layerType === LayerType.Grid) && (\n        <div style={{ flex: 1, display: \"flex\", border: \"2px solid #FFF\" }}>\n          {getAggregateColorRange().map((color, idx) => (\n            <div\n              key={`legend-${color}-${idx}`}\n              style={{\n                flex: 1,\n                backgroundColor: chroma(color).hex(),\n                display: \"flex\",\n                textAlign: \"center\"\n              }}\n            >\n              {idx === 0 && (\n                <Icon\n                  title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n                  className=\"fal fa-long-arrow-alt-down\"\n                  style={{ color: \"#fff\", alignSelf: \"center\" }}\n                />\n              )}\n              {idx === 5 && (\n                <Icon\n                  title=\"Zone cu număr mai mare de furnizori de servicii medicale\"\n                  className=\"fal fa-long-arrow-alt-up\"\n                  style={{ color: \"#333\", alignSelf: \"center\" }}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/rootReducer\";\nimport ServiceMap, { ServiceObject } from \"../components/ServiceMap\";\nimport Tooltip from \"../components/Tooltip\";\nimport Container from \"./Container\";\nimport LayerPicker from \"../components/LayerPicker\";\nimport Legend from \"../components/Legend\";\n\nconst useStyles = makeStyles(theme => ({\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    right: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  layerPicker: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n    marginTop: 20,\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    bottom: 20,\n    right: 20,\n    zIndex: 1\n  }\n}));\n\nconst Atlas: React.FC = () => {\n  const classes = useStyles();\n\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const onServiceHover = (obj: ServiceObject) => {\n    setTooltip(obj);\n  };\n\n  const onServiceClick = (obj: ServiceObject) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  return (\n    <Container>\n      <LayerPicker className={classes.layerPicker} />\n      <Legend\n        style={{\n          position: \"absolute\",\n          left: 96,\n          bottom: 20,\n          zIndex: 1,\n          width: 150\n        }}\n      />\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n        {<Tooltip service={tooltip} style={{ marginTop: 20 }} />}\n      </div>\n      <ServiceMap\n        services={services}\n        onHover={onServiceHover}\n        onClick={onServiceClick}\n        layerType={layerType}\n      />\n    </Container>\n  );\n};\n\nexport default Atlas;\n","import React from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Typography,\n  CardActions,\n  IconButton,\n  Collapse\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport clsx from \"clsx\";\nimport { toggleBrandingCardExpansion } from \"./BrandingCardSlice\";\nimport { ComponentWithInheritedProps } from \"../../types/CommonComponentProps\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: \"100%\"\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto !important\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  }\n}));\n\nconst BrandingCard: React.FC<ComponentWithInheritedProps> = props => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { expanded } = useSelector(\n    (state: RootState) => state.brandingCardReducer\n  );\n\n  const handleExpandClick = () => {\n    dispatch(toggleBrandingCardExpansion());\n  };\n\n  return (\n    <Card className={clsx(classes.card, props.className)} style={props.style}>\n      <CardContent style={{ paddingBottom: 0 }}>\n        <Typography variant=\"body1\" component=\"p\">\n          Aplicația GPS a{\" \"}\n          <a\n            href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            navigatorilor de pacienți oncologici\n          </a>{\" \"}\n          din România.\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n            Poți explora harta prin hover și click pe punctele afișate, și prin\n            selecția categoriilor de furnizori medicali pe care dorești să îi\n            afișezi. Datele sunt preluate pentru Municipiul București{\" \"}\n            <a\n              href=\"http://www.cnas.ro/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              de pe site-ul CNAS\n            </a>\n            .\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n            Adițional, pentru fiecare furnizor afișat,{\" \"}\n            <a\n              href=\"https://github.com/civicnet/cancer-atlas-scripts\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              am generat coordonatele GPS\n            </a>{\" \"}\n            pentru afișarea pe hartă.\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n            Codul sursă complet este disponibil pe{\" \"}\n            <a\n              href=\"https://github.com/civicnet/cancer-atlas\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n            .\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default BrandingCard;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Container from \"./Container\";\nimport BrandingCard from \"../components/BrandingCard\";\n\nconst useStyles = makeStyles(theme => ({\n  brandingCard: {\n    width: 350\n  }\n}));\n\nconst About: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <BrandingCard className={classes.brandingCard} />\n    </Container>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Icon } from \"@material-ui/core\";\nimport Atlas from \"../containers/Atlas\";\nimport About from \"../containers/About\";\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    main: () => <Atlas />,\n    icon: <Icon className=\"fas fa-map-marker-alt\" />,\n    text: \"Atlas\"\n  },\n  {\n    path: \"/despre\",\n    main: () => <About />,\n    icon: <Icon className=\"fas fa-question-circle\" />,\n    text: \"Despre\"\n  }\n];\n\nexport default routes;\n","import React from \"react\";\n\nimport { loadCSS } from \"fg-loadcss\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  List,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Drawer,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme,\n  Badge,\n  Icon,\n  Popover,\n  Box,\n  Typography\n} from \"@material-ui/core\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport clsx from \"clsx\";\nimport Logo from \"./components/Logo\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport SearchGroup from \"./components/SearchGroup\";\nimport routes from \"./routes\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst drawerWidth = 240;\nexport const APP_BAR_COLOR = \"#222f3e\";\n\nconst useStyles = makeStyles(theme => ({\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    backgroundColor: APP_BAR_COLOR\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\"\n  },\n  drawerPaper: {\n    // backgroundColor: APP_BAR_COLOR\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1\n    }\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar\n  },\n  toolbarIcons: {\n    display: \"flex\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuItem: {\n    // color: \"#FFF\",\n    // fontWeight: \"bold\",\n    // opacity: 0.7\n  }\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setIsDrawerOpen(false);\n  };\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  return (\n    <Router>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: isDrawerOpen\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: isDrawerOpen\n            })}\n          >\n            <MenuIcon style={{ color: \"#fff\" }} />\n          </IconButton>\n          <Logo />\n          <SearchGroup />\n          <div className={classes.grow} />\n          <div className={classes.toolbarIcons}>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n              {popupState => (\n                <>\n                  <IconButton\n                    aria-label=\"despre proiect\"\n                    color=\"inherit\"\n                    {...bindTrigger(popupState)}\n                  >\n                    <Badge badgeContent={0} color=\"secondary\">\n                      <Icon className=\"fas fa-question-circle\" />\n                    </Badge>\n                  </IconButton>\n                  <Popover\n                    {...bindPopover(popupState)}\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\"\n                    }}\n                    transformOrigin={{\n                      vertical: \"top\",\n                      horizontal: \"center\"\n                    }}\n                  >\n                    <Box p={2} style={{ maxWidth: 320 }}>\n                      <Typography variant=\"body1\">\n                        Un proiect{\" \"}\n                        <a\n                          href=\"https://civicnet.ro\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          CivicNet\n                        </a>{\" \"}\n                        și{\" \"}\n                        <a\n                          href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Asociația Sănătate pentru Comunitate\n                        </a>\n                        .\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Ne propunem să dezvoltăm{\" \"}\n                        <strong>\n                          prima aplicație dedicată pacienților de cancer\n                          pulmonar din România\n                        </strong>\n                        , navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Aplicația va conține informații importante despre\n                        traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de{\" \"}\n                        <a\n                          href=\"https://sanatateabuzoiana.ro/primul-ghid-al-supravietuitorului-de-cancer-localizat-la-nivelul-capului-si-gatului/#.XgDw6sYzZhE\"\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          ghiduri pentru pacienți.\n                        </a>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        În momentul de față, aplicația se află în stadiul de\n                        prototip interactiv. Ne puteți urmări pe Facebook pentru\n                        a fi la curent cu ultimele noutăți.\n                      </Typography>\n                    </Box>\n                  </Popover>\n                </>\n              )}\n            </PopupState>\n            <IconButton\n              aria-label=\"GitHub\"\n              color=\"inherit\"\n              href=\"https://github.com/civicnet/cancer-atlas/\"\n            >\n              <Badge badgeContent={0} color=\"secondary\">\n                <Icon className=\"fab fa-github\" />\n              </Badge>\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: isDrawerOpen,\n          [classes.drawerClose]: !isDrawerOpen\n        })}\n        classes={{\n          paper: clsx(classes.drawerPaper, {\n            [classes.drawerOpen]: isDrawerOpen,\n            [classes.drawerClose]: !isDrawerOpen\n          })\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {routes.map(route => (\n            <ListItem\n              button\n              key={route.text}\n              component={Link}\n              to={route.path}\n              className={classes.menuItem}\n            >\n              <ListItemIcon\n                style={{ marginLeft: 12 }}\n                className={classes.menuItem}\n              >\n                {route.icon}\n              </ListItemIcon>\n              <ListItemText primary={route.text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main>\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              children={<route.main />}\n            />\n          ))}\n        </Switch>\n      </main>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}