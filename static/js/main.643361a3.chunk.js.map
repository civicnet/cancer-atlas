{"version":3,"sources":["components/LayerPicker/LayerPickerSlice.ts","components/IconClusterLayer/index.tsx","components/ServiceMap/layers.ts","components/ServiceMap/index.tsx","api/API.ts","components/ServiceMap/ServiceMapSlice.ts","components/SwitchListItem/SwitchListItemSlice.ts","components/BrandingCard/BrandingCardSlice.ts","store/rootReducer.ts","store/store.ts","components/Tooltip/index.tsx","components/CustomSwitch/index.tsx","components/SwitchListItem/index.tsx","components/LayerPicker/index.tsx","components/Legend/index.tsx","components/BrandingCard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LayerType","initialState","layerType","ScatterPlot","layerPickerSlice","createSlice","name","reducers","setLayerType","state","action","payload","actions","IconClusterLayer","props","changeFlags","somethingChanged","oldProps","rebuildIndex","dataChanged","sizeScale","index","Supercluster","maxZoom","radius","load","data","map","d","geometry","coordinates","getPosition","properties","this","setState","z","Math","floor","context","viewport","zoom","getClusters","info","mode","pickedObject","object","cluster","objects","getLeaves","cluster_id","f","iconAtlas","iconMapping","id","IconLayer","getSubLayerProps","getIcon","size","point_count","getSize","min","CompositeLayer","layerName","ServiceType","getAggregateColorRange","chroma","rgb","getScatterplot","pointData","ScatterplotLayer","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","lng","lat","getRadius","getFillColor","ServiceTypeColorMap","type","getLineColor","onHover","onClick","getHeatmap","HeatmapLayer","colorRange","radiusPixels","intensity","getGrid","ScreenGridLayer","cellSizePixels","aggregation","coverage","colorScaleType","getExtruded","getTooltipData","address","mf_address","email","mf_email","medicName","mf_medicName","phone","mf_phone","supplierName","mf_supplierName","FamilyMedicine","GeoJsonLayer","extruded","wireframe","getPolygon","features","getElevation","getLineWidth","fetchJSON","files","cb","a","async","responses","file","fetch","then","response","json","service","Promise","all","results","allServices","concat","apply","fetchGeoJSON","viewState","width","window","innerWidth","height","innerHeight","longitude","latitude","minZoom","bearing","pitch","jsonData","status","code","geoJsonData","serviceMapSlice","updateViewState","receiveMedicalServicesDataSuccess","receiveMedicalServicesDataFailed","msg","receiveMedicalServicesGeoJsonDataSuccess","receiveMedicalServicesGeoJsonDataFailed","ServiceTypeReadable","HomeCare","Imaging","Laboratory","ServiceTypeBuildings","ServiceTypeIcons","ServiceMap","dispatch","useDispatch","useSelector","serviceMapReducer","useEffect","services","Extruded","filter","Boolean","toString","layer","Heatmap","Grid","Icon","getLayer","initialViewState","controller","layers","key","mapStyle","mapboxApiAccessToken","process","switchListItemSlice","toggleServiceType","currentIndex","indexOf","newChecked","push","splice","brandingCardSlice","expanded","toggleBrandingCardExpansion","rootReducer","combineReducers","switchListItemReducer","layerPickerReducer","brandingCardReducer","store","configureStore","reducer","useStyles","makeStyles","card","title","fontSize","icon","textAlign","Tooltip","classes","differentiator","ListItem","ListItemIcon","className","clsx","ListItemText","primary","specialty","Card","style","CardContent","Typography","color","gutterBottom","List","dense","CardActions","onClose","IconButton","marginLeft","CustomSwitch","switchColor","withStyles","switchBase","backgroundColor","checked","track","Switch","_","serviceIcon","listItemRoot","paddingLeft","SwitchListItem","value","serviceType","ServiceSwitch","root","secondary","reduce","acc","serviceData","ListItemSecondaryAction","edge","disabled","onChange","inputProps","LayerPicker","layerTypePickerData","flex","display","ToggleButtonGroup","exclusive","newLayerType","aria-label","Object","entries","ToggleButton","Legend","border","idx","hex","alignSelf","theme","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","lineHeight","textTransform","marginBottom","brandingSymbol","marginRight","beta","fontFamily","expand","transform","transition","transitions","create","duration","shortest","expandOpen","BrandingCard","paddingBottom","variant","component","href","target","rel","popupId","popupState","Button","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","maxWidth","marginTop","aria-expanded","Collapse","in","timeout","unmountOnExit","aside","zIndex","position","top","left","minWidth","tooltipContainer","right","filterList","bullet","margin","pos","popover","pointerEvents","paper","padding","spacing","App","React","useState","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","loadCSS","document","querySelector","values","obj","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.643361a3.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum LayerType {\n  ScatterPlot = 'ScatterPlot',\n  Icon = 'Icon',\n  Heatmap = 'Heatmap',\n  Grid = 'Grid',\n  Extruded = 'Extruded'\n}\n\ntype CurrentDisplayState = {\n  layerType: LayerType;\n}\n\nlet initialState: CurrentDisplayState = {\n  layerType: LayerType.ScatterPlot,\n}\n\nconst layerPickerSlice = createSlice({\n  name: 'layerPicker',\n  initialState,\n  reducers: {\n    setLayerType(state, action: PayloadAction<LayerType>) {\n      if (state.layerType !== action.payload) {\n        state.layerType = action.payload;\n      }\n    },\n  }\n});\n\nexport const {\n  setLayerType,\n} = layerPickerSlice.actions;\n\nexport default layerPickerSlice.reducer;\n","import {CompositeLayer} from '@deck.gl/core';\nimport {IconLayer} from '@deck.gl/layers';\nimport Supercluster from 'supercluster';\n\nfunction getIconName(size: number) {\n  if (size === 0) {\n    return '';\n  }\n  if (size < 10) {\n    return `marker-${size}`;\n  }\n  if (size < 100) {\n    return `marker-${Math.floor(size / 10)}0`;\n  }\n  return 'marker-100';\n}\n\nfunction getIconSize(size: number) {\n  return Math.min(100, size) / 100 + 1;\n}\n\nexport default class IconClusterLayer extends CompositeLayer {\n  static layerName = 'Foobar';\n\n  // eslint-disable-next-line\n  constructor(props: any) {\n    super(props);\n  }\n\n  shouldUpdateState({changeFlags}: {changeFlags: any}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}: {props: any, oldProps: any, changeFlags: any}) {\n    const rebuildIndex = changeFlags.dataChanged || props.sizeScale !== oldProps.sizeScale;\n\n    if (rebuildIndex) {\n      const index = new Supercluster({maxZoom: 16, radius: props.sizeScale});\n      index.load(\n        props.data.map((d: any) => ({\n          geometry: {coordinates: props.getPosition(d)},\n          properties: d\n        }))\n      );\n      this.setState({index});\n    }\n\n    const z = Math.floor(this.context.viewport.zoom);\n    if (rebuildIndex || z !== this.state.z) {\n      this.setState({\n        data: this.state.index.getClusters([-180, -85, 180, 85], z),\n        z\n      });\n    }\n  }\n\n  getPickingInfo({info, mode}: {info: any, mode: any}) {\n    const pickedObject = info.object && info.object.properties;\n    if (pickedObject) {\n      if (pickedObject.cluster && mode !== 'hover') {\n        info.objects = this.state.index\n          .getLeaves(pickedObject.cluster_id, 25)\n          .map((f: any) => f.properties);\n      }\n      info.object = pickedObject;\n    }\n    return info;\n  }\n\n  renderLayers() {\n    const {data} = this.state;\n    const {iconAtlas, iconMapping, sizeScale, id} = this.props;\n\n    return new IconLayer(\n      this.getSubLayerProps({\n        id,\n        data,\n        iconAtlas,\n        iconMapping,\n        sizeScale,\n        getPosition: (d: any) => d.geometry.coordinates,\n        getIcon: (d: any) => getIconName(d.properties.cluster ? d.properties.point_count : 1),\n        getSize: (d: any) => getIconSize(d.properties.cluster ? d.properties.point_count : 1)\n      })\n    );\n  }\n}\n","import { LayerProps, ServiceTypeColorMap, ServiceType } from \".\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { ScreenGridLayer } from \"@deck.gl/aggregation-layers\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport chroma from \"chroma-js\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport IconClusterLayer from \"../IconClusterLayer\";\n\nexport const getAggregateColorRange = () => [\n  chroma(\"#5A1846\").rgb(),\n  chroma(\"#900C3F\").rgb(),\n  chroma(\"#C70039\").rgb(),\n  chroma(\"#E3611C\").rgb(),\n  chroma(\"#F1920E\").rgb(),\n  chroma(\"#FFC300\").rgb()\n];\n\nexport const getLayer = (data: any, props: LayerProps) => {\n  switch (props.layerType) {\n    case LayerType.ScatterPlot:\n      return getScatterplot(data, props);\n    case LayerType.Heatmap:\n      return getHeatmap(data, props);\n    case LayerType.Grid:\n      return getGrid(data, props);\n    case LayerType.Extruded:\n      return getExtruded(data, props);\n    case LayerType.Icon:\n      return getIcon(data, props);\n    default:\n      return getScatterplot(data, props);\n  }\n};\n\nconst getScatterplot = (pointData: any, props: LayerProps) => {\n  return new ScatterplotLayer({\n    id: \"ScatterplotLayer\",\n    data: pointData,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: any) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb(),\n    getLineColor: [0, 0, 0],\n    onHover: (d: any) => props.onHover(d.object),\n    onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getIcon = (pointData: any, props: LayerProps) => {\n  return new IconClusterLayer({\n    id: \"IconLayer\",\n    data: pointData,\n    getPosition: (d: any) => [d.lng, d.lat],\n    iconMapping: 'data/location-icon-mapping.json',\n    iconAtlas: 'data/location-icon-atlas.png',\n    sizeScale: 30,\n    getIcon: (d: any) => 'marker',\n    pickable: true,\n    // onHover: (d: any) => props.onHover(d.object),\n    // onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getHeatmap = (pointData: any, props: LayerProps) => {\n  return new HeatmapLayer({\n    id: \"HeatmapLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    opacity: 0.75,\n    getPosition: (d: any) => [d.lng, d.lat],\n    radiusPixels: 80,\n    intensity: 1,\n  });\n};\n\nconst getGrid = (pointData: any, props: LayerProps) => {\n  return new ScreenGridLayer({\n    id: \"ScreenGridLayer\",\n    data: pointData,\n    // cellSize: 25,\n    colorRange: getAggregateColorRange(),\n    cellSizePixels: 15,\n    // colorAggregation: \"count\",\n    // sizeAggregation: \"count\",\n    aggregation: \"SUM\",\n    coverage: 0.9,\n    opacity: 0.7,\n    colorScaleType: \"quantile\",\n    getPosition: (d: any) => [d.lng, d.lat]\n  });\n};\n\nconst getExtruded = (pointData: any, props: LayerProps) => {\n  const getTooltipData = (d: any) => ({\n    address: d.properties.mf_address,\n    email: d.properties.mf_email,\n    medicName: d.properties.mf_medicName,\n    phone: d.properties.mf_phone,\n    supplierName: d.properties.mf_supplierName,\n    type: ServiceType.FamilyMedicine\n  });\n\n  return new GeoJsonLayer({\n    id: \"GeoJsonLayer\",\n    data: pointData,\n    pickable: true,\n    extruded: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    opacity: 0.7,\n    getPolygon: (d: any) => ({\n      type: \"FeatureCollection\",\n      features: [d]\n    }),\n    getElevation: (d: any) => 15,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[ServiceType.FamilyMedicine]).rgb(),\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1,\n    onHover: (d: any) =>\n      d.object\n        ? props.onHover(getTooltipData(d.object))\n        : props.onHover(null as any),\n    onClick: (d: any) =>\n      d.object\n        ? props.onClick(getTooltipData(d.object))\n        : props.onClick(null as any)\n  });\n};\n","import React, { useEffect } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { getLayer } from \"./layers\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { updateViewState, fetchMedicalServicesData, fetchMedicalServicesBuildingData } from './ServiceMapSlice';\n\nexport enum ServiceType {\n  FamilyMedicine = \"family_medicine\",\n  Laboratory = \"laboratories\",\n  HomeCare = \"home_care\",\n  Imaging = \"imaging\"\n}\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n};\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#e67e22\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n};\n\nexport const ServiceTypeBuildings: ServiceTypeIndexed<string | null> = {\n  [ServiceType.FamilyMedicine]: \"mf_buildings_with_attrs_epsg4326\",\n  [ServiceType.HomeCare]: null,\n  [ServiceType.Imaging]: null,\n  [ServiceType.Laboratory]: null\n};\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-x-ray\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n};\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#e67e22\"\n};\n\nexport interface ServiceObject {\n  type: ServiceType;\n  [key: string]: string;\n}\n\nexport interface LayerProps {\n  onHover: (obj: ServiceObject) => void;\n  onClick: (obj: ServiceObject) => void;\n  layerType: LayerType;\n}\n\ninterface Props {\n  services: ServiceType[];\n}\n\nconst ServiceMap: React.FC<Props & LayerProps> = (\n  props: Props & LayerProps\n) => {\n\n  const dispatch = useDispatch();\n  const { viewState, jsonData, geoJsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n\n  useEffect(() => {\n    if (geoJsonData.status.code !== 'Uninitialized') {\n      return;\n    }\n\n    if (props.layerType === LayerType.Extruded) {\n      const files = [\n        {\n          file: ServiceTypeBuildings[ServiceType.FamilyMedicine],\n          type: ServiceType.FamilyMedicine\n        }\n      ].filter(Boolean) as { file: string; type: ServiceType }[];\n\n      dispatch(fetchMedicalServicesBuildingData(files));\n    }\n  }, [props.layerType, geoJsonData.status.code, dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchMedicalServicesData(props.services));\n  }, [props.services, dispatch]);\n\n  useEffect(() => {\n    if (props.layerType === LayerType.Extruded) {\n      dispatch(updateViewState({\n        pitch: 45\n      }));\n    } else {\n      dispatch(updateViewState({\n        pitch: 0\n      }));\n    }\n  }, [props.layerType, dispatch]);\n\n  if (!jsonData.data) {\n    return null;\n  }\n\n  const layer = getLayer(\n    props.layerType !== LayerType.Extruded ? jsonData.data : geoJsonData.data,\n    props\n  );\n\n  /* const handleViewStateChange = ({\n    viewState,\n    interactionState,\n    oldViewState\n  }: any) => {\n    dispatch(updateViewState(viewState));\n  }; */\n\n  return (\n    <DeckGL\n      initialViewState={viewState}\n      // onViewStateChange={handleViewStateChange}\n      controller={true}\n      layers={[layer]}\n    >\n      <StaticMap\n        key=\"static_map\"\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/claudiuc/ck4j3z14e09hg1dmkpijn2kma\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      />\n    </DeckGL>\n  );\n};\n\nexport default ServiceMap;\n","import { ServiceType } from \"../components/ServiceMap\";\n\nconst VERSION = '0.2.4';\n\n// TODO: Unify these two\nexport const fetchJSON = async (\n  files: ServiceType[],\n  cb: (data: any) => void,\n) => {\n  const type = \"json\";\n  const responses = files.map(file =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/national/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n\nexport const fetchGeoJSON = async (\n  files: { file: string; type: ServiceType }[],\n  cb: (data: any) => void,\n) => {\n  const type = \"geojson\";\n  const responses = files.map(({ file }) =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.features.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk } from '../../store/store';\nimport { fetchJSON, fetchGeoJSON } from '../../api/API';\nimport { ServiceType } from '.';\n\ninterface ViewState {\n  width: number,\n  height: number,\n  longitude: number,\n  latitude: number,\n  zoom: number,\n  maxZoom: number,\n  minZoom: number,\n  bearing: number,\n  pitch: number\n};\n\ninterface ApiUninitialized {\n  code: 'Uninitialized';\n}\n\ninterface ApiOK {\n  code: 'OK';\n}\ninterface ApiError {\n  code: 'Fail';\n  msg: string;\n}\n\ntype APIStatus = ApiOK | ApiError | ApiUninitialized;\n\ninterface MedicalServiceData {\n  \"address\": string,\n  \"contractNo\": string,\n  \"email\": string,\n  \"medicName\": string,\n  \"phone\": string,\n  \"supplierName\": string,\n  \"lat\": number,\n  \"lng\": number,\n  \"type\": ServiceType,\n}\n\ninterface JsonData {\n  data: MedicalServiceData[];\n  status: APIStatus;\n}\n\ninterface GeoJsonData {\n  data: any[];\n  status: APIStatus;\n}\n\ntype CurrentDisplayState = {\n  viewState: ViewState;\n  jsonData: JsonData;\n  geoJsonData: GeoJsonData;\n}\n\nlet initialState: CurrentDisplayState = {\n  viewState: {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    longitude: 23.5602928,\n    latitude: 46.0291793,\n    zoom: 6,\n    maxZoom: 20,\n    minZoom: 1,\n    bearing: 0,\n    pitch: 0\n  },\n  jsonData: {\n    data: [],\n    status: {\n      code: 'Uninitialized',\n    }\n  },\n  geoJsonData: {\n    data: [],\n    status: {\n      code: 'Uninitialized',\n    }\n  },\n}\n\nconst serviceMapSlice = createSlice({\n  name: 'layerPicker',\n  initialState,\n  reducers: {\n    updateViewState(state, action: PayloadAction<Partial<ViewState>>) {\n      state.viewState = {\n        ...state.viewState,\n        ...action.payload\n      };\n    },\n    receiveMedicalServicesDataSuccess(state, action: PayloadAction<any[]>) {\n      state.jsonData.data = action.payload;\n      state.jsonData.status = {\n        code: 'OK',\n      };\n    },\n    receiveMedicalServicesDataFailed(state, action: PayloadAction<string>) {\n      state.jsonData.status = {\n        code: 'Fail',\n        msg: action.payload,\n      };\n    },\n    receiveMedicalServicesGeoJsonDataSuccess(state, action: PayloadAction<any[]>) {\n      state.geoJsonData.data = action.payload;\n      state.geoJsonData.status = {\n        code: 'OK',\n      };\n    },\n    receiveMedicalServicesGeoJsonDataFailed(state, action: PayloadAction<string>) {\n      state.geoJsonData.status = {\n        code: 'Fail',\n        msg: action.payload,\n      };\n    },\n  }\n});\n\nexport const {\n  updateViewState,\n  receiveMedicalServicesDataSuccess,\n  receiveMedicalServicesDataFailed,\n  receiveMedicalServicesGeoJsonDataSuccess,\n  receiveMedicalServicesGeoJsonDataFailed,\n} = serviceMapSlice.actions;\n\nexport default serviceMapSlice.reducer;\n\nexport const fetchMedicalServicesData = (\n  services: ServiceType[],\n): AppThunk => async dispatch => {\n  try {\n    await fetchJSON(services, data => {\n      dispatch(receiveMedicalServicesDataSuccess(\n        data\n      ));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesDataFailed(\n      err.toString()\n    ));\n  }\n}\n\nexport const fetchMedicalServicesBuildingData = (\n  services: { file: string; type: ServiceType }[],\n): AppThunk => async dispatch => {\n  try {\n    await fetchGeoJSON(services, data => {\n      dispatch(receiveMedicalServicesGeoJsonDataSuccess(\n        data\n      ));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesGeoJsonDataFailed(\n      err.toString()\n    ));\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ServiceType } from '../ServiceMap';\n\ntype SelectedServiceTypes = ServiceType[];\ntype CurrentDisplayState = {\n  services: SelectedServiceTypes;\n}\n\nlet initialState: CurrentDisplayState = {\n  services: [\n    ServiceType.FamilyMedicine,\n    ServiceType.HomeCare,\n    ServiceType.Imaging,\n    ServiceType.Laboratory\n  ]\n}\n\nconst switchListItemSlice = createSlice({\n  name: 'switchListItem',\n  initialState,\n  reducers: {\n    toggleServiceType(state, action: PayloadAction<ServiceType>) {\n      const currentIndex = state.services.indexOf(action.payload);\n      const newChecked = [...state.services];\n\n      if (currentIndex === -1) {\n        newChecked.push(action.payload);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      state.services = newChecked;\n    },\n  }\n});\n\nexport const {\n  toggleServiceType,\n} = switchListItemSlice.actions;\n\nexport default switchListItemSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit'\n\ntype CurrentDisplayState = {\n  expanded: boolean;\n}\n\nlet initialState: CurrentDisplayState = {\n  expanded: false,\n}\n\nconst brandingCardSlice = createSlice({\n  name: 'brandingCard',\n  initialState,\n  reducers: {\n    toggleBrandingCardExpansion(state) {\n      state.expanded = !state.expanded;\n    },\n  }\n});\n\nexport const {\n  toggleBrandingCardExpansion,\n} = brandingCardSlice.actions;\n\nexport default brandingCardSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport switchListItemReducer from '../components/SwitchListItem/SwitchListItemSlice';\nimport layerPickerReducer from '../components/LayerPicker/LayerPickerSlice';\nimport brandingCardReducer from '../components/BrandingCard/BrandingCardSlice';\nimport serviceMapReducer from '../components/ServiceMap/ServiceMapSlice';\n\nconst rootReducer = combineReducers({\n  switchListItemReducer,\n  layerPickerReducer,\n  brandingCardReducer,\n  serviceMapReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer, { RootState } from './rootReducer';\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nconst store = configureStore({\n  reducer: rootReducer\n});\n\n/* if (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}; */\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  ServiceObject,\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: ServiceObject;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  return (\n    <Card className={classes.card} style={props.style}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true}>\n          <ListItem>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\n \nimport { ServiceTypeColor } from '../ServiceMap';\n\nexport const CustomSwitch = (color?: ServiceTypeColor) => {\n    let switchColor = color || '#34495e';\n\n    return withStyles({\n        switchBase: {\n            color: switchColor,\n            '&$checked': {\n                color: switchColor,\n            },\n            '&$checked + $track': {\n                backgroundColor: switchColor,\n            },\n        },\n        checked: {},\n        track: {},\n    })(Switch);\n};","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n  makeStyles,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  ListItemSecondaryAction\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from '../../store/rootReducer'\nimport { toggleServiceType } from './SwitchListItemSlice';\n\nimport {\n  ServiceType,\n  ServiceTypeColorMap,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\n\nimport { CustomSwitch } from \"../CustomSwitch\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\n\nconst useStyles = makeStyles(_ => ({\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  },\n}));\n\ninterface Props {\n  serviceType: ServiceType;\n  layerType: LayerType;\n}\n\nconst SwitchListItem: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { jsonData } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n\n  const { layerType, serviceType } = props;\n\n  const handleToggle = (value: ServiceType) => () => {\n    dispatch(toggleServiceType(value));\n  };\n\n  const getCountForServiceType = (service: ServiceType) => {\n    return jsonData.data.reduce((acc, serviceData) => {\n      if (serviceData.type !== service) {\n        return acc;\n      }\n\n      return acc+1;\n    }, 0)\n  }\n\n  const ServiceSwitch =\n    layerType === LayerType.ScatterPlot\n      ? CustomSwitch(ServiceTypeColorMap[serviceType])\n      : CustomSwitch();\n\n  return (\n    <ListItem classes={{ root: classes.listItemRoot }}>\n      <ListItemIcon>\n        <Icon\n          className={clsx(\n            classes.serviceIcon,\n            ServiceTypeIcons[serviceType]\n          )}\n        />\n      </ListItemIcon>\n      <ListItemText\n        id=\"switch-list-label-wifi\"\n        primary={ServiceTypeReadable[serviceType]}\n        secondary={getCountForServiceType(serviceType)}\n      />\n      <ListItemSecondaryAction>\n        <ServiceSwitch\n          edge=\"end\"\n          disabled={layerType === LayerType.Extruded}\n          onChange={handleToggle(serviceType)}\n          checked={\n            services.indexOf(serviceType) !== -1 &&\n            layerType !== LayerType.Extruded\n          }\n          inputProps={{\n            \"aria-labelledby\": \"switch-list-label-wifi\"\n          }}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n\n};\n\nexport default SwitchListItem;\n","import React from \"react\";\n\nimport { /* makeStyles, */ Icon } from \"@material-ui/core\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from '../../store/rootReducer'\nimport { setLayerType, LayerType } from './LayerPickerSlice';\nimport ScatterPlotTwoToneIcon from '@material-ui/icons/ScatterPlotTwoTone';\n\ninterface LayerTypeData {\n  title: string,\n  icon: string | JSX.Element,\n}\n\ntype LayerTypeList = {\n  [key in LayerType]: LayerTypeData;\n}\n\nconst LayerPicker: React.FC = () => {\n  const dispatch = useDispatch();\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const handleChangeLayerType = (_: any, newLayerType: LayerType) => {\n    dispatch(setLayerType(newLayerType));\n  };\n\n  const layerTypePickerData: LayerTypeList = {\n    [LayerType.ScatterPlot]: {\n      icon: <ScatterPlotTwoToneIcon />,\n      title: \"Vezi furnizorii de servicii medicale ca puncte pe hartă\",\n    },\n    [LayerType.Icon]: {\n      icon: \"fad fa-map-marker-alt\",\n      title: \"Vezi furnizorii de servicii medicale agregati dupa densitate\",\n    },\n    [LayerType.Heatmap]: {\n      icon: \"fad fa-steak\",\n      title: \"Vezi distribuția furnizorilor de servicii medicale sub formă de heatmap\",\n    },\n    [LayerType.Grid]: {\n      icon: \"fad fa-th\",\n      title: \"Vezi distribuția furnizorilor de servicii medicale sub formă de grid\",\n    },\n    [LayerType.Extruded]: {\n      icon: \"fad fa-cube\",\n      title: \"Vezi clădirile în care au puncte de lucru medicii de familie\",\n    }\n  }\n\n  return (\n    <div style={{ flex: 1, display: \"flex\" }}>\n      <ToggleButtonGroup\n        value={layerType}\n        exclusive={true}\n        onChange={handleChangeLayerType}\n        size=\"small\"\n        aria-label=\"text alignment\"\n      >\n        {Object.entries(layerTypePickerData).map(([key, data]) => (\n          <ToggleButton\n            key={key}\n            value={key}\n            aria-label={key}\n            title={data.title}\n          >\n            {\n              typeof data.icon === \"string\"\n                ? <Icon className={data.icon} style={{ width: 'unset' }} />\n                : data.icon\n            }\n\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default LayerPicker;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { getAggregateColorRange } from \"../ServiceMap/layers\";\nimport chroma from \"chroma-js\";\nimport { Icon } from \"@material-ui/core\";\n\n/* const useStyles = makeStyles(theme => ({\n})); */\n\nconst Legend: React.FC = () => {\n  /* const classes = useStyles(); */\n\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer,\n  );\n\n  return (\n    <>\n      {(layerType === LayerType.Heatmap ||\n        layerType === LayerType.Grid) && (\n          <div style={{ flex: 1, display: \"flex\", border: \"2px solid #FFF\" }}>\n            {getAggregateColorRange().map((color, idx) => (\n              <div\n                key={`legend-${color}-${idx}`}\n                style={{\n                  flex: 1,\n                  backgroundColor: chroma(color).hex(),\n                  display: \"flex\",\n                  textAlign: \"center\"\n                }}\n              >\n                {idx === 0 && (\n                  <Icon\n                    title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n                    className=\"fal fa-long-arrow-alt-down\"\n                    style={{ color: \"#fff\", alignSelf: \"center\" }}\n                  />\n                )}\n                {idx === 5 && (\n                  <Icon\n                    title=\"Zone cu număr mai mare de furnizori de servicii medicale\"\n                    className=\"fal fa-long-arrow-alt-up\"\n                    style={{ color: \"#333\", alignSelf: \"center\" }}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n    </>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Typography,\n  Icon,\n  CardActions,\n  Button,\n  Popover,\n  Box,\n  IconButton,\n  Collapse\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport clsx from \"clsx\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { toggleBrandingCardExpansion } from \"./BrandingCardSlice\";\n\nconst useStyles = makeStyles(theme => ({\n  gradientText: {\n    background: \"linear-gradient(135deg, #009fff 0%, #ec2f4b 100%)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    lineHeight: \"32px\",\n    textTransform: \"uppercase\",\n    marginBottom: 12\n  },\n  brandingSymbol: {\n    marginRight: 12,\n    width: \"unset\"\n  },\n  card: {\n    width: \"100%\"\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 14,\n    textTransform: \"lowercase\"\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto !important\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  }\n}));\n\nconst BrandingCard: React.FC = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { expanded } = useSelector(\n    (state: RootState) => state.brandingCardReducer\n  );\n\n  const handleExpandClick = () => {\n    dispatch(toggleBrandingCardExpansion())\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardContent style={{ paddingBottom: 0 }}>\n        <Typography\n          variant=\"h5\"\n          component=\"h2\"\n          className={clsx(classes.branding, classes.gradientText)}\n        >\n          <Icon\n            className={clsx(\n              classes.brandingSymbol,\n              classes.gradientText,\n              \"fas fa-lungs\"\n            )}\n          />\n          Navigator\n              <sup className={classes.beta}>α</sup>\n        </Typography>\n        <Typography variant=\"body1\" component=\"p\">\n          Aplicația GPS a{\" \"}\n          <a\n            href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            navigatorilor de pacienți oncologici\n              </a>{\" \"}\n          din România.\n            </Typography>\n      </CardContent>\n      <CardActions>\n        <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n          {popupState => (\n            <div>\n              <Button\n                size=\"small\"\n                color=\"primary\"\n                {...bindTrigger(popupState)}\n              >\n                Despre proiect\n                    <Icon\n                  className=\"far fa-question-circle\"\n                  style={{ marginLeft: 4, fontSize: 13 }}\n                />\n              </Button>\n\n              <Popover\n                {...bindPopover(popupState)}\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"right\"\n                }}\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\"\n                }}\n              >\n                <Box p={2} style={{ maxWidth: 320 }}>\n                  <Typography variant=\"body1\">\n                    Un proiect{\" \"}\n                    <a\n                      href=\"https://civicnet.ro\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      CivicNet\n                        </a>{\" \"}\n                    și{\" \"}\n                    <a\n                      href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Asociația Sănătate pentru Comunitate\n                        </a>\n                    .\n                      </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    component=\"p\"\n                    style={{ marginTop: 6 }}\n                  >\n                    Ne propunem să dezvoltăm{\" \"}\n                    <strong>\n                      prima aplicație dedicată pacienților de cancer\n                      pulmonar din România\n                        </strong>\n                    , navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    component=\"p\"\n                    style={{ marginTop: 6 }}\n                  >\n                    Aplicația va conține informații importante despre\n                    traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de{\" \"}\n                    <a\n                      href=\"https://sanatateabuzoiana.ro/primul-ghid-al-supravietuitorului-de-cancer-localizat-la-nivelul-capului-si-gatului/#.XgDw6sYzZhE\"\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\"\n                    >\n                      ghiduri pentru pacienți.\n                        </a>\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    component=\"p\"\n                    style={{ marginTop: 6 }}\n                  >\n                    În momentul de față, aplicația se află în stadiul de\n                    prototip interactiv. Ne puteți urmări pe Facebook pentru\n                    a fi la curent cu ultimele noutăți.\n                      </Typography>\n                </Box>\n              </Popover>\n            </div>\n          )}\n        </PopupState>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ marginTop: 6 }}\n          >\n            Poți explora harta prin hover și click pe punctele afișate, și\n            prin selecția categoriilor de furnizori medicali pe care dorești\n                să îi afișezi. Datele sunt preluate pentru Municipiul București{\" \"}\n            <a\n              href=\"http://www.cnas.ro/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              de pe site-ul CNAS\n                </a>\n            .\n              </Typography>\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ marginTop: 6 }}\n          >\n            Adițional, pentru fiecare furnizor afișat,{\" \"}\n            <a\n              href=\"https://github.com/civicnet/cancer-atlas-scripts\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              am generat coordonatele GPS\n                </a>{\" \"}\n            pentru afișarea pe hartă.\n              </Typography>\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ marginTop: 6 }}\n          >\n            Codul sursă complet este disponibil pe{\" \"}\n            <a\n              href=\"https://github.com/civicnet/cancer-atlas\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n                </a>\n            .\n              </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default BrandingCard;\n","import React from \"react\";\n\nimport { loadCSS } from \"fg-loadcss\";\n\nimport ServiceMap, {\n  ServiceType,\n  ServiceObject\n} from \"./components/ServiceMap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport {\n  List,\n} from \"@material-ui/core\";\n\nimport { useSelector } from 'react-redux'\nimport { RootState } from './store/rootReducer'\n\nimport Tooltip from \"./components/Tooltip\";\nimport SwitchListItem from \"./components/SwitchListItem\";\nimport LayerPicker from \"./components/LayerPicker\";\nimport Legend from \"./components/Legend\";\nimport BrandingCard from \"./components/BrandingCard\";\n\nconst useStyles = makeStyles(theme => ({\n  aside: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    left: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    right: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  filterList: {},\n  card: {\n    width: \"100%\"\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer,\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer,\n  );\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  const onServiceHover = (obj: ServiceObject) => {\n    setTooltip(obj);\n  };\n\n  const onServiceClick = (obj: ServiceObject) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  return (\n    <div>\n      <aside className={classes.aside}>\n        <BrandingCard />\n        <Card\n          className={classes.card}\n          style={{ marginTop: 20, paddingBottom: 0 }}\n        >\n          <CardContent>\n            <List className={classes.filterList}>\n              {Object.values(ServiceType).map(type => (\n                <SwitchListItem key={type} serviceType={type} layerType={layerType} />\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n        <div\n          style={{\n            display: \"flex\",\n            flex: 1,\n            marginTop: 20,\n            backgroundColor: \"transparent\"\n          }}\n        >\n          <LayerPicker />\n          <Legend />\n        </div>\n      </aside>\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n        {<Tooltip service={tooltip} style={{ marginTop: 20 }} />}\n      </div>\n      <main>\n        <ServiceMap\n          services={services}\n          onHover={onServiceHover}\n          onClick={onServiceClick}\n          layerType={layerType}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}