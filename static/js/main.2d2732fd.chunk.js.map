{"version":3,"sources":["components/ServiceMap/ServiceMapSlice.ts","components/LayerPicker/LayerPickerSlice.ts","components/SwitchListItem/SwitchListItemSlice.ts","components/SearchGroup/SearchGroupSlice.ts","store/rootReducer.ts","store/store.ts","components/Logo/index.tsx","components/IconClusterLayer/index.tsx","lib/Either.ts","components/ServiceMap/layers.ts","lib/defaults.ts","components/ServiceMap/index.tsx","api/API.ts","components/CustomSwitch/index.tsx","components/SwitchListItem/index.tsx","components/SearchGroup/index.tsx","containers/Container.tsx","components/InfoCard/index.tsx","containers/About.tsx","containers/Changelog.tsx","routes/index.tsx","components/Tooltip/index.tsx","components/LayerPicker/index.tsx","components/Legend/index.tsx","containers/Atlas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceType","ApiCode","LayerType","initialDataStatus","code","Uninitialized","initialMedicalServices","Object","values","reduce","acc","type","data","status","initialState","viewState","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","minZoom","bearing","pitch","medicalServices","geoJsonData","uatGeoJson","countyGeoJson","serviceMapSlice","createSlice","name","reducers","updateViewState","state","action","payload","receiveMedicalServiceDataLayer","service","layer","setMedicalServiceDataLayerCode","receiveUatGeoJson","receiveCountiesGeoJson","receiveMedicalServicesGeoJsonDataSuccess","OK","receiveMedicalServicesGeoJsonDataFailed","Fail","msg","actions","services","FamilyMedicine","HomeCare","Imaging","Laboratory","switchListItemSlice","toggleServiceType","currentIndex","indexOf","newChecked","push","splice","layerType","ScatterPlot","layerPickerSlice","setLayerType","query","searchOptions","threshold","location","distance","tokenize","maxPatternLength","keys","searchGroupSlice","setQuery","performQuery","length","searchResults","undefined","serviceType","currentLayer","results","Fuse","search","rootReducer","combineReducers","switchListItemReducer","layerPickerReducer","serviceMapReducer","searchGroupReducer","store","configureStore","reducer","useStyles","makeStyles","theme","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","fontSize","lineHeight","textTransform","position","paddingLeft","zIndex","APP_BAR_COLOR","brandingSymbol","marginRight","display","right","top","border","backgroundClip","textShadow","content","bottom","left","margin","beta","fontFamily","Logo","props","classes","style","className","clsx","Icon","verticalAlign","marginTop","Typography","variant","component","IconClusterLayer","changeFlags","somethingChanged","oldProps","rebuildIndex","dataChanged","sizeScale","index","Supercluster","radius","load","map","d","geometry","coordinates","getPosition","properties","this","setState","z","Math","floor","context","viewport","getClusters","info","mode","pickedObject","object","cluster","objects","getLeaves","cluster_id","f","iconAtlas","iconMapping","id","IconLayer","getSubLayerProps","getIcon","size","point_count","getSize","min","CompositeLayer","isRight","val","tag","Left","value","Right","layerName","aggregateColorRange","chroma","rgb","deckColorRange","color","choroplethColorRange","populationAxis","medicalServicesAxis","getScatterplot","pointData","isVisible","ScatterplotLayer","visible","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","lng","lat","getRadius","getFillColor","ServiceTypeColorMap","getLineColor","onHover","x","y","onClick","getHeatmap","HeatmapLayer","colorRange","radiusPixels","intensity","getGrid","console","log","GridLayer","cellSize","coverage","getChoropleth","GeoJsonLayer","choroplethData","extruded","getPolygon","features","getLineWidth","countyBorders","noOpFunction","ServiceTypeReadable","ServiceTypeIcons","createStyles","icon","iconVariant","spacing","message","alignItems","ServiceMap","React","useState","open","setOpen","handleClose","_","reason","dispatch","useDispatch","useSelector","useEffect","onDone","onFail","oboe","node","natcode","countyCode","county","pop2015","done","fail","streamGeoJSON","streamCountyBorders","files","onEach","forEach","file","getJsonPath","streamJSON","displayedData","layers","shownServices","medicalData","flatData","Heatmap","Grid","Extruded","Choropleth","key","includes","filter","getLayers","toast","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","amber","IconButton","aria-label","initialViewState","controller","mapStyle","mapboxApiAccessToken","process","CustomSwitch","switchColor","withStyles","switchBase","backgroundColor","checked","track","Switch","serviceIcon","textAlign","listItemRoot","SwitchListItem","getCountFromDataArray","serviceData","ServiceSwitch","isChecked","ListItem","root","ListItemIcon","ListItemText","primary","secondary","searchResultsCoerced","getCountForServiceType","ListItemSecondaryAction","edge","disabled","onChange","inputProps","borderRadius","shape","fade","palette","common","white","marginLeft","breakpoints","up","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","filterOpen","easing","sharp","duration","enteringScreen","maxHeight","filterClose","overflowY","leavingScreen","filterCard","paddingBottom","filterCardContent","SearchGroup","isFilterOpen","setIsFilterOpen","debouncedQuery","debounce","resultCount","res","count","Number","InputBase","placeholder","input","ev","target","onKeyDown","keyCode","clear","Badge","badgeContent","Card","CardContent","List","dense","fontStyle","Container","children","card","InfoCard","href","rel","infoCard","paddingTop","About","Link","to","paddingRight","maxWidth","paper","inline","octokit","Octokit","debug","warn","error","Changelog","commits","setCommits","a","async","repos","listCommits","owner","repo","per_page","repsonse","commit","Fragment","sha","disableGutters","ListItemAvatar","Avatar","alt","author","login","src","avatar_url","url","textDecoration","Intl","DateTimeFormat","format","Date","date","Divider","routes","path","exact","main","text","title","Tooltip","differentiator","supplierName","specialty","transformX","pos","transformY","posStyle","transform","gutterBottom","disablePadding","divider","medicName","address","email","phone","CardActions","LayerPicker","layerTypePickerData","flex","ToggleButtonGroup","exclusive","newLayerType","flexDirection","entries","ToggleButton","UnivariateLegend","idx","hex","alignSelf","legendContainer","legendLayer","horizontalLayer","verticalLayer","mixBlendMode","legendRow","BIVARIATE_SIZE","legendColumn","legendLabel","labelBottom","labelLeft","BivariateLegend","reverse","JSON","stringify","Legend","tooltipContainer","layerPicker","Atlas","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","obj","bullet","marginBottom","popover","appBar","drawer","appBarShift","menuButton","hide","flexShrink","whiteSpace","drawerPaper","drawerOpen","drawerClose","overflowX","toolbar","mixins","toolbarIcons","grow","flexGrow","menuItem","withRouter","useTheme","isDrawerOpen","setIsDrawerOpen","loadCSS","document","querySelector","CssBaseline","AppBar","Toolbar","popupId","popupState","bindTrigger","Popover","bindPopover","transformOrigin","Box","p","Drawer","direction","route","button","selected","pathname","Boolean","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d2732fd.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../../store/store\";\nimport { fetchGeoJSON } from \"../../api/API\";\n\ninterface ViewState {\n  width: number;\n  height: number;\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  maxZoom: number;\n  minZoom: number;\n  bearing: number;\n  pitch: number;\n}\n\nexport enum ServiceType {\n  FamilyMedicine = \"family_medicine\",\n  Laboratory = \"laboratories\",\n  HomeCare = \"home_care\",\n  Imaging = \"imaging\"\n}\n\nexport enum ApiCode {\n  Uninitialized,\n  OK,\n  Fail\n}\n\ntype ApiUninitialized = {\n  code: ApiCode.Uninitialized;\n};\n\ntype ApiOK = {\n  code: ApiCode.OK;\n};\n\ntype ApiError = {\n  code: ApiCode.Fail;\n  msg: string;\n};\n\ntype ApiStatus = ApiOK | ApiError | ApiUninitialized;\n\ntype LatLngPair = [number, number];\n\nexport interface Geometry {\n  type: string;\n  coordinates: LatLngPair[];\n}\n\nexport interface UatProperties {\n  natcode: string;\n  name: string;\n  countyCode: number;\n  county: string;\n  pop2015: number;\n  color: string;\n}\n\nexport interface CountyProperties {\n  name: string;\n}\n\nexport interface UatGeoJson {\n  type: string;\n  geometry: Geometry;\n  properties: UatProperties;\n}\n\nexport interface CountyGeoJson {\n  type: string;\n  geometry: Geometry;\n  properties: CountyProperties;\n}\n\nexport type UatGeoJsonList = UatGeoJson[];\nexport type CountyGeoJsonList = CountyGeoJson[];\n\nexport interface MedicalServiceData {\n  address: string;\n  contractNo: string;\n  email: string;\n  medicName?: string;\n  name?: string;\n  specialty?: string;\n  phone: string;\n  supplierName: string;\n  lat: number;\n  lng: number;\n  type: ServiceType;\n}\n\nexport interface MedicalServiceDataLayer {\n  data: MedicalServiceData[];\n  status: ApiStatus;\n}\n\nexport type MedicalServiceDataLayerMap = {\n  [key in ServiceType]: MedicalServiceDataLayer;\n};\n\ninterface GeoJsonData {\n  data: any[];\n  status: ApiStatus;\n}\n\ntype CurrentDisplayState = {\n  viewState: ViewState;\n  medicalServices: MedicalServiceDataLayerMap;\n  geoJsonData: GeoJsonData;\n  uatGeoJson: UatGeoJsonList;\n  countyGeoJson: CountyGeoJsonList;\n};\n\nconst initialDataStatus: ApiStatus = {\n  code: ApiCode.Uninitialized\n};\n\nconst initialMedicalServices = Object.values(ServiceType).reduce(\n  (acc: Partial<MedicalServiceDataLayerMap>, type: ServiceType) => {\n    return {\n      ...acc,\n      [type]: {\n        data: [],\n        status: initialDataStatus\n      }\n    };\n  },\n  {}\n);\n\nconst initialViewState = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  longitude: 23.5602928,\n  latitude: 46.0291793,\n  zoom: 6,\n  maxZoom: 20,\n  minZoom: 1,\n  bearing: 0,\n  pitch: 0\n};\n\nlet initialState: CurrentDisplayState = {\n  viewState: initialViewState,\n  medicalServices: initialMedicalServices as MedicalServiceDataLayerMap,\n  geoJsonData: {\n    data: [],\n    status: initialDataStatus\n  },\n  uatGeoJson: [],\n  countyGeoJson: []\n};\n\nconst serviceMapSlice = createSlice({\n  name: \"serviceMap\",\n  initialState,\n  reducers: {\n    updateViewState(state, action: PayloadAction<Partial<ViewState>>) {\n      state.viewState = {\n        ...state.viewState,\n        ...action.payload\n      };\n    },\n    receiveMedicalServiceDataLayer(\n      state,\n      action: PayloadAction<{\n        service: ServiceType;\n        layer: MedicalServiceDataLayer;\n      }>\n    ) {\n      state.medicalServices = {\n        ...state.medicalServices,\n        [action.payload.service]: action.payload.layer\n      };\n    },\n    setMedicalServiceDataLayerCode(\n      state,\n      action: PayloadAction<{ service: ServiceType; status: ApiStatus }>\n    ) {\n      state.medicalServices = {\n        ...state.medicalServices,\n        [action.payload.service]: {\n          data: state.medicalServices[action.payload.service].data,\n          status: action.payload.status\n        }\n      };\n    },\n    receiveUatGeoJson(state, action: PayloadAction<UatGeoJsonList>) {\n      state.uatGeoJson = action.payload;\n    },\n    receiveCountiesGeoJson(state, action: PayloadAction<CountyGeoJsonList>) {\n      state.countyGeoJson = action.payload;\n    },\n    receiveMedicalServicesGeoJsonDataSuccess(\n      state,\n      action: PayloadAction<any[]>\n    ) {\n      state.geoJsonData.data = action.payload;\n      state.geoJsonData.status = {\n        code: ApiCode.OK\n      };\n    },\n    receiveMedicalServicesGeoJsonDataFailed(\n      state,\n      action: PayloadAction<string>\n    ) {\n      state.geoJsonData.status = {\n        code: ApiCode.Fail,\n        msg: action.payload\n      };\n    }\n  }\n});\n\nexport const {\n  updateViewState,\n  receiveMedicalServicesGeoJsonDataSuccess,\n  receiveMedicalServicesGeoJsonDataFailed,\n  receiveMedicalServiceDataLayer,\n  setMedicalServiceDataLayerCode,\n  receiveUatGeoJson,\n  receiveCountiesGeoJson\n} = serviceMapSlice.actions;\n\nexport default serviceMapSlice.reducer;\n\nexport const fetchMedicalServicesBuildingData = (\n  services: { file: string; type: ServiceType }[]\n): AppThunk => async dispatch => {\n  try {\n    await fetchGeoJSON(services, data => {\n      dispatch(receiveMedicalServicesGeoJsonDataSuccess(data));\n    });\n  } catch (err) {\n    dispatch(receiveMedicalServicesGeoJsonDataFailed(err.toString()));\n  }\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport enum LayerType {\n  ScatterPlot = \"ScatterPlot\",\n  Icon = \"Icon\",\n  Heatmap = \"Heatmap\",\n  Grid = \"Grid\",\n  Choropleth = \"Choropleth\",\n  Extruded = \"Extruded\"\n}\n\ntype CurrentDisplayState = {\n  layerType: LayerType;\n};\n\nlet initialState: CurrentDisplayState = {\n  layerType: LayerType.ScatterPlot\n};\n\nconst layerPickerSlice = createSlice({\n  name: \"layerPicker\",\n  initialState,\n  reducers: {\n    setLayerType(state, action: PayloadAction<LayerType>) {\n      if (state.layerType !== action.payload) {\n        state.layerType = action.payload;\n      }\n    }\n  }\n});\n\nexport const { setLayerType } = layerPickerSlice.actions;\n\nexport default layerPickerSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ServiceType } from \"../ServiceMap/ServiceMapSlice\";\n\ntype SelectedServiceTypes = ServiceType[];\ntype CurrentDisplayState = {\n  services: SelectedServiceTypes;\n};\n\nlet initialState: CurrentDisplayState = {\n  services: [\n    ServiceType.FamilyMedicine,\n    ServiceType.HomeCare,\n    ServiceType.Imaging,\n    ServiceType.Laboratory\n  ]\n};\n\nconst switchListItemSlice = createSlice({\n  name: \"switchListItem\",\n  initialState,\n  reducers: {\n    toggleServiceType(state, action: PayloadAction<ServiceType>) {\n      const currentIndex = state.services.indexOf(action.payload);\n      const newChecked = [...state.services];\n\n      if (currentIndex === -1) {\n        newChecked.push(action.payload);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      state.services = newChecked;\n    }\n  }\n});\n\nexport const { toggleServiceType } = switchListItemSlice.actions;\n\nexport default switchListItemSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport Fuse from \"fuse.js\";\nimport {\n  MedicalServiceDataLayerMap,\n  ServiceType,\n  ApiCode\n} from \"../ServiceMap/ServiceMapSlice\";\n\nconst filteredFields = [\n  \"address\",\n  \"contractNo\",\n  \"email\",\n  \"medicName\",\n  \"phone\",\n  \"supplierName\",\n  \"specialty\"\n];\n\nconst initialSearchOptions = {\n  threshold: 0.2,\n  location: 0,\n  distance: 100,\n  tokenize: true,\n  maxPatternLength: 16,\n  keys: filteredFields\n};\n\ntype CurrentDisplayState = {\n  query: string;\n  searchOptions: typeof initialSearchOptions;\n  searchResults?: Partial<MedicalServiceDataLayerMap>;\n};\n\nlet initialState: CurrentDisplayState = {\n  query: \"\",\n  searchOptions: initialSearchOptions\n};\n\nconst searchGroupSlice = createSlice({\n  name: \"searchGroup\",\n  initialState,\n  reducers: {\n    setQuery(state, action: PayloadAction<string>) {\n      state.query = action.payload;\n    },\n    performQuery(state, action: PayloadAction<MedicalServiceDataLayerMap>) {\n      if (state.query.length < 3) {\n        state.searchResults = undefined;\n        return;\n      }\n\n      state.searchResults = Object.keys(action.payload).reduce(\n        (acc: Partial<MedicalServiceDataLayerMap>, serviceType) => {\n          const currentLayer = action.payload[serviceType as ServiceType];\n          const fuse = new Fuse(currentLayer.data, state.searchOptions);\n          const results = fuse.search(state.query);\n\n          return {\n            ...acc,\n            [serviceType]: {\n              data: results,\n              status: { code: ApiCode.OK }\n            }\n          };\n        },\n        {}\n      );\n    }\n  }\n});\n\nexport const { setQuery, performQuery } = searchGroupSlice.actions;\n\nexport default searchGroupSlice.reducer;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport switchListItemReducer from \"../components/SwitchListItem/SwitchListItemSlice\";\nimport layerPickerReducer from \"../components/LayerPicker/LayerPickerSlice\";\nimport serviceMapReducer from \"../components/ServiceMap/ServiceMapSlice\";\nimport searchGroupReducer from \"../components/SearchGroup/SearchGroupSlice\";\n\nconst rootReducer = combineReducers({\n  switchListItemReducer,\n  layerPickerReducer,\n  serviceMapReducer,\n  searchGroupReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk';\nimport rootReducer, { RootState } from './rootReducer';\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nconst store = configureStore({\n  reducer: rootReducer\n});\n\n/* if (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}; */\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React, { CSSProperties } from \"react\";\nimport { makeStyles, Typography, Icon } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { APP_BAR_COLOR } from \"../../App\";\n\nconst useStyles = makeStyles(theme => ({\n  gradientText: {\n    background: \"linear-gradient(103deg, #31dccf, #244fe7)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    fontSize: 14,\n    lineHeight: \"14px\",\n    textTransform: \"uppercase\",\n    position: \"relative\",\n    paddingLeft: 8,\n    zIndex: 2,\n    background: APP_BAR_COLOR\n  },\n  brandingSymbol: {\n    marginRight: 12,\n    fontSize: \"19px\",\n    position: \"absolute\",\n    display: \"block\",\n    right: 0,\n    top: -12,\n    border: \"2px solid transparent\",\n    width: \"50px\",\n    paddingLeft: 16,\n    height: 36,\n    background: APP_BAR_COLOR,\n    backgroundClip: \"padding-box\",\n    textShadow: \"none\",\n    \"&::before\": {\n      content: \"' '\",\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      zIndex: -1,\n      margin: \"-2px\",\n      background: `linear-gradient(\n        103deg,\n        #31dccf,\n        #244fe7)\n      `\n    }\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 8,\n    textTransform: \"lowercase\",\n    textShadow: \"none\",\n    position: \"absolute\",\n    left: 0,\n    zIndex: 100,\n    lineHeight: 1\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst Logo: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      style={props.style}\n      className={clsx(classes.branding, props.className)}\n    >\n      <div className={classes.brandingSymbol}>\n        <Icon\n          className={clsx(classes.gradientText, \"far fa-lungs\")}\n          style={{\n            width: \"unset\",\n            verticalAlign: \"sub\",\n            fontSize: 19,\n            marginTop: 6\n          }}\n        />\n      </div>\n      <Typography\n        variant=\"h5\"\n        component=\"h1\"\n        style={{ ...props.style, marginRight: 50 }}\n        className={clsx(classes.branding, props.className)}\n      >\n        <sup className={classes.beta}>β</sup>\n        Atlas\n      </Typography>\n    </div>\n  );\n};\n\nexport default Logo;\n","import { CompositeLayer } from '@deck.gl/core';\nimport { IconLayer } from '@deck.gl/layers';\nimport Supercluster from 'supercluster';\n\nfunction getIconName(size: number) {\n  if (size === 0) {\n    return '';\n  }\n  if (size < 10) {\n    return `marker-${size}`;\n  }\n  if (size < 100) {\n    return `marker-${Math.floor(size / 10)}0`;\n  }\n  return 'marker-100';\n}\n\nfunction getIconSize(size: number) {\n  return Math.min(100, size) / 100 + 1;\n}\n\nexport default class IconClusterLayer extends CompositeLayer {\n  static layerName = 'Foobar';\n\n  // eslint-disable-next-line\n  constructor(props: any) {\n    super(props);\n  }\n\n  shouldUpdateState({ changeFlags }: { changeFlags: any }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({ props, oldProps, changeFlags }: { props: any, oldProps: any, changeFlags: any }) {\n    const rebuildIndex = changeFlags.dataChanged || props.sizeScale !== oldProps.sizeScale;\n\n    if (rebuildIndex) {\n      const index = new Supercluster({ maxZoom: 16, radius: props.sizeScale });\n      index.load(\n        props.data.map((d: any) => ({\n          geometry: { coordinates: props.getPosition(d) },\n          properties: d\n        }))\n      );\n      this.setState({ index });\n    }\n\n    const z = Math.floor(this.context.viewport.zoom);\n    if (rebuildIndex || z !== this.state.z) {\n      this.setState({\n        data: this.state.index.getClusters([-180, -85, 180, 85], z),\n        z\n      });\n    }\n  }\n\n  getPickingInfo({ info, mode }: { info: any, mode: any }) {\n    const pickedObject = info.object && info.object.properties;\n    if (pickedObject) {\n      if (pickedObject.cluster && mode !== 'hover') {\n        info.objects = this.state.index\n          .getLeaves(pickedObject.cluster_id, 25)\n          .map((f: any) => f.properties);\n      }\n      info.object = pickedObject;\n    }\n    return info;\n  }\n\n  renderLayers() {\n    const { data } = this.state;\n    const { iconAtlas, iconMapping, sizeScale, id } = this.props;\n\n    return new IconLayer(\n      this.getSubLayerProps({\n        id,\n        data,\n        iconAtlas,\n        iconMapping,\n        sizeScale,\n        getPosition: (d: any) => d.geometry.coordinates,\n        getIcon: (d: any) => getIconName(d.properties.cluster ? d.properties.point_count : 1),\n        getSize: (d: any) => getIconSize(d.properties.cluster ? d.properties.point_count : 1)\n      })\n    );\n  }\n}\n","export interface Left<A> {\n  value: A;\n  tag: \"left\";\n}\n\nexport interface Right<B> {\n  value: B;\n  tag: \"right\";\n}\n\nexport type Either<A, B> = Left<A> | Right<B>;\n\nexport function isLeft<A>(val: Either<A, any>): val is Left<A> {\n  if ((val as Left<A>).tag === \"left\") {\n    return true;\n  }\n  return false;\n}\n\nexport function isRight<B>(val: Either<any, B>): val is Right<B> {\n  if ((val as Right<B>).tag === \"right\") {\n    return true;\n  }\n  return false;\n}\n\nexport function Left<A>(val: A): Left<A> {\n  return { value: val, tag: \"left\" };\n}\n\nexport function Right<B>(val: B): Right<B> {\n  return { value: val, tag: \"right\" };\n}\n\nexport type Predicate<N> = (val: N) => boolean;\n\nexport function predicateEither<A, B>(\n  value: B,\n  error: A,\n  predicate: Predicate<B>\n): Either<A, B> {\n  if (!predicate(value)) {\n    return Left(error);\n  }\n  return Right(value);\n}\n\nexport function firstLeft<A, B>(\n  val: B,\n  predicatePairs: [Predicate<B>, A][]\n): Either<A, B> {\n  for (let i = 0; i < predicatePairs.length; i++) {\n    const p = predicatePairs[i][0];\n    const e = predicatePairs[i][1];\n    if (!p(val)) {\n      return Left(e);\n    }\n  }\n  return Right(val);\n}\n","import { LayerProps, ServiceTypeColorMap } from \".\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { /* ScreenGridLayer, */ GridLayer } from \"@deck.gl/aggregation-layers\";\nimport { GeoJsonLayer /*, GridCellLayer */ } from \"@deck.gl/layers\";\n\nimport chroma from \"chroma-js\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport IconClusterLayer from \"../IconClusterLayer\";\nimport {\n  ServiceType,\n  MedicalServiceDataLayerMap,\n  MedicalServiceData,\n  ApiCode,\n  UatGeoJsonList,\n  UatGeoJson,\n  CountyGeoJsonList\n} from \"./ServiceMapSlice\";\nimport { Left, Right, Either } from \"../../lib/Either\";\n\nexport interface LayerTypeError {\n  msg: string;\n  layerType: LayerType;\n}\n\nconst WipLayerErrorMsg =\n  \"Tip de vizualizare in lucru, te rugam alege alt tip de vizualizare\";\n\nexport const aggregateColorRange = [\n  chroma(\"#5A1846\").rgb(),\n  chroma(\"#900C3F\").rgb(),\n  chroma(\"#C70039\").rgb(),\n  chroma(\"#E3611C\").rgb(),\n  chroma(\"#F1920E\").rgb(),\n  chroma(\"#FFC300\").rgb()\n];\n\nconst deckColorRange = aggregateColorRange.map(color => [\n  color[0],\n  color[1],\n  color[2]\n]);\n\nexport const choroplethColorRange = {\n  populationAxis: [\n    chroma(\"#f4cfd3\").rgb(),\n    chroma(\"#e48791\").rgb(),\n    chroma(\"#d44050\").rgb()\n  ],\n  medicalServicesAxis: [\n    chroma(\"#d2e8f9\").rgb(),\n    chroma(\"#8ec5f1\").rgb(),\n    chroma(\"#4ba3e9\").rgb()\n  ]\n};\n\nexport const getLayers = (\n  data: {\n    medicalData: Partial<MedicalServiceDataLayerMap>;\n    choroplethData: UatGeoJsonList;\n    countyBorders: CountyGeoJsonList;\n  },\n  shownServices: ServiceType[],\n  props: LayerProps\n): Either<LayerTypeError, any[]> => {\n  const medicalData = data.medicalData;\n  const flatData = () =>\n    Object.values(medicalData).reduce((acc, layer) => {\n      if (layer === undefined) {\n        return acc;\n      }\n\n      if (layer.status.code !== ApiCode.OK) {\n        return acc;\n      }\n\n      return [...acc, ...layer.data];\n    }, [] as MedicalServiceData[]);\n\n  switch (props.layerType) {\n    case LayerType.Heatmap:\n      return Right<any[]>([getHeatmap(flatData(), props)]);\n    case LayerType.Grid:\n      return Right<any[]>([getGrid(flatData(), props)]);\n    case LayerType.Extruded:\n      return Left<LayerTypeError>({\n        msg: WipLayerErrorMsg,\n        layerType: LayerType.Extruded\n      });\n    // return getExtruded(data, props);\n    case LayerType.Icon:\n      return Right<any[]>([getIcon(flatData(), props)]);\n    case LayerType.Choropleth:\n      return Right<any[]>(\n        getChoropleth(\n          {\n            medicalData: flatData(),\n            choroplethData: data.choroplethData,\n            countyBorders: data.countyBorders\n          },\n          props\n        )\n      );\n    case LayerType.ScatterPlot:\n    default: {\n      const medicalData = data.medicalData;\n      return Right<any[]>(\n        Object.keys(medicalData)\n          .map(key => {\n            const serviceType = key as ServiceType;\n            const layer = medicalData[serviceType];\n            if (layer === undefined) {\n              return null;\n            }\n\n            if (layer.status.code !== ApiCode.OK) {\n              return null;\n            }\n\n            const isVisible = shownServices.includes(serviceType);\n            return getScatterplot(layer.data, serviceType, isVisible, props);\n          })\n          .filter(layer => layer !== null)\n      );\n    }\n  }\n};\n\nconst getScatterplot = (\n  pointData: MedicalServiceData[],\n  serviceType: ServiceType,\n  isVisible: boolean,\n  props: LayerProps\n) => {\n  return new ScatterplotLayer({\n    id: `ScatterplotLayer-${serviceType}`,\n    data: pointData,\n    visible: isVisible,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: MedicalServiceData) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: MedicalServiceData) => {\n      return chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb();\n    },\n    getLineColor: [0, 0, 0, 100],\n    onHover: (d: { object: MedicalServiceData; x: number; y: number }) =>\n      props.onHover(d.object, { x: d.x, y: d.y }),\n    onClick: (d: { object: MedicalServiceData }) => props.onClick(d.object)\n  });\n};\n\nconst getIcon = (pointData: MedicalServiceData[], props: LayerProps) => {\n  return new IconClusterLayer({\n    id: \"IconLayer\",\n    data: pointData,\n    getPosition: (d: MedicalServiceData) => [d.lng, d.lat],\n    iconMapping: \"data/location-icon-mapping.json\",\n    iconAtlas: \"data/location-icon-atlas.png\",\n    sizeScale: 30,\n    // getIcon: \"marker\",\n    pickable: true\n    // onHover: (d: any) => props.onHover(d.object),\n    // onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getHeatmap = (pointData: MedicalServiceData[], props: LayerProps) => {\n  return new HeatmapLayer({\n    id: \"HeatmapLayer\",\n    data: pointData,\n    colorRange: deckColorRange,\n    opacity: 0.75,\n    getPosition: (d: MedicalServiceData) => [d.lng, d.lat],\n    radiusPixels: 80,\n    intensity: 1\n  });\n};\n\nconst getGrid = (pointData: MedicalServiceData[], props: LayerProps) => {\n  console.log(\"here\", pointData);\n  return new GridLayer({\n    id: \"ScreenGridLayer\",\n    //pickable: false,\n    data: pointData,\n    colorRange: deckColorRange,\n    cellSize: 5000,\n    // extruded: true,\n    // colorScaleType: \"quantize\",\n    // upperPercentile: 95,\n    //cellSizePixels: 50,\n    // aggregation: \"SUM\",\n    coverage: 0.7,\n    opacity: 0.7,\n    // colorScaleType: \"quantile\",\n    getPosition: (d: MedicalServiceData) => [d.lng, d.lat]\n    //getWeight: 1,\n    //gpuAggregation: true,\n  });\n};\n\nconst getChoropleth = (\n  data: {\n    medicalData: MedicalServiceData[];\n    choroplethData: UatGeoJsonList;\n    countyBorders: CountyGeoJsonList;\n  },\n  props: LayerProps\n) => {\n  return [\n    new GeoJsonLayer({\n      id: \"GeoJsonLayer-Bivariate\",\n      data: data.choroplethData,\n      pickable: false,\n      extruded: false,\n      stroked: true,\n      filled: true,\n      lineWidthMinPixels: 0.2,\n      getLineColor: [255, 255, 255, 200],\n      getPolygon: (d: any) => ({\n        type: \"FeatureCollection\",\n        features: [d]\n      }),\n      getFillColor: (d: UatGeoJson) => {\n        /* if (d.properties.color === \"#c9bcce\") {\n          return [...chroma(d.properties.color).rgb(), 200];\n        } */\n\n        return chroma(d.properties.color).rgb();\n      },\n      getLineWidth: 1\n    }),\n    new GeoJsonLayer({\n      id: \"GeoJsonLayer-CountyBorders\",\n      data: data.countyBorders,\n      pickable: false,\n      extruded: false,\n      stroked: true,\n      filled: false,\n      lineWidthMinPixels: 1,\n      getLineColor: [255, 255, 255],\n      getPolygon: (d: any) => ({\n        type: \"FeatureCollection\",\n        features: [d]\n      }),\n      getLineWidth: 1\n    })\n  ];\n};\n\n/* const getExtruded = (pointData: any, props: LayerProps) => {\n  const getTooltipData = (d: any) => ({\n    address: d.properties.mf_address,\n    email: d.properties.mf_email,\n    medicName: d.properties.mf_medicName,\n    phone: d.properties.mf_phone,\n    supplierName: d.properties.mf_supplierName,\n    type: ServiceType.FamilyMedicine\n  });\n\n  return new GeoJsonLayer({\n    id: \"GeoJsonLayer\",\n    data: pointData,\n    pickable: true,\n    extruded: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    opacity: 0.7,\n    getPolygon: (d: any) => ({\n      type: \"FeatureCollection\",\n      features: [d]\n    }),\n    getElevation: (d: any) => 15,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[ServiceType.FamilyMedicine]).rgb(),\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1\n    onHover: (d: { object: MedicalServiceData }) =>\n      d.object\n        ? props.onHover(getTooltipData(d.object))\n        : props.onHover(null as any),\n    onClick: (d: { object: MedicalServiceData }) =>\n      d.object\n        ? props.onClick(getTooltipData(d.object))\n        : props.onClick(null as any)\n  });\n};\n */\n","export const noOpFunction = () => {};\n","import React, { useEffect } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { getLayers } from \"./layers\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  // updateViewState,\n  // fetchMedicalServicesBuildingData,\n  ApiCode,\n  receiveMedicalServiceDataLayer,\n  setMedicalServiceDataLayerCode,\n  MedicalServiceDataLayer,\n  ServiceType,\n  MedicalServiceData,\n  receiveUatGeoJson,\n  UatGeoJsonList,\n  receiveCountiesGeoJson\n} from \"./ServiceMapSlice\";\nimport { streamJSON, streamGeoJSON, streamCountyBorders } from \"../../api/API\";\nimport { noOpFunction } from \"../../lib/defaults\";\nimport { isLeft, isRight } from \"../../lib/Either\";\nimport {\n  Snackbar,\n  IconButton,\n  makeStyles,\n  Theme,\n  createStyles\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { amber } from \"@material-ui/core/colors\";\nimport clsx from \"clsx\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { ScreenCoordinates } from \"../../types/interfaces/ScreenCoordinates\";\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n};\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#e67e22\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n};\n\nexport const ServiceTypeBuildings: ServiceTypeIndexed<string | null> = {\n  [ServiceType.FamilyMedicine]: \"mf_buildings_with_attrs_epsg4326\",\n  [ServiceType.HomeCare]: null,\n  [ServiceType.Imaging]: null,\n  [ServiceType.Laboratory]: null\n};\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-x-ray\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n};\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#e67e22\"\n};\n\nexport interface LayerProps {\n  onHover: (service: MedicalServiceData, pos: ScreenCoordinates) => void;\n  onClick: (obj: MedicalServiceData) => void;\n  layerType: LayerType;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  })\n);\n\ninterface Props {\n  services: ServiceType[];\n}\n\nconst ServiceMap: React.FC<Props & LayerProps> = (\n  props: Props & LayerProps\n) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = (\n    _: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const dispatch = useDispatch();\n  const {\n    viewState,\n    medicalServices,\n    /* geoJsonData, */ uatGeoJson,\n    countyGeoJson\n  } = useSelector((state: RootState) => state.serviceMapReducer);\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n\n  // Load uats geojson\n  useEffect(() => {\n    const onDone = (data: UatGeoJsonList) => dispatch(receiveUatGeoJson(data));\n    streamGeoJSON(\"uats\", onDone, msg => console.log(msg));\n  }, [dispatch]);\n\n  // Load counties geojson\n  useEffect(() => {\n    const onDone = (data: any) => dispatch(receiveCountiesGeoJson(data));\n    streamCountyBorders(onDone, msg => console.log(msg));\n  }, [dispatch]);\n\n  useEffect(() => {\n    setOpen(true);\n  }, [props.layerType]);\n\n  // Load buildings\n  /* useEffect(() => {\n    if (geoJsonData.status.code !== ApiCode.Uninitialized) {\n      return;\n    }\n\n    if (props.layerType === LayerType.Extruded) {\n      const files = [\n        {\n          file: ServiceTypeBuildings[ServiceType.FamilyMedicine],\n          type: ServiceType.FamilyMedicine\n        }\n      ].filter(Boolean) as { file: string; type: ServiceType }[];\n\n      dispatch(fetchMedicalServicesBuildingData(files));\n    }\n  }, [props.layerType, geoJsonData.status.code, dispatch]); */\n\n  // Load medical services\n  useEffect(() => {\n    const onDone = (service: ServiceType, layer: MedicalServiceDataLayer) =>\n      dispatch(receiveMedicalServiceDataLayer({ service, layer }));\n    const onFail = (service: ServiceType, msg: string) =>\n      dispatch(\n        setMedicalServiceDataLayerCode({\n          service,\n          status: { code: ApiCode.Fail, msg: msg }\n        })\n      );\n\n    streamJSON(Object.values(ServiceType), onDone, noOpFunction, onFail);\n  }, [dispatch]);\n\n  // Custom pitch for 3D layers\n  /* useEffect(() => {\n    if (props.layerType === LayerType.Extruded) {\n      dispatch(\n        updateViewState({\n          pitch: 45\n        })\n      );\n    } else {\n      dispatch(\n        updateViewState({\n          pitch: 0\n        })\n      );\n    }\n  }, [props.layerType, dispatch]); */\n\n  if (!medicalServices[ServiceType.FamilyMedicine].data) {\n    return null;\n  }\n\n  const displayedData =\n    searchResults !== undefined ? searchResults : medicalServices;\n\n  const layers = getLayers(\n    {\n      medicalData: props.layerType !== LayerType.Extruded ? displayedData : {},\n      choroplethData: uatGeoJson,\n      countyBorders: countyGeoJson\n    },\n    services,\n    props\n  );\n\n  let toast = null;\n  if (isLeft(layers)) {\n    toast = (\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        ContentProps={{\n          \"aria-describedby\": \"message-id\",\n          style: { background: amber[700] }\n        }}\n        message={\n          <span id=\"message-id\" className={classes.message}>\n            <InfoIcon className={clsx(classes.icon, classes.iconVariant)} />\n            {layers.value.msg}\n          </span>\n        }\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleClose}\n          >\n            <CloseIcon className={classes.icon} />\n          </IconButton>\n        ]}\n      />\n    );\n  }\n\n  return (\n    <>\n      {toast}\n      <DeckGL\n        initialViewState={viewState}\n        controller={true}\n        layers={isRight(layers) ? layers.value : []}\n      >\n        <StaticMap\n          key=\"static_map\"\n          width=\"100%\"\n          height=\"100%\"\n          mapStyle={\n            props.layerType !== LayerType.Choropleth\n              ? \"mapbox://styles/claudiuc/ck4j3z14e09hg1dmkpijn2kma\"\n              : \"mapbox://styles/claudiuc/ck4rj1g758emo1do5slyr0i09\"\n          }\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        />\n      </DeckGL>\n    </>\n  );\n};\n\nexport default ServiceMap;\n","import oboe from \"oboe\";\nimport {\n  MedicalServiceData,\n  MedicalServiceDataLayer,\n  ApiCode,\n  UatGeoJsonList\n} from \"../components/ServiceMap/ServiceMapSlice\";\n\nimport { ServiceType } from \"../components/ServiceMap/ServiceMapSlice\";\n\nconst VERSION = \"0.3.7\";\nconst BORDER_GEOJSON_VERSION = \"0.1.0\";\n\nconst getJsonPath = (type: string, file: string) =>\n  `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/national/${file}.${type}`;\n\nexport const fetchGeoJSON = async (\n  files: { file: string; type: ServiceType }[],\n  cb: (data: any) => void\n) => {\n  const type = \"geojson\";\n  const responses = files.map(({ file }) =>\n    fetch(\n      `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/${type}/${file}.${type}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        return json.features.map((service: any) => {\n          return {\n            ...service,\n            type: file\n          };\n        });\n      })\n  );\n\n  Promise.all(responses).then(results => {\n    const allServices = [].concat.apply([], results);\n    cb(allServices);\n  });\n};\n\nexport const streamJSON = (\n  files: ServiceType[],\n  onDone: (service: ServiceType, data: MedicalServiceDataLayer) => void,\n  onEach: (data: MedicalServiceData) => void,\n  onFail: (service: ServiceType, msg: string) => void\n) => {\n  const type = \"json\";\n  files.forEach(file => {\n    oboe(getJsonPath(type, file))\n      .node(\"{lat lng}\", (data: MedicalServiceData) => {\n        onEach(data);\n        return {\n          ...data,\n          type: file\n        };\n      })\n      .done((data: MedicalServiceData[]) => {\n        onDone(file, {\n          data,\n          status: {\n            code: ApiCode.OK\n          }\n        });\n      })\n      .fail(() => {\n        onFail(file, `failed loading data`);\n      });\n  });\n};\n\nexport const streamGeoJSON = (\n  type: \"uats\" | \"counties\",\n  onDone: (data: any) => void,\n  onFail: (msg: string) => void\n) => {\n  const file = \"uats_with_family_medicine_weights.json\";\n  oboe(\n    `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@${VERSION}/data/json/national/${file}`\n  )\n    .node(\"properties\", node => {\n      return {\n        natcode: node.natcode,\n        name: node.name,\n        countyCode: node.countyCode,\n        county: node.county,\n        pop2015: node.pop2015,\n        color: node.color\n      };\n    })\n    .done((data: UatGeoJsonList) => {\n      onDone(data);\n    })\n    .fail(() => {\n      onFail(`failed loading borders for ${type}`);\n    });\n};\n\nexport const streamCountyBorders = (\n  onDone: (data: any) => void,\n  onFail: (msg: string) => void\n) => {\n  oboe(\n    `https://cdn.jsdelivr.net/gh/civicnet/geojson-romania@${BORDER_GEOJSON_VERSION}/generated/counties.json`\n  )\n    .node(\"properties\", node => {\n      return {\n        name: node.name\n      };\n    })\n    .done((data: UatGeoJsonList) => {\n      onDone(data);\n    })\n    .fail(() => {\n      onFail(`failed loading borders for counties`);\n    });\n};\n","import { withStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport { ServiceTypeColor } from \"../ServiceMap\";\n\nexport const CustomSwitch = (color?: ServiceTypeColor) => {\n  let switchColor = color || \"#34495e\";\n\n  return withStyles({\n    switchBase: {\n      color: \"#CCC\",\n      \"&$checked\": {\n        color: switchColor\n      },\n      \"&$checked + $track\": {\n        backgroundColor: switchColor\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n};\n","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n  makeStyles,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Typography\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { toggleServiceType } from \"./SwitchListItemSlice\";\n\nimport {\n  ServiceTypeColorMap,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\n\nimport { CustomSwitch } from \"../CustomSwitch\";\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport { ServiceType, MedicalServiceData } from \"../ServiceMap/ServiceMapSlice\";\n\nconst useStyles = makeStyles(_ => ({\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  }\n}));\n\ninterface Props {\n  serviceType: ServiceType;\n}\n\nconst SwitchListItem: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { medicalServices } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const { serviceType } = props;\n\n  const handleToggle = (value: ServiceType) => () => {\n    dispatch(toggleServiceType(value));\n  };\n\n  const getCountFromDataArray = (\n    data: MedicalServiceData[],\n    service: ServiceType\n  ) => {\n    return data.reduce((acc, serviceData) => {\n      if (serviceData.type !== service) {\n        return acc;\n      }\n\n      return acc + 1;\n    }, 0);\n  };\n\n  const getCountForServiceType = (service: ServiceType) => {\n    const searchResultsCoerced = searchResults && searchResults[service];\n    const data = searchResultsCoerced\n      ? searchResultsCoerced.data\n      : medicalServices[service].data;\n    return getCountFromDataArray(data, service);\n  };\n\n  const ServiceSwitch =\n    layerType === LayerType.ScatterPlot\n      ? CustomSwitch(ServiceTypeColorMap[serviceType])\n      : CustomSwitch();\n\n  const isChecked =\n    services.indexOf(serviceType) !== -1 && layerType !== LayerType.Extruded;\n\n  return (\n    <ListItem classes={{ root: classes.listItemRoot }}>\n      <ListItemIcon>\n        <Icon\n          className={clsx(classes.serviceIcon, ServiceTypeIcons[serviceType])}\n        />\n      </ListItemIcon>\n      <ListItemText\n        id={ServiceTypeReadable[serviceType]}\n        primary={ServiceTypeReadable[serviceType]}\n        secondary={\n          <>\n            <Typography\n              variant=\"caption\"\n              component=\"span\"\n              style={{ color: isChecked ? \"inherit\" : \"#ccc\" }}\n            >\n              {getCountForServiceType(serviceType)} /\n            </Typography>\n            <Typography component=\"span\" variant=\"caption\">\n              {getCountFromDataArray(\n                medicalServices[serviceType].data,\n                serviceType\n              )}\n            </Typography>\n          </>\n        }\n      />\n      <ListItemSecondaryAction>\n        <ServiceSwitch\n          edge=\"end\"\n          disabled={layerType === LayerType.Extruded}\n          onChange={handleToggle(serviceType)}\n          checked={isChecked}\n          inputProps={{\n            \"aria-labelledby\": ServiceTypeReadable[serviceType]\n          }}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default SwitchListItem;\n","import React from \"react\";\nimport {\n  makeStyles,\n  fade,\n  InputBase,\n  IconButton,\n  Badge,\n  Icon,\n  Card,\n  CardContent,\n  List,\n  Typography\n} from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\n\nimport {\n  ServiceType,\n  MedicalServiceDataLayerMap\n} from \"../ServiceMap/ServiceMapSlice\";\nimport SwitchListItem from \"../SwitchListItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuery, performQuery } from \"./SearchGroupSlice\";\nimport { RootState } from \"../../store/rootReducer\";\nimport debounce from \"debounce\";\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\"\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  inputRoot: {\n    color: \"inherit\"\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: 325\n    }\n  },\n  filterOpen: {\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    maxHeight: 345\n  },\n  filterClose: {\n    maxHeight: 0,\n    overflowY: \"hidden\",\n    transition: theme.transitions.create(\"max-height\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  filterCard: {\n    width: 350,\n    right: 0,\n    position: \"absolute\",\n    paddingBottom: 0\n  },\n  filterCardContent: {\n    paddingBottom: 0\n  }\n}));\n\nconst SearchGroup: React.FC = () => {\n  const classes = useStyles();\n  const [isFilterOpen, setIsFilterOpen] = React.useState(false);\n\n  const dispatch = useDispatch();\n\n  const { medicalServices } = useSelector(\n    (state: RootState) => state.serviceMapReducer\n  );\n  const { searchResults, query } = useSelector(\n    (state: RootState) => state.searchGroupReducer\n  );\n\n  const toggleFilters = () => {\n    setIsFilterOpen(!isFilterOpen);\n  };\n\n  const debouncedQuery = debounce(\n    (data: MedicalServiceDataLayerMap) => dispatch(performQuery(data)),\n    250\n  );\n  const handleChangeQuery = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (isFilterOpen) {\n      setIsFilterOpen(false);\n    }\n    dispatch(setQuery(ev.target.value));\n    debouncedQuery(medicalServices);\n  };\n\n  const handleSubmitQuery = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.keyCode === 13) {\n      debouncedQuery.clear();\n      dispatch(performQuery(medicalServices));\n    }\n  };\n\n  const resultCount =\n    searchResults &&\n    Object.values(searchResults)\n      .map(res => res && res.data.length)\n      .reduce((acc: number, count) => acc + Number(count), 0);\n\n  return (\n    <>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          placeholder=\"Cauta servicii medicale (ex: radiologie)\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput\n          }}\n          onChange={handleChangeQuery}\n          onKeyDown={handleSubmitQuery}\n          inputProps={{ \"aria-label\": \"search\" }}\n        />\n        <IconButton\n          aria-label=\"filtreaza\"\n          color=\"inherit\"\n          onClick={toggleFilters}\n        >\n          <Badge badgeContent={0} color=\"secondary\">\n            <Icon className=\"far fa-filter\" style={{ fontSize: 16 }} />\n          </Badge>\n        </IconButton>\n        <Card\n          className={clsx(classes.filterCard, {\n            [classes.filterOpen]: isFilterOpen,\n            [classes.filterClose]: !isFilterOpen\n          })}\n        >\n          <CardContent\n            classes={{ root: classes.filterCardContent }}\n            style={{ paddingBottom: 0 }}\n          >\n            <List dense={true}>\n              {Object.values(ServiceType).map(type => (\n                <SwitchListItem key={type} serviceType={type} />\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      </div>\n      {query.length > 3 && (\n        <Typography style={{ fontSize: 12, fontStyle: \"italic\", opacity: 0.7 }}>\n          {resultCount} rezultate pentru \"{query}\"\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default SearchGroup;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    top: 90,\n    left: 100,\n    position: \"absolute\",\n    zIndex: 2\n  }\n}));\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nconst Container: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, props.className)} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { makeStyles, Card, CardContent, Typography } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { ComponentWithInheritedProps } from \"../../types/interfaces/CommonComponentProps\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: \"100%\"\n  }\n}));\n\nconst InfoCard: React.FC<ComponentWithInheritedProps> = props => {\n  const classes = useStyles();\n\n  return (\n    <Card className={clsx(classes.card, props.className)} style={props.style}>\n      <CardContent>\n        <Typography variant=\"h6\" component=\"p\" style={{ paddingBottom: 20 }}>\n          Aplicația{\" \"}\n          <a\n            href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            navigatorilor de pacienți oncologici\n          </a>{\" \"}\n          din România.\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Poți explora harta prin hover și click pe punctele afișate, și prin\n          selecția categoriilor de furnizori medicali pe care dorești să îi\n          afișezi. Datele sunt preluate pentru Municipiul București{\" \"}\n          <a\n            href=\"http://www.cnas.ro/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            de pe site-ul CNAS\n          </a>\n          .\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Adițional, pentru fiecare furnizor afișat,{\" \"}\n          <a\n            href=\"https://github.com/civicnet/cancer-atlas-scripts\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            am generat coordonatele GPS\n          </a>{\" \"}\n          pentru afișarea pe hartă.\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n          Codul sursă complet este disponibil pe{\" \"}\n          <a\n            href=\"https://github.com/civicnet/cancer-atlas\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n          .\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoCard;\n","import React from \"react\";\nimport { makeStyles, IconButton, Icon } from \"@material-ui/core\";\nimport Container from \"./Container\";\nimport InfoCard from \"../components/InfoCard\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  infoCard: {\n    width: 350,\n    paddingTop: 20\n  }\n}));\n\nconst About: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <IconButton\n        component={Link}\n        to=\"/\"\n        style={{ position: \"absolute\", top: 4, right: 4, zIndex: 150 }}\n      >\n        <Icon className=\"far fa-times\" style={{ fontSize: 16 }} />\n      </IconButton>\n      <InfoCard className={classes.infoCard} style={{ paddingRight: 28 }} />\n    </Container>\n  );\n};\n\nexport default About;\n","import React, { useEffect } from \"react\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  Divider,\n  Icon,\n  IconButton\n} from \"@material-ui/core\";\nimport Container from \"./Container\";\nimport Octokit from \"@octokit/rest\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    width: 350,\n    height: \"85vh\",\n    overflowY: \"auto\",\n    paddingTop: 20\n  },\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  },\n  inline: {\n    display: \"inline\"\n  }\n}));\n\ninterface Commit {\n  sha: string;\n  commit: {\n    message: string;\n    url: string;\n    author: {\n      date: string;\n    };\n  };\n  author: {\n    avatar_url: string;\n    login: string;\n    url: string;\n  };\n}\n\nconst octokit = new Octokit({\n  log: {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error\n  }\n});\n\nconst Changelog: React.FC = () => {\n  const classes = useStyles();\n  const [commits, setCommits] = React.useState();\n\n  useEffect(() => {\n    (async function _() {\n      const repsonse = await octokit.repos.listCommits({\n        owner: \"CivicNet\",\n        repo: \"cancer-atlas\",\n        per_page: 100\n      });\n      setCommits(repsonse ? repsonse.data : null);\n    })();\n  }, []);\n\n  if (!commits) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <IconButton\n        component={Link}\n        to=\"/\"\n        style={{ position: \"absolute\", top: 4, right: 4, zIndex: 150 }}\n      >\n        <Icon className=\"far fa-times\" style={{ fontSize: 16 }} />\n      </IconButton>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography variant=\"h6\">\n            Ultimele {commits.length} actualizari pe{\" \"}\n            <a\n              href=\"https://github.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </Typography>\n          <List className={classes.root} dense>\n            {commits.map((commit: Commit) => (\n              <React.Fragment key={commit.sha}>\n                <ListItem alignItems=\"flex-start\" disableGutters={true}>\n                  <ListItemAvatar>\n                    <Avatar\n                      alt={commit.author.login}\n                      src={commit.author.avatar_url}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={commit.author.login}\n                    secondary={\n                      <a\n                        href={commit.commit.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{\n                          textDecoration: \"none\",\n                          color: \"inherit\"\n                        }}\n                      >\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          color=\"textPrimary\"\n                        >\n                          {new Intl.DateTimeFormat(\"ro-RO\").format(\n                            new Date(commit.commit.author.date)\n                          )}\n                        </Typography>\n                        {` — ${commit.commit.message}`}\n                      </a>\n                    }\n                  />\n                </ListItem>\n                <Divider variant=\"inset\" component=\"li\" />\n              </React.Fragment>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Changelog;\n","import React from \"react\";\nimport { Icon } from \"@material-ui/core\";\nimport About from \"../containers/About\";\nimport Changelog from \"../containers/Changelog\";\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    main: () => null,\n    icon: <Icon className=\"fas fa-map-marker-alt\" />,\n    text: \"Atlas\"\n  },\n  {\n    path: \"/despre\",\n    main: () => <About />,\n    icon: <Icon className=\"fas fa-info-circle\" />,\n    text: \"Despre\"\n  },\n  {\n    path: \"/changelog\",\n    main: () => <Changelog />,\n    icon: <Icon className=\"fas fa-clipboard-list\" />,\n    text: \"Actualizari\"\n  }\n];\n\nexport default routes;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { ServiceTypeIcons, ServiceTypeReadable } from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { ServiceType, MedicalServiceData } from \"../ServiceMap/ServiceMapSlice\";\nimport { ScreenCoordinates } from \"../../types/interfaces/ScreenCoordinates\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: MedicalServiceData;\n  pos?: ScreenCoordinates;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem disableGutters dense>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem disableGutters dense>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  let transformX = \"-50%\";\n  if (props.pos) {\n    if (props.pos.x < 220) {\n      transformX = \"0%\";\n    }\n\n    if (props.pos.x > window.innerWidth - 150) {\n      transformX = \"-100%\";\n    }\n  }\n\n  const transformY =\n    props.pos && props.pos.y < 350 ? \"20px\" : \"calc(-100% - 40px)\";\n\n  const posStyle = props.pos\n    ? {\n        position: \"absolute\" as any,\n        top: props.pos.y,\n        left: props.pos.x,\n        zIndex: 10,\n        width: 300,\n        transform: `translate(${transformX}, ${transformY})`\n      }\n    : {};\n\n  return (\n    <Card className={classes.card} style={{ ...props.style, ...posStyle }}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true} disablePadding={true}>\n          <ListItem disableGutters divider dense>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem disableGutters dense>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem disableGutters dense>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem disableGutters dense>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import React from \"react\";\n\nimport { /* makeStyles, */ Icon } from \"@material-ui/core\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { setLayerType, LayerType } from \"./LayerPickerSlice\";\nimport ScatterPlotTwoToneIcon from \"@material-ui/icons/ScatterPlotTwoTone\";\n\ninterface LayerTypeData {\n  title: string;\n  icon: string | JSX.Element;\n}\n\ntype LayerTypeList = {\n  [key in LayerType]: LayerTypeData;\n};\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst LayerPicker: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const handleChangeLayerType = (_: any, newLayerType: LayerType) => {\n    dispatch(setLayerType(newLayerType));\n  };\n\n  const layerTypePickerData: LayerTypeList = {\n    [LayerType.ScatterPlot]: {\n      icon: <ScatterPlotTwoToneIcon />,\n      title: \"Vezi furnizorii de servicii medicale ca puncte pe hartă\"\n    },\n    [LayerType.Icon]: {\n      icon: \"fad fa-map-marker-alt\",\n      title: \"Vezi furnizorii de servicii medicale agregati dupa densitate\"\n    },\n    [LayerType.Heatmap]: {\n      icon: \"fad fa-steak\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de heatmap\"\n    },\n    [LayerType.Grid]: {\n      icon: \"fad fa-th\",\n      title:\n        \"Vezi distribuția furnizorilor de servicii medicale sub formă de grid\"\n    },\n    [LayerType.Extruded]: {\n      icon: \"fad fa-cube\",\n      title: \"Vezi clădirile în care au puncte de lucru medicii de familie\"\n    },\n    [LayerType.Choropleth]: {\n      icon: \"fad fa-globe-europe\",\n      title:\n        \"Vei proportia dintre serviciile medicale si populatiile UAT-urilor\"\n    }\n  };\n\n  return (\n    <div\n      style={{ ...props.style, flex: 1, display: \"flex\" }}\n      className={props.className}\n    >\n      <ToggleButtonGroup\n        value={layerType}\n        exclusive={true}\n        onChange={handleChangeLayerType}\n        size=\"small\"\n        aria-label=\"text alignment\"\n        style={{ flexDirection: \"column\" }}\n      >\n        {Object.entries(layerTypePickerData).map(([key, data]) => (\n          <ToggleButton\n            key={key}\n            value={key}\n            aria-label={key}\n            title={data.title}\n          >\n            {typeof data.icon === \"string\" ? (\n              <Icon className={data.icon} style={{ width: \"unset\" }} />\n            ) : (\n              data.icon\n            )}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default LayerPicker;\n","import React from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\n\nimport { LayerType } from \"../LayerPicker/LayerPickerSlice\";\nimport {\n  aggregateColorRange,\n  choroplethColorRange\n} from \"../ServiceMap/layers\";\nimport chroma from \"chroma-js\";\nimport { Icon, makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\ninterface Props {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport const UnivariateLegend: React.FC<Props> = props => {\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  if (![LayerType.Heatmap, LayerType.Grid].includes(layerType)) {\n    return null;\n  }\n\n  return (\n    <div className={props.className} style={props.style}>\n      <div style={{ flex: 1, display: \"flex\", border: \"2px solid #FFF\" }}>\n        {aggregateColorRange.map((color, idx) => (\n          <div\n            key={`legend-${color}-${idx}`}\n            style={{\n              flex: 1,\n              backgroundColor: chroma(color).hex(),\n              display: \"flex\",\n              textAlign: \"center\"\n            }}\n          >\n            {idx === 0 && (\n              <Icon\n                title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n                className=\"fal fa-long-arrow-alt-down\"\n                style={{ color: \"#fff\", alignSelf: \"center\" }}\n              />\n            )}\n            {idx === 5 && (\n              <Icon\n                title=\"Zone cu număr mai mare de furnizori de servicii medicale\"\n                className=\"fal fa-long-arrow-alt-up\"\n                style={{ color: \"#333\", alignSelf: \"center\" }}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst BIVARIATE_SIZE = 90;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: \"relative\",\n    transform: \"translate(50%, -50%)\",\n    width: \"unset !important\",\n    left: \"0px !important\",\n    bottom: \"-70px !important\",\n    padding: \"50px\",\n    borderRadius: \"5px\",\n    background: \"rgba(255,255,255,.5)\"\n  },\n  legendContainer: {\n    // border: \"2px solid #FFF\",\n    height: BIVARIATE_SIZE,\n    width: BIVARIATE_SIZE,\n    position: \"relative\",\n    transform: \"rotate(45deg)\"\n  },\n  legendLayer: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    display: \"flex\"\n    // transform: \"rotate(45deg)\"\n  },\n  horizontalLayer: {\n    flexDirection: \"column\"\n  },\n  verticalLayer: {\n    flexDirection: \"row\",\n    mixBlendMode: \"multiply\"\n  },\n  legendRow: {\n    display: \"flex\",\n    height: BIVARIATE_SIZE / 3,\n    flex: 1\n  },\n  legendColumn: {\n    display: \"flex\",\n    width: BIVARIATE_SIZE / 3,\n    flex: 1\n  },\n  legendLabel: {\n    fontSize: 16,\n    position: \"absolute\",\n    fontWeight: 400,\n    display: \"flex\",\n    color: \"#333\"\n  },\n  labelBottom: {\n    bottom: 0,\n    transform: \"translate(0%, 120%)\"\n  },\n  labelLeft: {\n    transform: \"rotate(-90deg) translate(-30%, -285%)\"\n  }\n}));\n\nexport const BivariateLegend: React.FC<Props> = props => {\n  const classes = useStyles();\n\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  if (layerType !== LayerType.Choropleth) {\n    return null;\n  }\n\n  return (\n    <div className={clsx(classes.root, props.className)} style={props.style}>\n      <div className={classes.legendContainer}>\n        <Typography className={clsx(classes.labelBottom, classes.legendLabel)}>\n          Medici\n          <Icon\n            title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n            className=\"fal fa-long-arrow-alt-right\"\n            style={{ color: \"#333\", alignSelf: \"center\", marginLeft: 12 }}\n          />\n        </Typography>\n        <Typography className={clsx(classes.labelLeft, classes.legendLabel)}>\n          Populatie\n          <Icon\n            title=\"Zone cu număr mai mic de furnizori de servicii medicale\"\n            className=\"fal fa-long-arrow-alt-right\"\n            style={{ color: \"#333\", alignSelf: \"center\", marginLeft: 12 }}\n          />\n        </Typography>\n        <div className={clsx(classes.horizontalLayer, classes.legendLayer)}>\n          {choroplethColorRange.populationAxis.reverse().map(color => (\n            <div\n              key={JSON.stringify(color)}\n              className={classes.legendRow}\n              style={{\n                backgroundColor: chroma(color).hex()\n              }}\n            />\n          ))}\n        </div>\n        <div className={clsx(classes.verticalLayer, classes.legendLayer)}>\n          {choroplethColorRange.medicalServicesAxis.map(color => (\n            <div\n              key={JSON.stringify(color)}\n              className={classes.legendColumn}\n              style={{\n                backgroundColor: chroma(color).hex()\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Legend: React.FC<Props> = props => {\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  switch (layerType) {\n    case LayerType.Grid:\n    case LayerType.Heatmap:\n      return <UnivariateLegend {...props} />;\n    case LayerType.Choropleth:\n      return <BivariateLegend {...props} />;\n  }\n\n  return null;\n};\n\nexport default Legend;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/rootReducer\";\nimport ServiceMap from \"../components/ServiceMap\";\nimport Tooltip from \"../components/Tooltip\";\nimport LayerPicker from \"../components/LayerPicker\";\nimport Legend from \"../components/Legend\";\nimport { MedicalServiceData } from \"../components/ServiceMap/ServiceMapSlice\";\nimport { ScreenCoordinates } from \"../types/interfaces/ScreenCoordinates\";\n\nconst useStyles = makeStyles(theme => ({\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 74,\n    right: 16,\n    // minWidth: 345,\n    maxWidth: 300\n  },\n  layerPicker: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n    marginTop: 20,\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    bottom: 20,\n    right: 20,\n    zIndex: 1\n  }\n}));\n\nconst Atlas: React.FC = () => {\n  const classes = useStyles();\n\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n\n  const { services } = useSelector(\n    (state: RootState) => state.switchListItemReducer\n  );\n  const { layerType } = useSelector(\n    (state: RootState) => state.layerPickerReducer\n  );\n\n  const onServiceHover = (\n    service: MedicalServiceData,\n    pos: ScreenCoordinates\n  ) => {\n    setTooltip({ service, pos });\n  };\n\n  const onServiceClick = (obj: MedicalServiceData) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  return (\n    <>\n      <LayerPicker className={classes.layerPicker} />\n      <Legend\n        style={{\n          position: \"absolute\",\n          left: 96,\n          bottom: 20,\n          zIndex: 1,\n          width: 150\n        }}\n      />\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n      </div>\n      {tooltip && (\n        <Tooltip\n          service={tooltip.service}\n          pos={tooltip.pos}\n          style={{ marginTop: 20 }}\n        />\n      )}\n      <ServiceMap\n        services={services}\n        onHover={onServiceHover}\n        onClick={onServiceClick}\n        layerType={layerType}\n      />\n    </>\n  );\n};\n\nexport default Atlas;\n","import React from \"react\";\n\nimport { loadCSS } from \"fg-loadcss\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  List,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Drawer,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme,\n  Badge,\n  Icon,\n  Popover,\n  Box,\n  Typography\n} from \"@material-ui/core\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nimport clsx from \"clsx\";\nimport Logo from \"./components/Logo\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport SearchGroup from \"./components/SearchGroup\";\nimport routes from \"./routes\";\n\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Atlas from \"./containers/Atlas\";\n\nconst drawerWidth = 240;\nexport const APP_BAR_COLOR = \"#222f3e\";\n\nconst useStyles = makeStyles(theme => ({\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    backgroundColor: APP_BAR_COLOR\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\"\n  },\n  drawerPaper: {\n    // backgroundColor: APP_BAR_COLOR\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1\n    }\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar\n  },\n  toolbarIcons: {\n    display: \"flex\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuItem: {\n    // color: \"#FFF\",\n    // fontWeight: \"bold\",\n    // opacity: 0.7\n  }\n}));\n\nconst App: React.FC<RouteComponentProps> = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setIsDrawerOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setIsDrawerOpen(false);\n  };\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: isDrawerOpen\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: isDrawerOpen\n            })}\n          >\n            <MenuIcon style={{ color: \"#fff\" }} />\n          </IconButton>\n          <Logo />\n          <SearchGroup />\n          <div className={classes.grow} />\n          <div className={classes.toolbarIcons}>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n              {popupState => (\n                <>\n                  <IconButton\n                    aria-label=\"despre proiect\"\n                    color=\"inherit\"\n                    {...bindTrigger(popupState)}\n                  >\n                    <Badge badgeContent={0} color=\"secondary\">\n                      <Icon className=\"fas fa-question-circle\" />\n                    </Badge>\n                  </IconButton>\n                  <Popover\n                    {...bindPopover(popupState)}\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\"\n                    }}\n                    transformOrigin={{\n                      vertical: \"top\",\n                      horizontal: \"center\"\n                    }}\n                  >\n                    <Box p={2} style={{ maxWidth: 320 }}>\n                      <Typography variant=\"body1\">\n                        Un proiect{\" \"}\n                        <a\n                          href=\"https://civicnet.ro\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          CivicNet\n                        </a>{\" \"}\n                        și{\" \"}\n                        <a\n                          href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Asociația Sănătate pentru Comunitate\n                        </a>\n                        .\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Ne propunem să dezvoltăm{\" \"}\n                        <strong>\n                          prima aplicație dedicată pacienților de cancer\n                          pulmonar din România\n                        </strong>\n                        , navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Aplicația va conține informații importante despre\n                        traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de{\" \"}\n                        <a\n                          href=\"https://sanatateabuzoiana.ro/primul-ghid-al-supravietuitorului-de-cancer-localizat-la-nivelul-capului-si-gatului/#.XgDw6sYzZhE\"\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          ghiduri pentru pacienți.\n                        </a>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        În momentul de față, aplicația se află în stadiul de\n                        prototip interactiv. Ne puteți urmări pe Facebook pentru\n                        a fi la curent cu ultimele noutăți.\n                      </Typography>\n                    </Box>\n                  </Popover>\n                </>\n              )}\n            </PopupState>\n            <IconButton\n              aria-label=\"GitHub\"\n              color=\"inherit\"\n              href=\"https://github.com/civicnet/cancer-atlas/\"\n            >\n              <Badge badgeContent={0} color=\"secondary\">\n                <Icon className=\"fab fa-github\" />\n              </Badge>\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: isDrawerOpen,\n          [classes.drawerClose]: !isDrawerOpen\n        })}\n        classes={{\n          paper: clsx(classes.drawerPaper, {\n            [classes.drawerOpen]: isDrawerOpen,\n            [classes.drawerClose]: !isDrawerOpen\n          })\n        }}\n      >\n        <div className={classes.toolbar}>\n          <a\n            href=\"https://civicnet.ro\"\n            style={{ display: \"flex\", flex: 1, justifyContent: \"center\" }}\n          >\n            <img\n              src=\"CivicNet_Logo.svg\"\n              style={{ height: 32 }}\n              alt=\"CivicNet Logo\"\n            />\n          </a>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {routes.map(route => (\n            <ListItem\n              button\n              key={route.text}\n              component={Link}\n              to={route.path}\n              className={classes.menuItem}\n              selected={props.location.pathname === route.path}\n            >\n              <ListItemIcon\n                style={{ marginLeft: 12 }}\n                className={classes.menuItem}\n              >\n                {route.icon}\n              </ListItemIcon>\n              <ListItemText primary={route.text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main>\n        <Atlas />\n        <Switch>\n          {routes.map((route, index) => (\n            <Route\n              key={index}\n              path={route.path}\n              exact={route.exact}\n              children={<route.main />}\n            />\n          ))}\n        </Switch>\n      </main>\n    </>\n  );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}