{"version":3,"sources":["components/ServiceMap/index.tsx","components/ServiceMap/layers.ts","App.tsx","components/Tooltip/index.tsx","components/CustomSwitch/index.tsx","serviceWorker.ts","index.tsx"],"names":["ServiceType","getAggregateColorRange","chroma","rgb","getScatterplot","pointData","props","ScatterplotLayer","id","data","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","d","lng","lat","getRadius","getFillColor","ServiceTypeColorMap","type","getLineColor","onHover","object","onClick","getHeatmap","HeatmapLayer","colorRange","getGrid","ScreenGridLayer","cellSize","cellSizePixels","colorAggregation","sizeAggregation","coverage","colorScaleType","getExtruded","getTooltipData","address","properties","mf_address","email","mf_email","medicName","mf_medicName","phone","mf_phone","supplierName","mf_supplierName","FamilyMedicine","GeoJsonLayer","extruded","wireframe","getPolygon","features","getElevation","getLineWidth","INITIAL_VIEW_STATE","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","minZoom","bearing","pitch","LayerType","ServiceTypeReadable","HomeCare","Imaging","Laboratory","ServiceTypeBuildings","ServiceTypeIcons","ServiceMap","useState","setPointData","buildingData","setBuildingData","viewState","setViewState","useEffect","layerType","Extruded","files","cb","a","async","responses","map","file","fetch","then","response","json","service","Promise","all","results","allServices","concat","apply","geojsonApi","filter","Boolean","api","services","v","layer","ScatterPlot","Heatmap","Grid","getLayer","onViewStateChange","interactionState","oldViewState","controller","layers","mapStyle","mapboxApiAccessToken","process","useStyles","makeStyles","card","title","fontSize","icon","textAlign","Tooltip","classes","differentiator","ListItem","ListItemIcon","Icon","className","clsx","ListItemText","primary","specialty","Card","style","CardContent","Typography","color","gutterBottom","List","dense","name","CardActions","onClose","IconButton","size","marginLeft","theme","aside","zIndex","position","top","left","minWidth","maxWidth","tooltipContainer","right","filterList","marginTop","gradientText","background","WebkitBackgroundClip","WebkitTextFillColor","branding","fontWeight","lineHeight","textTransform","marginBottom","brandingSymbol","marginRight","bullet","display","margin","transform","pos","serviceIcon","beta","fontFamily","listItemRoot","paddingLeft","popover","pointerEvents","paper","padding","spacing","App","React","checked","setChecked","tooltip","setTooltip","pinnedTooltip","setPinnedTooltip","setLayerType","loadCSS","document","querySelector","variant","component","href","target","rel","Object","values","value","ServiceSwitch","withStyles","switchBase","backgroundColor","track","Switch","key","root","ListItemSecondaryAction","edge","disabled","onChange","currentIndex","indexOf","newChecked","push","splice","inputProps","Button","popupId","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","flex","ToggleButtonGroup","exclusive","_","newLayerType","aria-label","ToggleButton","border","idx","hex","alignSelf","obj","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.837768db.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport DeckGL from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { LayerType } from \"../../App\";\nimport { getLayer } from \"./layers\";\n\nconst INITIAL_VIEW_STATE = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n  longitude: 26.1,\n  latitude: 44.4368449,\n  zoom: 11,\n  maxZoom: 20,\n  minZoom: 1,\n  bearing: 0,\n  pitch: 0\n};\n\nexport enum ServiceType {\n  FamilyMedicine = \"mf_bucuresti_with_loc_min_flat\",\n  Laboratory = \"laboratoare_bucuresti_with_loc_min_flat\",\n  HomeCare = \"ingrijiri_domiciliu_bucuresti_with_loc_min_flat\",\n  Imaging = \"imagistica_bucuresti_with_loc_min_flat\"\n}\n\nexport type ServiceTypeIndexed<T> = {\n  [key in ServiceType]: T;\n};\n\nexport type ServiceTypeColor = \"#1abc9c\" | \"#3498db\" | \"#9b59b6\" | \"#e67e22\";\n\nexport const ServiceTypeReadable: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"Medici de familie\",\n  [ServiceType.HomeCare]: \"Îngrijire la domiciliu\",\n  [ServiceType.Imaging]: \"Servicii de imagistică\",\n  [ServiceType.Laboratory]: \"Laboratoare de analiză\"\n};\n\nexport const ServiceTypeBuildings: ServiceTypeIndexed<string | null> = {\n  [ServiceType.FamilyMedicine]: \"mf_buildings_with_attrs_epsg4326\",\n  [ServiceType.HomeCare]: null,\n  [ServiceType.Imaging]: null,\n  [ServiceType.Laboratory]: null\n};\n\nexport const ServiceTypeIcons: ServiceTypeIndexed<string> = {\n  [ServiceType.FamilyMedicine]: \"fal fa-user-md\",\n  [ServiceType.HomeCare]: \"fal fa-home-heart\",\n  [ServiceType.Imaging]: \"fal fa-lungs\",\n  [ServiceType.Laboratory]: \"fal fa-flask\"\n};\n\nexport const ServiceTypeColorMap: ServiceTypeIndexed<ServiceTypeColor> = {\n  [ServiceType.FamilyMedicine]: \"#1abc9c\",\n  [ServiceType.HomeCare]: \"#3498db\",\n  [ServiceType.Imaging]: \"#9b59b6\",\n  [ServiceType.Laboratory]: \"#e67e22\"\n};\n\nexport interface ServiceObject {\n  type: ServiceType;\n  [key: string]: string;\n}\n\nexport interface LayerProps {\n  onHover: (obj: ServiceObject) => void;\n  onClick: (obj: ServiceObject) => void;\n  layerType: LayerType;\n}\n\ninterface Props {\n  services: ServiceType[];\n}\n\nconst ServiceMap: React.FC<Props & LayerProps> = (\n  props: Props & LayerProps\n) => {\n  const [pointData, setPointData] = useState();\n  const [buildingData, setBuildingData] = useState();\n  const [viewState, setViewState] = useState(INITIAL_VIEW_STATE);\n\n  const api = async (\n    files: ServiceType[],\n    cb: (data: any) => void,\n    type: \"json\" | \"geojson\" = \"json\"\n  ) => {\n    const responses = files.map(file =>\n      fetch(\n        `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@0.1.1/data/${type}/${file}.${type}`\n      )\n        .then(response => response.json())\n        .then(json => {\n          return json.map((service: any) => {\n            return {\n              ...service,\n              type: file\n            };\n          });\n        })\n    );\n\n    Promise.all(responses).then(results => {\n      const allServices = [].concat.apply([], results);\n      cb(allServices);\n    });\n  };\n\n  const geojsonApi = async (\n    files: { file: string; type: ServiceType }[],\n    cb: (data: any) => void,\n    type: \"json\" | \"geojson\" = \"geojson\"\n  ) => {\n    const responses = files.map(({ file }) =>\n      fetch(\n        `https://cdn.jsdelivr.net/gh/civicnet/cancer-atlas-scripts@0.1.1/data/${type}/${file}.${type}`\n      )\n        .then(response => response.json())\n        .then(json => {\n          return json.features.map((service: any) => {\n            return {\n              ...service,\n              type: file\n            };\n          });\n        })\n    );\n\n    Promise.all(responses).then(results => {\n      const allServices = [].concat.apply([], results);\n      cb(allServices);\n    });\n  };\n\n  useEffect(() => {\n    if (buildingData) {\n      return;\n    }\n\n    if (props.layerType === LayerType.Extruded) {\n      const files = [\n        {\n          file: ServiceTypeBuildings[ServiceType.FamilyMedicine],\n          type: ServiceType.FamilyMedicine\n        }\n      ].filter(Boolean) as { file: string; type: ServiceType }[];\n\n      geojsonApi(files, setBuildingData, \"geojson\");\n    }\n  }, [props.layerType, buildingData]);\n\n  useEffect(() => {\n    api(props.services, setPointData);\n  }, [props.services]);\n\n  useEffect(() => {\n    if (props.layerType === LayerType.Extruded) {\n      setViewState(v => ({\n        ...v,\n        zoom: 15.5,\n        pitch: 45\n      }));\n    } else {\n      setViewState(v => ({\n        ...v,\n        zoom: 11,\n        pitch: 0\n      }));\n    }\n  }, [props.layerType]);\n\n  if (!pointData) {\n    return null;\n  }\n\n  const layer = getLayer(\n    props.layerType !== LayerType.Extruded ? pointData : buildingData,\n    props\n  );\n\n  const handleViewStateChange = ({\n    viewState,\n    interactionState,\n    oldViewState\n  }: any) => {\n    setViewState(viewState);\n  };\n\n  return (\n    <DeckGL\n      viewState={viewState}\n      onViewStateChange={handleViewStateChange}\n      controller={true}\n      layers={[layer]}\n    >\n      <StaticMap\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/claudiuc/ck4j3z14e09hg1dmkpijn2kma\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      />\n    </DeckGL>\n  );\n};\n\nexport default ServiceMap;\n","import { LayerProps, ServiceTypeColorMap, ServiceType } from \".\";\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\nimport { HeatmapLayer } from \"@deck.gl/aggregation-layers\";\nimport { ScreenGridLayer } from \"@deck.gl/aggregation-layers\";\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\n\nimport chroma from \"chroma-js\";\nimport { LayerType } from \"../../App\";\n\nexport const getAggregateColorRange = () => [\n  chroma(\"#5A1846\").rgb(),\n  chroma(\"#900C3F\").rgb(),\n  chroma(\"#C70039\").rgb(),\n  chroma(\"#E3611C\").rgb(),\n  chroma(\"#F1920E\").rgb(),\n  chroma(\"#FFC300\").rgb()\n];\n\nexport const getLayer = (data: any, props: LayerProps) => {\n  switch (props.layerType) {\n    case LayerType.ScatterPlot:\n      return getScatterplot(data, props);\n    case LayerType.Heatmap:\n      return getHeatmap(data, props);\n    case LayerType.Grid:\n      return getGrid(data, props);\n    case LayerType.Extruded:\n      return getExtruded(data, props);\n    default:\n      return getScatterplot(data, props);\n  }\n};\n\nconst getScatterplot = (pointData: any, props: LayerProps) => {\n  return new ScatterplotLayer({\n    id: \"ScatterplotLayer\",\n    data: pointData,\n    pickable: true,\n    opacity: 0.6,\n    stroked: true,\n    filled: true,\n    radiusScale: 10,\n    radiusMinPixels: 5,\n    radiusMaxPixels: 20,\n    lineWidthMinPixels: 1,\n    getPosition: (d: any) => [d.lng, d.lat],\n    getRadius: 12,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[d.type as ServiceType]).rgb(),\n    getLineColor: [0, 0, 0],\n    onHover: (d: any) => props.onHover(d.object),\n    onClick: (d: any) => props.onClick(d.object)\n  });\n};\n\nconst getHeatmap = (pointData: any, props: LayerProps) => {\n  return new HeatmapLayer({\n    id: \"HeatmapLayer\",\n    data: pointData,\n    colorRange: getAggregateColorRange(),\n    opacity: 0.5,\n    getPosition: (d: any) => [d.lng, d.lat]\n  });\n};\n\nconst getGrid = (pointData: any, props: LayerProps) => {\n  return new ScreenGridLayer({\n    id: \"ScreenGridLayer\",\n    data: pointData,\n    cellSize: 500,\n    colorRange: getAggregateColorRange(),\n    cellSizePixels: 40,\n    colorAggregation: \"count\",\n    sizeAggregation: \"count\",\n    coverage: 0.75,\n    opacity: 0.5,\n    colorScaleType: \"quantile\",\n    getPosition: (d: any) => [d.lng, d.lat]\n  });\n};\n\nconst getExtruded = (pointData: any, props: LayerProps) => {\n  const getTooltipData = (d: any) => ({\n    address: d.properties.mf_address,\n    email: d.properties.mf_email,\n    medicName: d.properties.mf_medicName,\n    phone: d.properties.mf_phone,\n    supplierName: d.properties.mf_supplierName,\n    type: ServiceType.FamilyMedicine\n  });\n\n  return new GeoJsonLayer({\n    id: \"GeoJsonLayer\",\n    data: pointData,\n    pickable: true,\n    extruded: true,\n    stroked: true,\n    filled: true,\n    wireframe: true,\n    lineWidthMinPixels: 1,\n    opacity: 0.7,\n    getPolygon: (d: any) => ({\n      type: \"FeatureCollection\",\n      features: [d]\n    }),\n    getElevation: (d: any) => 15,\n    getFillColor: (d: any) =>\n      chroma(ServiceTypeColorMap[ServiceType.FamilyMedicine]).rgb(),\n    getLineColor: [80, 80, 80],\n    getLineWidth: 1,\n    onHover: (d: any) =>\n      d.object\n        ? props.onHover(getTooltipData(d.object))\n        : props.onHover(null as any),\n    onClick: (d: any) =>\n      d.object\n        ? props.onClick(getTooltipData(d.object))\n        : props.onClick(null as any)\n  });\n};\n","import React from \"react\";\n\nimport clsx from \"clsx\";\nimport { loadCSS } from \"fg-loadcss\";\n\nimport ServiceMap, {\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable,\n  ServiceTypeColorMap,\n  ServiceObject\n} from \"./components/ServiceMap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Icon,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Popover,\n  Box\n} from \"@material-ui/core\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\n\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nimport { CustomSwitch } from \"./components/CustomSwitch\";\nimport Tooltip from \"./components/Tooltip\";\nimport { getAggregateColorRange } from \"./components/ServiceMap/layers\";\nimport chroma from \"chroma-js\";\n\nconst useStyles = makeStyles(theme => ({\n  aside: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    left: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  tooltipContainer: {\n    zIndex: 10,\n    position: \"absolute\",\n    top: 20,\n    right: 20,\n    minWidth: 345,\n    maxWidth: 345\n  },\n  filterList: {\n    marginTop: 20\n  },\n  gradientText: {\n    background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n    WebkitBackgroundClip: \"text\",\n    WebkitTextFillColor: \"transparent\"\n  },\n  branding: {\n    fontWeight: 900,\n    lineHeight: \"32px\",\n    textTransform: \"uppercase\",\n    marginBottom: 20\n  },\n  brandingSymbol: {\n    marginRight: 12\n  },\n  card: {\n    width: \"100%\"\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  serviceIcon: {\n    width: 36,\n    textAlign: \"center\"\n  },\n  beta: {\n    fontFamily: \"Architects Daughter, cursive\",\n    fontSize: 14,\n    textTransform: \"lowercase\"\n  },\n  listItemRoot: {\n    paddingLeft: 0\n  },\n  popover: {\n    pointerEvents: \"none\"\n  },\n  paper: {\n    padding: theme.spacing(1)\n  }\n}));\n\nexport enum LayerType {\n  ScatterPlot,\n  Heatmap,\n  Grid,\n  Extruded\n}\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  const [checked, setChecked] = React.useState([\n    ServiceType.FamilyMedicine,\n    ServiceType.HomeCare,\n    ServiceType.Imaging,\n    ServiceType.Laboratory\n  ]);\n  const [tooltip, setTooltip] = React.useState();\n  const [pinnedTooltip, setPinnedTooltip] = React.useState();\n  const [layerType, setLayerType] = React.useState(LayerType.ScatterPlot);\n\n  React.useEffect(() => {\n    loadCSS(\n      \"https://pro.fontawesome.com/releases/v5.10.1/css/all.css\",\n      document.querySelector(\"#font-awesome-css\")\n    );\n  }, []);\n\n  const handleToggle = (value: any) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const onServiceHover = (obj: ServiceObject) => {\n    setTooltip(obj);\n  };\n\n  const onServiceClick = (obj: ServiceObject) => {\n    setPinnedTooltip(obj);\n  };\n\n  const unpinTooltip = () => {\n    setPinnedTooltip(null);\n  };\n\n  const handleChangeLayerType = (_: any, newLayerType: LayerType) => {\n    if (newLayerType === layerType) {\n      return;\n    }\n\n    setLayerType(newLayerType);\n  };\n\n  return (\n    <div>\n      <aside className={classes.aside}>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography\n              variant=\"h5\"\n              component=\"h2\"\n              className={clsx(classes.branding, classes.gradientText)}\n            >\n              <Icon\n                className={clsx(\n                  classes.brandingSymbol,\n                  classes.gradientText,\n                  \"fas fa-route\"\n                )}\n              />\n              Navigator\n              <sup className={classes.beta}>α</sup>\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Aplicația GPS a{\" \"}\n              <a\n                href=\"https://www.csid.ro/health/noutati-sanatate/navigatorul-de-pacienti-specialistul-cu-rol-important-in-relatia-dintre-pacient-si-medic-16034421/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                navigatorilor de pacienți oncologici\n              </a>{\" \"}\n              din România.\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n              Poți explora harta prin hover și click pe punctele afișate, și\n              prin selecția categoriilor de furnizori medicali pe care dorești\n              să îi afișezi. Datele sunt preluate pentru Municipiul București{\" \"}\n              <a\n                href=\"http://www.cnas.ro/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                de pe site-ul CNAS\n              </a>\n              .\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" style={{ marginTop: 6 }}>\n              Adițional, pentru fiecare furnizor afișat,{\" \"}\n              <a\n                href=\"https://github.com/civicnet/cancer-atlas-scripts\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                am generat coordonatele GPS\n              </a>{\" \"}\n              pentru afișarea pe hartă.\n            </Typography>\n            <List className={classes.filterList}>\n              {Object.values(ServiceType).map(file => {\n                const ServiceSwitch = CustomSwitch(ServiceTypeColorMap[file]);\n                return (\n                  <ListItem key={file} classes={{ root: classes.listItemRoot }}>\n                    <ListItemIcon>\n                      <Icon\n                        className={clsx(\n                          classes.serviceIcon,\n                          ServiceTypeIcons[file]\n                        )}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      id=\"switch-list-label-wifi\"\n                      primary={ServiceTypeReadable[file]}\n                    />\n                    <ListItemSecondaryAction>\n                      <ServiceSwitch\n                        edge=\"end\"\n                        disabled={layerType === LayerType.Extruded}\n                        onChange={handleToggle(file)}\n                        checked={\n                          checked.indexOf(file) !== -1 &&\n                          layerType !== LayerType.Extruded\n                        }\n                        inputProps={{\n                          \"aria-labelledby\": \"switch-list-label-wifi\"\n                        }}\n                      />\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </CardContent>\n          <CardActions>\n            <Button\n              size=\"small\"\n              href=\"https://github.com/civicnet/cancer-atlas\"\n            >\n              Cod sursă\n            </Button>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n              {popupState => (\n                <div>\n                  <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    {...bindTrigger(popupState)}\n                  >\n                    Despre proiect\n                    <Icon\n                      className=\"far fa-question-circle\"\n                      style={{ marginLeft: 4, fontSize: 13 }}\n                    />\n                  </Button>\n\n                  <Popover\n                    {...bindPopover(popupState)}\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\"\n                    }}\n                    transformOrigin={{\n                      vertical: \"top\",\n                      horizontal: \"center\"\n                    }}\n                  >\n                    <Box p={2} style={{ maxWidth: 320 }}>\n                      <Typography variant=\"body1\">\n                        Un proiect{\" \"}\n                        <a\n                          href=\"https://civicnet.ro\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          CivicNet\n                        </a>{\" \"}\n                        și{\" \"}\n                        <a\n                          href=\"https://www.facebook.com/SanatatepentruComunitate\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Asociația Sănătate pentru Comunitate\n                        </a>\n                        .\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Ne propunem să dezvoltăm{\" \"}\n                        <strong>\n                          prima aplicație dedicată pacienților de cancer\n                          pulmonar din România\n                        </strong>\n                        , navigatorilor acestora, dar și personalului medical.\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        Aplicația va conține informații importante despre\n                        traseul pacienților, de la diagnosticare până la\n                        îngrijire paliativă, și informații sub formă de{\" \"}\n                        <a\n                          href=\"https://sanatateabuzoiana.ro/primul-ghid-al-supravietuitorului-de-cancer-localizat-la-nivelul-capului-si-gatului/#.XgDw6sYzZhE\"\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          ghiduri pentru pacienți.\n                        </a>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"p\"\n                        style={{ marginTop: 6 }}\n                      >\n                        În momentul de față, aplicația se află în stadiul de\n                        prototip interactiv. Ne puteți urmări pe Facebook pentru\n                        a fi la curent cu ultimele noutăți.\n                      </Typography>\n                    </Box>\n                  </Popover>\n                </div>\n              )}\n            </PopupState>\n          </CardActions>\n        </Card>\n        <div\n          style={{\n            display: \"flex\",\n            flex: 1,\n            marginTop: 20,\n            backgroundColor: \"transparent\"\n          }}\n        >\n          <div style={{ flex: 1, display: \"flex\" }}>\n            <ToggleButtonGroup\n              value={layerType}\n              exclusive={true}\n              onChange={handleChangeLayerType}\n              size=\"small\"\n              aria-label=\"text alignment\"\n            >\n              <ToggleButton\n                value={LayerType.ScatterPlot}\n                aria-label=\"left aligned\"\n                title=\"Vezi furnizorii de servicii medicale ca puncte pe hartă\"\n              >\n                <Icon className=\"far fa-braille\" />\n              </ToggleButton>\n              <ToggleButton\n                value={LayerType.Heatmap}\n                aria-label=\"centered\"\n                title=\"Vezi distribuția furnizorilor de servicii medicale sub formă de heatmap\"\n              >\n                <Icon className=\"fal fa-flame\" />\n              </ToggleButton>\n              <ToggleButton\n                value={LayerType.Grid}\n                aria-label=\"right aligned\"\n                title=\"Vezi distribuția furnizorilor de servicii medicale sub formă de grid\"\n              >\n                <Icon className=\"fal fa-th\" />\n              </ToggleButton>\n              <ToggleButton\n                value={LayerType.Extruded}\n                aria-label=\"justified\"\n                title=\"Vezi clădirile în care au puncte de lucru medicii de familie\"\n              >\n                <Icon className=\"fal fa-cube\" />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n          {(layerType === LayerType.Heatmap ||\n            layerType === LayerType.Grid) && (\n            <div style={{ flex: 1, display: \"flex\", border: \"2px solid #FFF\" }}>\n              {getAggregateColorRange().map((color, idx) => (\n                <div\n                  style={{\n                    flex: 1,\n                    backgroundColor: chroma(color).hex(),\n                    display: \"flex\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  {idx === 0 && (\n                    <Icon\n                      className=\"fal fa-long-arrow-alt-down\"\n                      style={{ color: \"#fff\", alignSelf: \"center\" }}\n                    />\n                  )}\n                  {idx === 5 && (\n                    <Icon\n                      className=\"fal fa-long-arrow-alt-up\"\n                      style={{ color: \"#333\", alignSelf: \"center\" }}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </aside>\n      <div className={classes.tooltipContainer}>\n        {<Tooltip service={pinnedTooltip} onClose={unpinTooltip} />}\n        {<Tooltip service={tooltip} style={{ marginTop: 20 }} />}\n      </div>\n      <main>\n        <ServiceMap\n          services={checked}\n          onHover={onServiceHover}\n          onClick={onServiceClick}\n          layerType={layerType}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  ServiceObject,\n  ServiceType,\n  ServiceTypeIcons,\n  ServiceTypeReadable\n} from \"../ServiceMap\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  Icon,\n  ListItemText,\n  IconButton\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"100%\"\n  },\n  title: {\n    fontSize: 14\n  },\n  icon: {\n    width: 36,\n    textAlign: \"center\"\n  }\n});\n\ninterface Props {\n  service?: ServiceObject;\n  style?: React.CSSProperties;\n  onClose?: () => void;\n}\n\nconst Tooltip: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  if (!props.service) {\n    return null;\n  }\n\n  const differentiator =\n    props.service.type === ServiceType.FamilyMedicine ? (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-clinic-medical\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.supplierName} />\n      </ListItem>\n    ) : (\n      <ListItem>\n        <ListItemIcon>\n          <Icon className={clsx(classes.icon, \"fal fa-bookmark\")} />\n        </ListItemIcon>\n        <ListItemText primary={props.service.specialty} />\n      </ListItem>\n    );\n\n  return (\n    <Card className={classes.card} style={props.style}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {ServiceTypeReadable[props.service.type]}\n        </Typography>\n        <List dense={true}>\n          <ListItem>\n            <ListItemIcon>\n              <Icon\n                className={clsx(\n                  classes.icon,\n                  ServiceTypeIcons[props.service.type]\n                )}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                props.service.type === ServiceType.FamilyMedicine\n                  ? props.service.medicName\n                  : props.service.name\n              }\n            />\n          </ListItem>\n          {differentiator}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-map-marker-alt\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.address} />\n          </ListItem>\n          {props.service.email && (\n            <ListItem>\n              <ListItemIcon>\n                <Icon className={clsx(classes.icon, \"fal fa-envelope\")} />\n              </ListItemIcon>\n              <ListItemText primary={props.service.email} />\n            </ListItem>\n          )}\n          <ListItem>\n            <ListItemIcon>\n              <Icon className={clsx(classes.icon, \"fal fa-phone\")} />\n            </ListItemIcon>\n            <ListItemText primary={props.service.phone} />\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions>\n        {props.onClose && (\n          <IconButton\n            size=\"small\"\n            color=\"primary\"\n            onClick={props.onClose}\n            style={{ marginLeft: \"auto\" }}\n          >\n            <Icon\n              className=\"fal fa-eye-slash\"\n              style={{ fontSize: 16, width: \"unset\" }}\n            />\n          </IconButton>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Tooltip;\n","import { withStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\n \nimport { ServiceTypeColor } from '../ServiceMap';\n\nexport const CustomSwitch = (color: ServiceTypeColor) => {\n    return withStyles({\n        switchBase: {\n            color,\n            '&$checked': {\n                color,\n            },\n            '&$checked + $track': {\n                backgroundColor: color,\n            },\n        },\n        checked: {},\n        track: {},\n    })(Switch);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}